<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1606" onload="init(evt)" viewBox="0 0 1200 1606" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1606" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1589.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1589.00"> </text><svg id="frames" x="10" width="1180"><g><title>[libnvidia-glcore.so.435.21] (21 samples, 0.11%)</title><rect x="0.8147%" y="1253" width="0.1133%" height="15" fill="rgb(227,0,7)"/><text x="1.0647%" y="1263.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (33 samples, 0.18%)</title><rect x="0.7985%" y="1285" width="0.1781%" height="15" fill="rgb(217,0,24)"/><text x="1.0485%" y="1295.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (30 samples, 0.16%)</title><rect x="0.8147%" y="1269" width="0.1619%" height="15" fill="rgb(221,193,54)"/><text x="1.0647%" y="1279.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="0.7985%" y="1301" width="0.1834%" height="15" fill="rgb(248,212,6)"/><text x="1.0485%" y="1311.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (42 samples, 0.23%)</title><rect x="0.7823%" y="1317" width="0.2266%" height="15" fill="rgb(208,68,35)"/><text x="1.0323%" y="1327.50"></text></g><g><title>nv_alloc_system_pages (39 samples, 0.21%)</title><rect x="1.1654%" y="1269" width="0.2104%" height="15" fill="rgb(232,128,0)"/><text x="1.4154%" y="1279.50"></text></g><g><title>set_memory_uc (36 samples, 0.19%)</title><rect x="1.1816%" y="1253" width="0.1942%" height="15" fill="rgb(207,160,47)"/><text x="1.4316%" y="1263.50"></text></g><g><title>change_page_attr_set_clr (36 samples, 0.19%)</title><rect x="1.1816%" y="1237" width="0.1942%" height="15" fill="rgb(228,23,34)"/><text x="1.4316%" y="1247.50"></text></g><g><title>cpa_flush (35 samples, 0.19%)</title><rect x="1.1870%" y="1221" width="0.1888%" height="15" fill="rgb(218,30,26)"/><text x="1.4370%" y="1231.50"></text></g><g><title>on_each_cpu (35 samples, 0.19%)</title><rect x="1.1870%" y="1205" width="0.1888%" height="15" fill="rgb(220,122,19)"/><text x="1.4370%" y="1215.50"></text></g><g><title>smp_call_function_many_cond (34 samples, 0.18%)</title><rect x="1.1924%" y="1189" width="0.1834%" height="15" fill="rgb(250,228,42)"/><text x="1.4424%" y="1199.50"></text></g><g><title>_nv030287rm (40 samples, 0.22%)</title><rect x="1.1654%" y="1301" width="0.2158%" height="15" fill="rgb(240,193,28)"/><text x="1.4154%" y="1311.50"></text></g><g><title>nv_alloc_pages (40 samples, 0.22%)</title><rect x="1.1654%" y="1285" width="0.2158%" height="15" fill="rgb(216,20,37)"/><text x="1.4154%" y="1295.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (128 samples, 0.69%)</title><rect x="0.7446%" y="1333" width="0.6906%" height="15" fill="rgb(206,188,39)"/><text x="0.9946%" y="1343.50"></text></g><g><title>__ioctl (78 samples, 0.42%)</title><rect x="1.0144%" y="1317" width="0.4208%" height="15" fill="rgb(217,207,13)"/><text x="1.2644%" y="1327.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (139 samples, 0.75%)</title><rect x="0.7176%" y="1349" width="0.7500%" height="15" fill="rgb(231,73,38)"/><text x="0.9676%" y="1359.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (155 samples, 0.84%)</title><rect x="0.6582%" y="1365" width="0.8363%" height="15" fill="rgb(225,20,46)"/><text x="0.9082%" y="1375.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (169 samples, 0.91%)</title><rect x="0.6367%" y="1381" width="0.9118%" height="15" fill="rgb(210,31,41)"/><text x="0.8867%" y="1391.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (187 samples, 1.01%)</title><rect x="0.5773%" y="1397" width="1.0090%" height="15" fill="rgb(221,200,47)"/><text x="0.8273%" y="1407.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (196 samples, 1.06%)</title><rect x="0.5342%" y="1413" width="1.0575%" height="15" fill="rgb(226,26,5)"/><text x="0.7842%" y="1423.50"></text></g><g><title>_nv008277rm (28 samples, 0.15%)</title><rect x="1.6079%" y="1397" width="0.1511%" height="15" fill="rgb(249,33,26)"/><text x="1.8579%" y="1407.50"></text></g><g><title>os_flush_cpu_write_combine_buffer (24 samples, 0.13%)</title><rect x="1.6294%" y="1381" width="0.1295%" height="15" fill="rgb(235,183,28)"/><text x="1.8794%" y="1391.50"></text></g><g><title>change_page_attr_set_clr (53 samples, 0.29%)</title><rect x="1.9316%" y="1333" width="0.2860%" height="15" fill="rgb(221,5,38)"/><text x="2.1816%" y="1343.50"></text></g><g><title>cpa_flush (49 samples, 0.26%)</title><rect x="1.9532%" y="1317" width="0.2644%" height="15" fill="rgb(247,18,42)"/><text x="2.2032%" y="1327.50"></text></g><g><title>on_each_cpu (49 samples, 0.26%)</title><rect x="1.9532%" y="1301" width="0.2644%" height="15" fill="rgb(241,131,45)"/><text x="2.2032%" y="1311.50"></text></g><g><title>smp_call_function_many_cond (48 samples, 0.26%)</title><rect x="1.9586%" y="1285" width="0.2590%" height="15" fill="rgb(249,31,29)"/><text x="2.2086%" y="1295.50"></text></g><g><title>_nv030357rm (57 samples, 0.31%)</title><rect x="1.9154%" y="1397" width="0.3075%" height="15" fill="rgb(225,111,53)"/><text x="2.1654%" y="1407.50"></text></g><g><title>nv_free_pages (57 samples, 0.31%)</title><rect x="1.9154%" y="1381" width="0.3075%" height="15" fill="rgb(238,160,17)"/><text x="2.1654%" y="1391.50"></text></g><g><title>nv_free_system_pages (57 samples, 0.31%)</title><rect x="1.9154%" y="1365" width="0.3075%" height="15" fill="rgb(214,148,48)"/><text x="2.1654%" y="1375.50"></text></g><g><title>set_memory_wb (54 samples, 0.29%)</title><rect x="1.9316%" y="1349" width="0.2914%" height="15" fill="rgb(232,36,49)"/><text x="2.1816%" y="1359.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (322 samples, 1.74%)</title><rect x="0.4910%" y="1429" width="1.7373%" height="15" fill="rgb(209,103,24)"/><text x="0.7410%" y="1439.50"></text></g><g><title>__ioctl (118 samples, 0.64%)</title><rect x="1.5917%" y="1413" width="0.6367%" height="15" fill="rgb(229,88,8)"/><text x="1.8417%" y="1423.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (336 samples, 1.81%)</title><rect x="0.4478%" y="1445" width="1.8129%" height="15" fill="rgb(213,181,19)"/><text x="0.6978%" y="1455.50">[..</text></g><g><title>[libnvidia-glcore.so.435.21] (350 samples, 1.89%)</title><rect x="0.3993%" y="1461" width="1.8884%" height="15" fill="rgb(254,191,54)"/><text x="0.6493%" y="1471.50">[..</text></g><g><title>[libnvidia-glcore.so.435.21] (370 samples, 2.00%)</title><rect x="0.3075%" y="1477" width="1.9963%" height="15" fill="rgb(241,83,37)"/><text x="0.5575%" y="1487.50">[..</text></g><g><title>[libnvidia-glcore.so.435.21] (408 samples, 2.20%)</title><rect x="0.1187%" y="1493" width="2.2014%" height="15" fill="rgb(233,36,39)"/><text x="0.3687%" y="1503.50">[..</text></g><g><title>[libnvidia-glcore.so.435.21] (426 samples, 2.30%)</title><rect x="0.0755%" y="1509" width="2.2985%" height="15" fill="rgb(226,3,54)"/><text x="0.3255%" y="1519.50">[..</text></g><g><title>[libGLX_nvidia.so.435.21] (445 samples, 2.40%)</title><rect x="0.0162%" y="1525" width="2.4010%" height="15" fill="rgb(245,192,40)"/><text x="0.2662%" y="1535.50">[l..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (23 samples, 0.12%)</title><rect x="2.4226%" y="1509" width="0.1241%" height="15" fill="rgb(238,167,29)"/><text x="2.6726%" y="1519.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (23 samples, 0.12%)</title><rect x="2.4226%" y="1493" width="0.1241%" height="15" fill="rgb(232,182,51)"/><text x="2.6726%" y="1503.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.12%)</title><rect x="2.4226%" y="1477" width="0.1241%" height="15" fill="rgb(231,60,39)"/><text x="2.6726%" y="1487.50"></text></g><g><title>std::panicking::try (23 samples, 0.12%)</title><rect x="2.4226%" y="1461" width="0.1241%" height="15" fill="rgb(208,69,12)"/><text x="2.6726%" y="1471.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.12%)</title><rect x="2.4226%" y="1445" width="0.1241%" height="15" fill="rgb(235,93,37)"/><text x="2.6726%" y="1455.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 0.12%)</title><rect x="2.4226%" y="1429" width="0.1241%" height="15" fill="rgb(213,116,39)"/><text x="2.6726%" y="1439.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (23 samples, 0.12%)</title><rect x="2.4226%" y="1413" width="0.1241%" height="15" fill="rgb(222,207,29)"/><text x="2.6726%" y="1423.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (21 samples, 0.11%)</title><rect x="2.7085%" y="1509" width="0.1133%" height="15" fill="rgb(206,96,30)"/><text x="2.9585%" y="1519.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (21 samples, 0.11%)</title><rect x="2.7085%" y="1493" width="0.1133%" height="15" fill="rgb(218,138,4)"/><text x="2.9585%" y="1503.50"></text></g><g><title>std::panic::catch_unwind (21 samples, 0.11%)</title><rect x="2.7085%" y="1477" width="0.1133%" height="15" fill="rgb(250,191,14)"/><text x="2.9585%" y="1487.50"></text></g><g><title>std::panicking::try (21 samples, 0.11%)</title><rect x="2.7085%" y="1461" width="0.1133%" height="15" fill="rgb(239,60,40)"/><text x="2.9585%" y="1471.50"></text></g><g><title>std::panicking::try::do_call (21 samples, 0.11%)</title><rect x="2.7085%" y="1445" width="0.1133%" height="15" fill="rgb(206,27,48)"/><text x="2.9585%" y="1455.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (21 samples, 0.11%)</title><rect x="2.7085%" y="1429" width="0.1133%" height="15" fill="rgb(225,35,8)"/><text x="2.9585%" y="1439.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (21 samples, 0.11%)</title><rect x="2.7085%" y="1413" width="0.1133%" height="15" fill="rgb(250,213,24)"/><text x="2.9585%" y="1423.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (21 samples, 0.11%)</title><rect x="2.7085%" y="1397" width="0.1133%" height="15" fill="rgb(247,123,22)"/><text x="2.9585%" y="1407.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (21 samples, 0.11%)</title><rect x="2.7085%" y="1381" width="0.1133%" height="15" fill="rgb(231,138,38)"/><text x="2.9585%" y="1391.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (21 samples, 0.11%)</title><rect x="2.7085%" y="1365" width="0.1133%" height="15" fill="rgb(231,145,46)"/><text x="2.9585%" y="1375.50"></text></g><g><title>rayon_core::registry::main_loop (21 samples, 0.11%)</title><rect x="2.7085%" y="1349" width="0.1133%" height="15" fill="rgb(251,118,11)"/><text x="2.9585%" y="1359.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (21 samples, 0.11%)</title><rect x="2.7085%" y="1333" width="0.1133%" height="15" fill="rgb(217,147,25)"/><text x="2.9585%" y="1343.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (21 samples, 0.11%)</title><rect x="2.7085%" y="1317" width="0.1133%" height="15" fill="rgb(247,81,37)"/><text x="2.9585%" y="1327.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (21 samples, 0.11%)</title><rect x="2.7085%" y="1301" width="0.1133%" height="15" fill="rgb(209,12,38)"/><text x="2.9585%" y="1311.50"></text></g><g><title>rayon_core::job::JobRef::execute (21 samples, 0.11%)</title><rect x="2.7085%" y="1285" width="0.1133%" height="15" fill="rgb(227,1,9)"/><text x="2.9585%" y="1295.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (21 samples, 0.11%)</title><rect x="2.7085%" y="1269" width="0.1133%" height="15" fill="rgb(248,47,43)"/><text x="2.9585%" y="1279.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (21 samples, 0.11%)</title><rect x="2.7085%" y="1253" width="0.1133%" height="15" fill="rgb(221,10,30)"/><text x="2.9585%" y="1263.50"></text></g><g><title>std::panic::catch_unwind (21 samples, 0.11%)</title><rect x="2.7085%" y="1237" width="0.1133%" height="15" fill="rgb(210,229,1)"/><text x="2.9585%" y="1247.50"></text></g><g><title>std::panicking::try (21 samples, 0.11%)</title><rect x="2.7085%" y="1221" width="0.1133%" height="15" fill="rgb(222,148,37)"/><text x="2.9585%" y="1231.50"></text></g><g><title>std::panicking::try::do_call (21 samples, 0.11%)</title><rect x="2.7085%" y="1205" width="0.1133%" height="15" fill="rgb(234,67,33)"/><text x="2.9585%" y="1215.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (21 samples, 0.11%)</title><rect x="2.7085%" y="1189" width="0.1133%" height="15" fill="rgb(247,98,35)"/><text x="2.9585%" y="1199.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (21 samples, 0.11%)</title><rect x="2.7085%" y="1173" width="0.1133%" height="15" fill="rgb(247,138,52)"/><text x="2.9585%" y="1183.50"></text></g><g><title>nenbody::build_command_buffer (34 samples, 0.18%)</title><rect x="2.8326%" y="1509" width="0.1834%" height="15" fill="rgb(213,79,30)"/><text x="3.0826%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (34 samples, 0.18%)</title><rect x="2.8326%" y="1493" width="0.1834%" height="15" fill="rgb(246,177,23)"/><text x="3.0826%" y="1503.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (34 samples, 0.18%)</title><rect x="2.8326%" y="1477" width="0.1834%" height="15" fill="rgb(230,62,27)"/><text x="3.0826%" y="1487.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (34 samples, 0.18%)</title><rect x="2.8326%" y="1461" width="0.1834%" height="15" fill="rgb(216,154,8)"/><text x="3.0826%" y="1471.50"></text></g><g><title>nenbody::build_command_buffer::{{closure}} (34 samples, 0.18%)</title><rect x="2.8326%" y="1445" width="0.1834%" height="15" fill="rgb(244,35,45)"/><text x="3.0826%" y="1455.50"></text></g><g><title>core::mem::drop (34 samples, 0.18%)</title><rect x="2.8326%" y="1429" width="0.1834%" height="15" fill="rgb(251,115,12)"/><text x="3.0826%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place (34 samples, 0.18%)</title><rect x="2.8326%" y="1413" width="0.1834%" height="15" fill="rgb(240,54,50)"/><text x="3.0826%" y="1423.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_end_render_pass (34 samples, 0.18%)</title><rect x="2.8326%" y="1397" width="0.1834%" height="15" fill="rgb(233,84,52)"/><text x="3.0826%" y="1407.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (34 samples, 0.18%)</title><rect x="2.8326%" y="1381" width="0.1834%" height="15" fill="rgb(207,117,47)"/><text x="3.0826%" y="1391.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (34 samples, 0.18%)</title><rect x="2.8326%" y="1365" width="0.1834%" height="15" fill="rgb(249,43,39)"/><text x="3.0826%" y="1375.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::begin_render_pass (34 samples, 0.18%)</title><rect x="2.8326%" y="1349" width="0.1834%" height="15" fill="rgb(209,38,44)"/><text x="3.0826%" y="1359.50"></text></g><g><title>inplace_it::alloc_array::inplace_or_alloc_array (34 samples, 0.18%)</title><rect x="2.8326%" y="1333" width="0.1834%" height="15" fill="rgb(236,212,23)"/><text x="3.0826%" y="1343.50"></text></g><g><title>inplace_it::fixed_array::try_inplace_array (34 samples, 0.18%)</title><rect x="2.8326%" y="1317" width="0.1834%" height="15" fill="rgb(242,79,21)"/><text x="3.0826%" y="1327.50"></text></g><g><title>inplace_it::fixed_array::indirect (34 samples, 0.18%)</title><rect x="2.8326%" y="1301" width="0.1834%" height="15" fill="rgb(211,96,35)"/><text x="3.0826%" y="1311.50"></text></g><g><title>inplace_it::fixed_array::try_inplace_array::{{closure}} (34 samples, 0.18%)</title><rect x="2.8326%" y="1285" width="0.1834%" height="15" fill="rgb(253,215,40)"/><text x="3.0826%" y="1295.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::begin_render_pass::{{closure}} (34 samples, 0.18%)</title><rect x="2.8326%" y="1269" width="0.1834%" height="15" fill="rgb(211,81,21)"/><text x="3.0826%" y="1279.50"></text></g><g><title>ash::device::DeviceV1_0::cmd_begin_render_pass (34 samples, 0.18%)</title><rect x="2.8326%" y="1253" width="0.1834%" height="15" fill="rgb(208,190,38)"/><text x="3.0826%" y="1263.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1237" width="0.1834%" height="15" fill="rgb(235,213,38)"/><text x="3.0826%" y="1247.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1221" width="0.1834%" height="15" fill="rgb(237,122,38)"/><text x="3.0826%" y="1231.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1205" width="0.1834%" height="15" fill="rgb(244,218,35)"/><text x="3.0826%" y="1215.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1189" width="0.1834%" height="15" fill="rgb(240,68,47)"/><text x="3.0826%" y="1199.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1173" width="0.1834%" height="15" fill="rgb(210,16,53)"/><text x="3.0826%" y="1183.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1157" width="0.1834%" height="15" fill="rgb(235,124,12)"/><text x="3.0826%" y="1167.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1141" width="0.1834%" height="15" fill="rgb(224,169,11)"/><text x="3.0826%" y="1151.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1125" width="0.1834%" height="15" fill="rgb(250,166,2)"/><text x="3.0826%" y="1135.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1109" width="0.1834%" height="15" fill="rgb(242,216,29)"/><text x="3.0826%" y="1119.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1093" width="0.1834%" height="15" fill="rgb(230,116,27)"/><text x="3.0826%" y="1103.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1077" width="0.1834%" height="15" fill="rgb(228,99,48)"/><text x="3.0826%" y="1087.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1061" width="0.1834%" height="15" fill="rgb(253,11,6)"/><text x="3.0826%" y="1071.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (34 samples, 0.18%)</title><rect x="2.8326%" y="1045" width="0.1834%" height="15" fill="rgb(247,143,39)"/><text x="3.0826%" y="1055.50"></text></g><g><title>winit::platform_impl::platform::sticky_exit_callback (21 samples, 0.11%)</title><rect x="3.0592%" y="1429" width="0.1133%" height="15" fill="rgb(236,97,10)"/><text x="3.3092%" y="1439.50"></text></g><g><title>nenbody::main::{{closure}}::{{closure}} (21 samples, 0.11%)</title><rect x="3.0592%" y="1413" width="0.1133%" height="15" fill="rgb(233,208,19)"/><text x="3.3092%" y="1423.50"></text></g><g><title>nenbody::main::{{closure}} (52 samples, 0.28%)</title><rect x="3.0161%" y="1509" width="0.2806%" height="15" fill="rgb(216,164,2)"/><text x="3.2661%" y="1519.50"></text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (52 samples, 0.28%)</title><rect x="3.0161%" y="1493" width="0.2806%" height="15" fill="rgb(220,129,5)"/><text x="3.2661%" y="1503.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (52 samples, 0.28%)</title><rect x="3.0161%" y="1477" width="0.2806%" height="15" fill="rgb(242,17,10)"/><text x="3.2661%" y="1487.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (52 samples, 0.28%)</title><rect x="3.0161%" y="1461" width="0.2806%" height="15" fill="rgb(242,107,0)"/><text x="3.2661%" y="1471.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return (52 samples, 0.28%)</title><rect x="3.0161%" y="1445" width="0.2806%" height="15" fill="rgb(251,28,31)"/><text x="3.2661%" y="1455.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (45 samples, 0.24%)</title><rect x="3.3722%" y="1509" width="0.2428%" height="15" fill="rgb(233,223,10)"/><text x="3.6222%" y="1519.50"></text></g><g><title>rayon_core::join::join_context (45 samples, 0.24%)</title><rect x="3.3722%" y="1493" width="0.2428%" height="15" fill="rgb(215,21,27)"/><text x="3.6222%" y="1503.50"></text></g><g><title>rayon_core::registry::in_worker (45 samples, 0.24%)</title><rect x="3.3722%" y="1477" width="0.2428%" height="15" fill="rgb(232,23,21)"/><text x="3.6222%" y="1487.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (45 samples, 0.24%)</title><rect x="3.3722%" y="1461" width="0.2428%" height="15" fill="rgb(244,5,23)"/><text x="3.6222%" y="1471.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (23 samples, 0.12%)</title><rect x="3.7984%" y="1093" width="0.1241%" height="15" fill="rgb(226,81,46)"/><text x="4.0484%" y="1103.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (23 samples, 0.12%)</title><rect x="3.7984%" y="1077" width="0.1241%" height="15" fill="rgb(247,70,30)"/><text x="4.0484%" y="1087.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (23 samples, 0.12%)</title><rect x="3.7984%" y="1061" width="0.1241%" height="15" fill="rgb(212,68,19)"/><text x="4.0484%" y="1071.50"></text></g><g><title>rayon_core::job::JobRef::execute (23 samples, 0.12%)</title><rect x="3.7984%" y="1045" width="0.1241%" height="15" fill="rgb(240,187,13)"/><text x="4.0484%" y="1055.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (23 samples, 0.12%)</title><rect x="3.7984%" y="1029" width="0.1241%" height="15" fill="rgb(223,113,26)"/><text x="4.0484%" y="1039.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (23 samples, 0.12%)</title><rect x="3.7984%" y="1013" width="0.1241%" height="15" fill="rgb(206,192,2)"/><text x="4.0484%" y="1023.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.12%)</title><rect x="3.7984%" y="997" width="0.1241%" height="15" fill="rgb(241,108,4)"/><text x="4.0484%" y="1007.50"></text></g><g><title>std::panicking::try (23 samples, 0.12%)</title><rect x="3.7984%" y="981" width="0.1241%" height="15" fill="rgb(247,173,49)"/><text x="4.0484%" y="991.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.12%)</title><rect x="3.7984%" y="965" width="0.1241%" height="15" fill="rgb(224,114,35)"/><text x="4.0484%" y="975.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 0.12%)</title><rect x="3.7984%" y="949" width="0.1241%" height="15" fill="rgb(245,159,27)"/><text x="4.0484%" y="959.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (23 samples, 0.12%)</title><rect x="3.7984%" y="933" width="0.1241%" height="15" fill="rgb(245,172,44)"/><text x="4.0484%" y="943.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (23 samples, 0.12%)</title><rect x="3.7984%" y="917" width="0.1241%" height="15" fill="rgb(236,23,11)"/><text x="4.0484%" y="927.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (23 samples, 0.12%)</title><rect x="3.7984%" y="901" width="0.1241%" height="15" fill="rgb(205,117,38)"/><text x="4.0484%" y="911.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (23 samples, 0.12%)</title><rect x="3.7984%" y="885" width="0.1241%" height="15" fill="rgb(237,72,25)"/><text x="4.0484%" y="895.50"></text></g><g><title>rayon_core::join::join_context (23 samples, 0.12%)</title><rect x="3.7984%" y="869" width="0.1241%" height="15" fill="rgb(244,70,9)"/><text x="4.0484%" y="879.50"></text></g><g><title>rayon_core::registry::in_worker (23 samples, 0.12%)</title><rect x="3.7984%" y="853" width="0.1241%" height="15" fill="rgb(217,125,39)"/><text x="4.0484%" y="863.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (23 samples, 0.12%)</title><rect x="3.7984%" y="837" width="0.1241%" height="15" fill="rgb(235,36,10)"/><text x="4.0484%" y="847.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (41 samples, 0.22%)</title><rect x="3.7229%" y="1205" width="0.2212%" height="15" fill="rgb(251,123,47)"/><text x="3.9729%" y="1215.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (41 samples, 0.22%)</title><rect x="3.7229%" y="1189" width="0.2212%" height="15" fill="rgb(221,13,13)"/><text x="3.9729%" y="1199.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (41 samples, 0.22%)</title><rect x="3.7229%" y="1173" width="0.2212%" height="15" fill="rgb(238,131,9)"/><text x="3.9729%" y="1183.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (41 samples, 0.22%)</title><rect x="3.7229%" y="1157" width="0.2212%" height="15" fill="rgb(211,50,8)"/><text x="3.9729%" y="1167.50"></text></g><g><title>rayon_core::join::join_context (41 samples, 0.22%)</title><rect x="3.7229%" y="1141" width="0.2212%" height="15" fill="rgb(245,182,24)"/><text x="3.9729%" y="1151.50"></text></g><g><title>rayon_core::registry::in_worker (41 samples, 0.22%)</title><rect x="3.7229%" y="1125" width="0.2212%" height="15" fill="rgb(242,14,37)"/><text x="3.9729%" y="1135.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (41 samples, 0.22%)</title><rect x="3.7229%" y="1109" width="0.2212%" height="15" fill="rgb(246,228,12)"/><text x="3.9729%" y="1119.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (20 samples, 0.11%)</title><rect x="4.0142%" y="933" width="0.1079%" height="15" fill="rgb(213,55,15)"/><text x="4.2642%" y="943.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (20 samples, 0.11%)</title><rect x="4.0142%" y="917" width="0.1079%" height="15" fill="rgb(209,9,3)"/><text x="4.2642%" y="927.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (20 samples, 0.11%)</title><rect x="4.0142%" y="901" width="0.1079%" height="15" fill="rgb(230,59,30)"/><text x="4.2642%" y="911.50"></text></g><g><title>rayon_core::job::JobRef::execute (20 samples, 0.11%)</title><rect x="4.0142%" y="885" width="0.1079%" height="15" fill="rgb(209,121,21)"/><text x="4.2642%" y="895.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (20 samples, 0.11%)</title><rect x="4.0142%" y="869" width="0.1079%" height="15" fill="rgb(220,109,13)"/><text x="4.2642%" y="879.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (20 samples, 0.11%)</title><rect x="4.0142%" y="853" width="0.1079%" height="15" fill="rgb(232,18,1)"/><text x="4.2642%" y="863.50"></text></g><g><title>std::panic::catch_unwind (20 samples, 0.11%)</title><rect x="4.0142%" y="837" width="0.1079%" height="15" fill="rgb(215,41,42)"/><text x="4.2642%" y="847.50"></text></g><g><title>std::panicking::try (20 samples, 0.11%)</title><rect x="4.0142%" y="821" width="0.1079%" height="15" fill="rgb(224,123,36)"/><text x="4.2642%" y="831.50"></text></g><g><title>std::panicking::try::do_call (20 samples, 0.11%)</title><rect x="4.0142%" y="805" width="0.1079%" height="15" fill="rgb(240,125,3)"/><text x="4.2642%" y="815.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20 samples, 0.11%)</title><rect x="4.0142%" y="789" width="0.1079%" height="15" fill="rgb(205,98,50)"/><text x="4.2642%" y="799.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (20 samples, 0.11%)</title><rect x="4.0142%" y="773" width="0.1079%" height="15" fill="rgb(205,185,37)"/><text x="4.2642%" y="783.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (20 samples, 0.11%)</title><rect x="4.0142%" y="757" width="0.1079%" height="15" fill="rgb(238,207,15)"/><text x="4.2642%" y="767.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (20 samples, 0.11%)</title><rect x="4.0142%" y="741" width="0.1079%" height="15" fill="rgb(213,199,42)"/><text x="4.2642%" y="751.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.11%)</title><rect x="4.0142%" y="725" width="0.1079%" height="15" fill="rgb(235,201,11)"/><text x="4.2642%" y="735.50"></text></g><g><title>rayon_core::join::join_context (20 samples, 0.11%)</title><rect x="4.0142%" y="709" width="0.1079%" height="15" fill="rgb(207,46,11)"/><text x="4.2642%" y="719.50"></text></g><g><title>rayon_core::registry::in_worker (20 samples, 0.11%)</title><rect x="4.0142%" y="693" width="0.1079%" height="15" fill="rgb(241,35,35)"/><text x="4.2642%" y="703.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (20 samples, 0.11%)</title><rect x="4.0142%" y="677" width="0.1079%" height="15" fill="rgb(243,32,47)"/><text x="4.2642%" y="687.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (55 samples, 0.30%)</title><rect x="3.9441%" y="1205" width="0.2968%" height="15" fill="rgb(247,202,23)"/><text x="4.1941%" y="1215.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (55 samples, 0.30%)</title><rect x="3.9441%" y="1189" width="0.2968%" height="15" fill="rgb(219,102,11)"/><text x="4.1941%" y="1199.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (55 samples, 0.30%)</title><rect x="3.9441%" y="1173" width="0.2968%" height="15" fill="rgb(243,110,44)"/><text x="4.1941%" y="1183.50"></text></g><g><title>rayon_core::job::JobRef::execute (55 samples, 0.30%)</title><rect x="3.9441%" y="1157" width="0.2968%" height="15" fill="rgb(222,74,54)"/><text x="4.1941%" y="1167.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (55 samples, 0.30%)</title><rect x="3.9441%" y="1141" width="0.2968%" height="15" fill="rgb(216,99,12)"/><text x="4.1941%" y="1151.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (55 samples, 0.30%)</title><rect x="3.9441%" y="1125" width="0.2968%" height="15" fill="rgb(226,22,26)"/><text x="4.1941%" y="1135.50"></text></g><g><title>std::panic::catch_unwind (55 samples, 0.30%)</title><rect x="3.9441%" y="1109" width="0.2968%" height="15" fill="rgb(217,163,10)"/><text x="4.1941%" y="1119.50"></text></g><g><title>std::panicking::try (55 samples, 0.30%)</title><rect x="3.9441%" y="1093" width="0.2968%" height="15" fill="rgb(213,25,53)"/><text x="4.1941%" y="1103.50"></text></g><g><title>std::panicking::try::do_call (55 samples, 0.30%)</title><rect x="3.9441%" y="1077" width="0.2968%" height="15" fill="rgb(252,105,26)"/><text x="4.1941%" y="1087.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (55 samples, 0.30%)</title><rect x="3.9441%" y="1061" width="0.2968%" height="15" fill="rgb(220,39,43)"/><text x="4.1941%" y="1071.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (55 samples, 0.30%)</title><rect x="3.9441%" y="1045" width="0.2968%" height="15" fill="rgb(229,68,48)"/><text x="4.1941%" y="1055.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (55 samples, 0.30%)</title><rect x="3.9441%" y="1029" width="0.2968%" height="15" fill="rgb(252,8,32)"/><text x="4.1941%" y="1039.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (55 samples, 0.30%)</title><rect x="3.9441%" y="1013" width="0.2968%" height="15" fill="rgb(223,20,43)"/><text x="4.1941%" y="1023.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (55 samples, 0.30%)</title><rect x="3.9441%" y="997" width="0.2968%" height="15" fill="rgb(229,81,49)"/><text x="4.1941%" y="1007.50"></text></g><g><title>rayon_core::join::join_context (55 samples, 0.30%)</title><rect x="3.9441%" y="981" width="0.2968%" height="15" fill="rgb(236,28,36)"/><text x="4.1941%" y="991.50"></text></g><g><title>rayon_core::registry::in_worker (55 samples, 0.30%)</title><rect x="3.9441%" y="965" width="0.2968%" height="15" fill="rgb(249,185,26)"/><text x="4.1941%" y="975.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (55 samples, 0.30%)</title><rect x="3.9441%" y="949" width="0.2968%" height="15" fill="rgb(249,174,33)"/><text x="4.1941%" y="959.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (22 samples, 0.12%)</title><rect x="4.1222%" y="933" width="0.1187%" height="15" fill="rgb(233,201,37)"/><text x="4.3722%" y="943.50"></text></g><g><title>std::panic::catch_unwind (22 samples, 0.12%)</title><rect x="4.1222%" y="917" width="0.1187%" height="15" fill="rgb(221,78,26)"/><text x="4.3722%" y="927.50"></text></g><g><title>std::panicking::try (22 samples, 0.12%)</title><rect x="4.1222%" y="901" width="0.1187%" height="15" fill="rgb(250,127,30)"/><text x="4.3722%" y="911.50"></text></g><g><title>std::panicking::try::do_call (22 samples, 0.12%)</title><rect x="4.1222%" y="885" width="0.1187%" height="15" fill="rgb(230,49,44)"/><text x="4.3722%" y="895.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22 samples, 0.12%)</title><rect x="4.1222%" y="869" width="0.1187%" height="15" fill="rgb(229,67,23)"/><text x="4.3722%" y="879.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (22 samples, 0.12%)</title><rect x="4.1222%" y="853" width="0.1187%" height="15" fill="rgb(249,83,47)"/><text x="4.3722%" y="863.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (22 samples, 0.12%)</title><rect x="4.1222%" y="837" width="0.1187%" height="15" fill="rgb(215,43,3)"/><text x="4.3722%" y="847.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (22 samples, 0.12%)</title><rect x="4.1222%" y="821" width="0.1187%" height="15" fill="rgb(238,154,13)"/><text x="4.3722%" y="831.50"></text></g><g><title>rayon_core::join::join_context (22 samples, 0.12%)</title><rect x="4.1222%" y="805" width="0.1187%" height="15" fill="rgb(219,56,2)"/><text x="4.3722%" y="815.50"></text></g><g><title>rayon_core::registry::in_worker (22 samples, 0.12%)</title><rect x="4.1222%" y="789" width="0.1187%" height="15" fill="rgb(233,0,4)"/><text x="4.3722%" y="799.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (22 samples, 0.12%)</title><rect x="4.1222%" y="773" width="0.1187%" height="15" fill="rgb(235,30,7)"/><text x="4.3722%" y="783.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (19 samples, 0.10%)</title><rect x="4.2409%" y="917" width="0.1025%" height="15" fill="rgb(250,79,13)"/><text x="4.4909%" y="927.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (19 samples, 0.10%)</title><rect x="4.2409%" y="901" width="0.1025%" height="15" fill="rgb(211,146,34)"/><text x="4.4909%" y="911.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (19 samples, 0.10%)</title><rect x="4.2409%" y="885" width="0.1025%" height="15" fill="rgb(228,22,38)"/><text x="4.4909%" y="895.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (19 samples, 0.10%)</title><rect x="4.2409%" y="869" width="0.1025%" height="15" fill="rgb(235,168,5)"/><text x="4.4909%" y="879.50"></text></g><g><title>rayon_core::join::join_context (19 samples, 0.10%)</title><rect x="4.2409%" y="853" width="0.1025%" height="15" fill="rgb(221,155,16)"/><text x="4.4909%" y="863.50"></text></g><g><title>rayon_core::registry::in_worker (19 samples, 0.10%)</title><rect x="4.2409%" y="837" width="0.1025%" height="15" fill="rgb(215,215,53)"/><text x="4.4909%" y="847.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (19 samples, 0.10%)</title><rect x="4.2409%" y="821" width="0.1025%" height="15" fill="rgb(223,4,10)"/><text x="4.4909%" y="831.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (20 samples, 0.11%)</title><rect x="4.3434%" y="917" width="0.1079%" height="15" fill="rgb(234,103,6)"/><text x="4.5934%" y="927.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (20 samples, 0.11%)</title><rect x="4.3434%" y="901" width="0.1079%" height="15" fill="rgb(227,97,0)"/><text x="4.5934%" y="911.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (20 samples, 0.11%)</title><rect x="4.3434%" y="885" width="0.1079%" height="15" fill="rgb(234,150,53)"/><text x="4.5934%" y="895.50"></text></g><g><title>rayon_core::job::JobRef::execute (20 samples, 0.11%)</title><rect x="4.3434%" y="869" width="0.1079%" height="15" fill="rgb(228,201,54)"/><text x="4.5934%" y="879.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (20 samples, 0.11%)</title><rect x="4.3434%" y="853" width="0.1079%" height="15" fill="rgb(222,22,37)"/><text x="4.5934%" y="863.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (20 samples, 0.11%)</title><rect x="4.3434%" y="837" width="0.1079%" height="15" fill="rgb(237,53,32)"/><text x="4.5934%" y="847.50"></text></g><g><title>std::panic::catch_unwind (20 samples, 0.11%)</title><rect x="4.3434%" y="821" width="0.1079%" height="15" fill="rgb(233,25,53)"/><text x="4.5934%" y="831.50"></text></g><g><title>std::panicking::try (20 samples, 0.11%)</title><rect x="4.3434%" y="805" width="0.1079%" height="15" fill="rgb(210,40,34)"/><text x="4.5934%" y="815.50"></text></g><g><title>std::panicking::try::do_call (20 samples, 0.11%)</title><rect x="4.3434%" y="789" width="0.1079%" height="15" fill="rgb(241,220,44)"/><text x="4.5934%" y="799.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20 samples, 0.11%)</title><rect x="4.3434%" y="773" width="0.1079%" height="15" fill="rgb(235,28,35)"/><text x="4.5934%" y="783.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (20 samples, 0.11%)</title><rect x="4.3434%" y="757" width="0.1079%" height="15" fill="rgb(210,56,17)"/><text x="4.5934%" y="767.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (20 samples, 0.11%)</title><rect x="4.3434%" y="741" width="0.1079%" height="15" fill="rgb(224,130,29)"/><text x="4.5934%" y="751.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (20 samples, 0.11%)</title><rect x="4.3434%" y="725" width="0.1079%" height="15" fill="rgb(235,212,8)"/><text x="4.5934%" y="735.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.11%)</title><rect x="4.3434%" y="709" width="0.1079%" height="15" fill="rgb(223,33,50)"/><text x="4.5934%" y="719.50"></text></g><g><title>rayon_core::join::join_context (20 samples, 0.11%)</title><rect x="4.3434%" y="693" width="0.1079%" height="15" fill="rgb(219,149,13)"/><text x="4.5934%" y="703.50"></text></g><g><title>rayon_core::registry::in_worker (20 samples, 0.11%)</title><rect x="4.3434%" y="677" width="0.1079%" height="15" fill="rgb(250,156,29)"/><text x="4.5934%" y="687.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (20 samples, 0.11%)</title><rect x="4.3434%" y="661" width="0.1079%" height="15" fill="rgb(216,193,19)"/><text x="4.5934%" y="671.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (42 samples, 0.23%)</title><rect x="4.2409%" y="1029" width="0.2266%" height="15" fill="rgb(216,135,14)"/><text x="4.4909%" y="1039.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (42 samples, 0.23%)</title><rect x="4.2409%" y="1013" width="0.2266%" height="15" fill="rgb(241,47,5)"/><text x="4.4909%" y="1023.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (42 samples, 0.23%)</title><rect x="4.2409%" y="997" width="0.2266%" height="15" fill="rgb(233,42,35)"/><text x="4.4909%" y="1007.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (42 samples, 0.23%)</title><rect x="4.2409%" y="981" width="0.2266%" height="15" fill="rgb(231,13,6)"/><text x="4.4909%" y="991.50"></text></g><g><title>rayon_core::join::join_context (42 samples, 0.23%)</title><rect x="4.2409%" y="965" width="0.2266%" height="15" fill="rgb(207,181,40)"/><text x="4.4909%" y="975.50"></text></g><g><title>rayon_core::registry::in_worker (42 samples, 0.23%)</title><rect x="4.2409%" y="949" width="0.2266%" height="15" fill="rgb(254,173,49)"/><text x="4.4909%" y="959.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (42 samples, 0.23%)</title><rect x="4.2409%" y="933" width="0.2266%" height="15" fill="rgb(221,1,38)"/><text x="4.4909%" y="943.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (24 samples, 0.13%)</title><rect x="4.4675%" y="1029" width="0.1295%" height="15" fill="rgb(206,124,46)"/><text x="4.7175%" y="1039.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (24 samples, 0.13%)</title><rect x="4.4675%" y="1013" width="0.1295%" height="15" fill="rgb(249,21,11)"/><text x="4.7175%" y="1023.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (23 samples, 0.12%)</title><rect x="4.4729%" y="997" width="0.1241%" height="15" fill="rgb(222,201,40)"/><text x="4.7229%" y="1007.50"></text></g><g><title>rayon_core::job::JobRef::execute (23 samples, 0.12%)</title><rect x="4.4729%" y="981" width="0.1241%" height="15" fill="rgb(235,61,29)"/><text x="4.7229%" y="991.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (23 samples, 0.12%)</title><rect x="4.4729%" y="965" width="0.1241%" height="15" fill="rgb(219,207,3)"/><text x="4.7229%" y="975.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (23 samples, 0.12%)</title><rect x="4.4729%" y="949" width="0.1241%" height="15" fill="rgb(222,56,46)"/><text x="4.7229%" y="959.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.12%)</title><rect x="4.4729%" y="933" width="0.1241%" height="15" fill="rgb(239,76,54)"/><text x="4.7229%" y="943.50"></text></g><g><title>std::panicking::try (23 samples, 0.12%)</title><rect x="4.4729%" y="917" width="0.1241%" height="15" fill="rgb(231,124,27)"/><text x="4.7229%" y="927.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.12%)</title><rect x="4.4729%" y="901" width="0.1241%" height="15" fill="rgb(249,195,6)"/><text x="4.7229%" y="911.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 0.12%)</title><rect x="4.4729%" y="885" width="0.1241%" height="15" fill="rgb(237,174,47)"/><text x="4.7229%" y="895.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (23 samples, 0.12%)</title><rect x="4.4729%" y="869" width="0.1241%" height="15" fill="rgb(206,201,31)"/><text x="4.7229%" y="879.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (23 samples, 0.12%)</title><rect x="4.4729%" y="853" width="0.1241%" height="15" fill="rgb(231,57,52)"/><text x="4.7229%" y="863.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (23 samples, 0.12%)</title><rect x="4.4729%" y="837" width="0.1241%" height="15" fill="rgb(248,177,22)"/><text x="4.7229%" y="847.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (23 samples, 0.12%)</title><rect x="4.4729%" y="821" width="0.1241%" height="15" fill="rgb(215,211,37)"/><text x="4.7229%" y="831.50"></text></g><g><title>rayon_core::join::join_context (23 samples, 0.12%)</title><rect x="4.4729%" y="805" width="0.1241%" height="15" fill="rgb(241,128,51)"/><text x="4.7229%" y="815.50"></text></g><g><title>rayon_core::registry::in_worker (23 samples, 0.12%)</title><rect x="4.4729%" y="789" width="0.1241%" height="15" fill="rgb(227,165,31)"/><text x="4.7229%" y="799.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (23 samples, 0.12%)</title><rect x="4.4729%" y="773" width="0.1241%" height="15" fill="rgb(228,167,24)"/><text x="4.7229%" y="783.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (185 samples, 1.00%)</title><rect x="3.7229%" y="1301" width="0.9982%" height="15" fill="rgb(228,143,12)"/><text x="3.9729%" y="1311.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (185 samples, 1.00%)</title><rect x="3.7229%" y="1285" width="0.9982%" height="15" fill="rgb(249,149,8)"/><text x="3.9729%" y="1295.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (185 samples, 1.00%)</title><rect x="3.7229%" y="1269" width="0.9982%" height="15" fill="rgb(243,35,44)"/><text x="3.9729%" y="1279.50"></text></g><g><title>rayon_core::join::join_context (185 samples, 1.00%)</title><rect x="3.7229%" y="1253" width="0.9982%" height="15" fill="rgb(246,89,9)"/><text x="3.9729%" y="1263.50"></text></g><g><title>rayon_core::registry::in_worker (185 samples, 1.00%)</title><rect x="3.7229%" y="1237" width="0.9982%" height="15" fill="rgb(233,213,13)"/><text x="3.9729%" y="1247.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (185 samples, 1.00%)</title><rect x="3.7229%" y="1221" width="0.9982%" height="15" fill="rgb(233,141,41)"/><text x="3.9729%" y="1231.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (89 samples, 0.48%)</title><rect x="4.2409%" y="1205" width="0.4802%" height="15" fill="rgb(239,167,4)"/><text x="4.4909%" y="1215.50"></text></g><g><title>std::panic::catch_unwind (89 samples, 0.48%)</title><rect x="4.2409%" y="1189" width="0.4802%" height="15" fill="rgb(209,217,16)"/><text x="4.4909%" y="1199.50"></text></g><g><title>std::panicking::try (89 samples, 0.48%)</title><rect x="4.2409%" y="1173" width="0.4802%" height="15" fill="rgb(219,88,35)"/><text x="4.4909%" y="1183.50"></text></g><g><title>std::panicking::try::do_call (89 samples, 0.48%)</title><rect x="4.2409%" y="1157" width="0.4802%" height="15" fill="rgb(220,193,23)"/><text x="4.4909%" y="1167.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (89 samples, 0.48%)</title><rect x="4.2409%" y="1141" width="0.4802%" height="15" fill="rgb(230,90,52)"/><text x="4.4909%" y="1151.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (89 samples, 0.48%)</title><rect x="4.2409%" y="1125" width="0.4802%" height="15" fill="rgb(252,106,19)"/><text x="4.4909%" y="1135.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (89 samples, 0.48%)</title><rect x="4.2409%" y="1109" width="0.4802%" height="15" fill="rgb(206,74,20)"/><text x="4.4909%" y="1119.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (89 samples, 0.48%)</title><rect x="4.2409%" y="1093" width="0.4802%" height="15" fill="rgb(230,138,44)"/><text x="4.4909%" y="1103.50"></text></g><g><title>rayon_core::join::join_context (89 samples, 0.48%)</title><rect x="4.2409%" y="1077" width="0.4802%" height="15" fill="rgb(235,182,43)"/><text x="4.4909%" y="1087.50"></text></g><g><title>rayon_core::registry::in_worker (89 samples, 0.48%)</title><rect x="4.2409%" y="1061" width="0.4802%" height="15" fill="rgb(242,16,51)"/><text x="4.4909%" y="1071.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (89 samples, 0.48%)</title><rect x="4.2409%" y="1045" width="0.4802%" height="15" fill="rgb(248,9,4)"/><text x="4.4909%" y="1055.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (23 samples, 0.12%)</title><rect x="4.5970%" y="1029" width="0.1241%" height="15" fill="rgb(210,31,22)"/><text x="4.8470%" y="1039.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.12%)</title><rect x="4.5970%" y="1013" width="0.1241%" height="15" fill="rgb(239,54,39)"/><text x="4.8470%" y="1023.50"></text></g><g><title>std::panicking::try (23 samples, 0.12%)</title><rect x="4.5970%" y="997" width="0.1241%" height="15" fill="rgb(230,99,41)"/><text x="4.8470%" y="1007.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.12%)</title><rect x="4.5970%" y="981" width="0.1241%" height="15" fill="rgb(253,106,12)"/><text x="4.8470%" y="991.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 0.12%)</title><rect x="4.5970%" y="965" width="0.1241%" height="15" fill="rgb(213,46,41)"/><text x="4.8470%" y="975.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (23 samples, 0.12%)</title><rect x="4.5970%" y="949" width="0.1241%" height="15" fill="rgb(215,133,35)"/><text x="4.8470%" y="959.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (23 samples, 0.12%)</title><rect x="4.5970%" y="933" width="0.1241%" height="15" fill="rgb(213,28,5)"/><text x="4.8470%" y="943.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (23 samples, 0.12%)</title><rect x="4.5970%" y="917" width="0.1241%" height="15" fill="rgb(215,77,49)"/><text x="4.8470%" y="927.50"></text></g><g><title>rayon_core::join::join_context (23 samples, 0.12%)</title><rect x="4.5970%" y="901" width="0.1241%" height="15" fill="rgb(248,100,22)"/><text x="4.8470%" y="911.50"></text></g><g><title>rayon_core::registry::in_worker (23 samples, 0.12%)</title><rect x="4.5970%" y="885" width="0.1241%" height="15" fill="rgb(208,67,9)"/><text x="4.8470%" y="895.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (23 samples, 0.12%)</title><rect x="4.5970%" y="869" width="0.1241%" height="15" fill="rgb(219,133,21)"/><text x="4.8470%" y="879.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (19 samples, 0.10%)</title><rect x="4.8398%" y="917" width="0.1025%" height="15" fill="rgb(246,46,29)"/><text x="5.0898%" y="927.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (19 samples, 0.10%)</title><rect x="4.8398%" y="901" width="0.1025%" height="15" fill="rgb(246,185,52)"/><text x="5.0898%" y="911.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (19 samples, 0.10%)</title><rect x="4.8398%" y="885" width="0.1025%" height="15" fill="rgb(252,136,11)"/><text x="5.0898%" y="895.50"></text></g><g><title>rayon_core::job::JobRef::execute (19 samples, 0.10%)</title><rect x="4.8398%" y="869" width="0.1025%" height="15" fill="rgb(219,138,53)"/><text x="5.0898%" y="879.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (19 samples, 0.10%)</title><rect x="4.8398%" y="853" width="0.1025%" height="15" fill="rgb(211,51,23)"/><text x="5.0898%" y="863.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (19 samples, 0.10%)</title><rect x="4.8398%" y="837" width="0.1025%" height="15" fill="rgb(247,221,28)"/><text x="5.0898%" y="847.50"></text></g><g><title>std::panic::catch_unwind (19 samples, 0.10%)</title><rect x="4.8398%" y="821" width="0.1025%" height="15" fill="rgb(251,222,45)"/><text x="5.0898%" y="831.50"></text></g><g><title>std::panicking::try (19 samples, 0.10%)</title><rect x="4.8398%" y="805" width="0.1025%" height="15" fill="rgb(217,162,53)"/><text x="5.0898%" y="815.50"></text></g><g><title>std::panicking::try::do_call (19 samples, 0.10%)</title><rect x="4.8398%" y="789" width="0.1025%" height="15" fill="rgb(229,93,14)"/><text x="5.0898%" y="799.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (19 samples, 0.10%)</title><rect x="4.8398%" y="773" width="0.1025%" height="15" fill="rgb(209,67,49)"/><text x="5.0898%" y="783.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (19 samples, 0.10%)</title><rect x="4.8398%" y="757" width="0.1025%" height="15" fill="rgb(213,87,29)"/><text x="5.0898%" y="767.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (19 samples, 0.10%)</title><rect x="4.8398%" y="741" width="0.1025%" height="15" fill="rgb(205,151,52)"/><text x="5.0898%" y="751.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (19 samples, 0.10%)</title><rect x="4.8398%" y="725" width="0.1025%" height="15" fill="rgb(253,215,39)"/><text x="5.0898%" y="735.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (19 samples, 0.10%)</title><rect x="4.8398%" y="709" width="0.1025%" height="15" fill="rgb(221,220,41)"/><text x="5.0898%" y="719.50"></text></g><g><title>rayon_core::join::join_context (19 samples, 0.10%)</title><rect x="4.8398%" y="693" width="0.1025%" height="15" fill="rgb(218,133,21)"/><text x="5.0898%" y="703.50"></text></g><g><title>rayon_core::registry::in_worker (19 samples, 0.10%)</title><rect x="4.8398%" y="677" width="0.1025%" height="15" fill="rgb(221,193,43)"/><text x="5.0898%" y="687.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (19 samples, 0.10%)</title><rect x="4.8398%" y="661" width="0.1025%" height="15" fill="rgb(240,128,52)"/><text x="5.0898%" y="671.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (257 samples, 1.39%)</title><rect x="3.6474%" y="1509" width="1.3866%" height="15" fill="rgb(253,114,12)"/><text x="3.8974%" y="1519.50"></text></g><g><title>rayon_core::registry::main_loop (257 samples, 1.39%)</title><rect x="3.6474%" y="1493" width="1.3866%" height="15" fill="rgb(215,223,47)"/><text x="3.8974%" y="1503.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (257 samples, 1.39%)</title><rect x="3.6474%" y="1477" width="1.3866%" height="15" fill="rgb(248,225,23)"/><text x="3.8974%" y="1487.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (257 samples, 1.39%)</title><rect x="3.6474%" y="1461" width="1.3866%" height="15" fill="rgb(250,108,0)"/><text x="3.8974%" y="1471.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (243 samples, 1.31%)</title><rect x="3.7229%" y="1445" width="1.3111%" height="15" fill="rgb(228,208,7)"/><text x="3.9729%" y="1455.50"></text></g><g><title>rayon_core::job::JobRef::execute (243 samples, 1.31%)</title><rect x="3.7229%" y="1429" width="1.3111%" height="15" fill="rgb(244,45,10)"/><text x="3.9729%" y="1439.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (243 samples, 1.31%)</title><rect x="3.7229%" y="1413" width="1.3111%" height="15" fill="rgb(207,125,25)"/><text x="3.9729%" y="1423.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (243 samples, 1.31%)</title><rect x="3.7229%" y="1397" width="1.3111%" height="15" fill="rgb(210,195,18)"/><text x="3.9729%" y="1407.50"></text></g><g><title>std::panic::catch_unwind (243 samples, 1.31%)</title><rect x="3.7229%" y="1381" width="1.3111%" height="15" fill="rgb(249,80,12)"/><text x="3.9729%" y="1391.50"></text></g><g><title>std::panicking::try (243 samples, 1.31%)</title><rect x="3.7229%" y="1365" width="1.3111%" height="15" fill="rgb(221,65,9)"/><text x="3.9729%" y="1375.50"></text></g><g><title>std::panicking::try::do_call (243 samples, 1.31%)</title><rect x="3.7229%" y="1349" width="1.3111%" height="15" fill="rgb(235,49,36)"/><text x="3.9729%" y="1359.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (243 samples, 1.31%)</title><rect x="3.7229%" y="1333" width="1.3111%" height="15" fill="rgb(225,32,20)"/><text x="3.9729%" y="1343.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (243 samples, 1.31%)</title><rect x="3.7229%" y="1317" width="1.3111%" height="15" fill="rgb(215,141,46)"/><text x="3.9729%" y="1327.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (58 samples, 0.31%)</title><rect x="4.7211%" y="1301" width="0.3129%" height="15" fill="rgb(250,160,47)"/><text x="4.9711%" y="1311.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (58 samples, 0.31%)</title><rect x="4.7211%" y="1285" width="0.3129%" height="15" fill="rgb(216,222,40)"/><text x="4.9711%" y="1295.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (58 samples, 0.31%)</title><rect x="4.7211%" y="1269" width="0.3129%" height="15" fill="rgb(234,217,39)"/><text x="4.9711%" y="1279.50"></text></g><g><title>std::panic::catch_unwind (58 samples, 0.31%)</title><rect x="4.7211%" y="1253" width="0.3129%" height="15" fill="rgb(207,178,40)"/><text x="4.9711%" y="1263.50"></text></g><g><title>std::panicking::try (58 samples, 0.31%)</title><rect x="4.7211%" y="1237" width="0.3129%" height="15" fill="rgb(221,136,13)"/><text x="4.9711%" y="1247.50"></text></g><g><title>std::panicking::try::do_call (58 samples, 0.31%)</title><rect x="4.7211%" y="1221" width="0.3129%" height="15" fill="rgb(249,199,10)"/><text x="4.9711%" y="1231.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (58 samples, 0.31%)</title><rect x="4.7211%" y="1205" width="0.3129%" height="15" fill="rgb(249,222,13)"/><text x="4.9711%" y="1215.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (58 samples, 0.31%)</title><rect x="4.7211%" y="1189" width="0.3129%" height="15" fill="rgb(244,185,38)"/><text x="4.9711%" y="1199.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (58 samples, 0.31%)</title><rect x="4.7211%" y="1173" width="0.3129%" height="15" fill="rgb(236,202,9)"/><text x="4.9711%" y="1183.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (58 samples, 0.31%)</title><rect x="4.7211%" y="1157" width="0.3129%" height="15" fill="rgb(250,229,37)"/><text x="4.9711%" y="1167.50"></text></g><g><title>rayon_core::join::join_context (58 samples, 0.31%)</title><rect x="4.7211%" y="1141" width="0.3129%" height="15" fill="rgb(206,174,23)"/><text x="4.9711%" y="1151.50"></text></g><g><title>rayon_core::registry::in_worker (58 samples, 0.31%)</title><rect x="4.7211%" y="1125" width="0.3129%" height="15" fill="rgb(211,33,43)"/><text x="4.9711%" y="1135.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (58 samples, 0.31%)</title><rect x="4.7211%" y="1109" width="0.3129%" height="15" fill="rgb(245,58,50)"/><text x="4.9711%" y="1119.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (46 samples, 0.25%)</title><rect x="4.7858%" y="1093" width="0.2482%" height="15" fill="rgb(244,68,36)"/><text x="5.0358%" y="1103.50"></text></g><g><title>std::panic::catch_unwind (46 samples, 0.25%)</title><rect x="4.7858%" y="1077" width="0.2482%" height="15" fill="rgb(232,229,15)"/><text x="5.0358%" y="1087.50"></text></g><g><title>std::panicking::try (46 samples, 0.25%)</title><rect x="4.7858%" y="1061" width="0.2482%" height="15" fill="rgb(254,30,23)"/><text x="5.0358%" y="1071.50"></text></g><g><title>std::panicking::try::do_call (46 samples, 0.25%)</title><rect x="4.7858%" y="1045" width="0.2482%" height="15" fill="rgb(235,160,14)"/><text x="5.0358%" y="1055.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (46 samples, 0.25%)</title><rect x="4.7858%" y="1029" width="0.2482%" height="15" fill="rgb(212,155,44)"/><text x="5.0358%" y="1039.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (46 samples, 0.25%)</title><rect x="4.7858%" y="1013" width="0.2482%" height="15" fill="rgb(226,2,50)"/><text x="5.0358%" y="1023.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (46 samples, 0.25%)</title><rect x="4.7858%" y="997" width="0.2482%" height="15" fill="rgb(234,177,6)"/><text x="5.0358%" y="1007.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (46 samples, 0.25%)</title><rect x="4.7858%" y="981" width="0.2482%" height="15" fill="rgb(217,24,9)"/><text x="5.0358%" y="991.50"></text></g><g><title>rayon_core::join::join_context (46 samples, 0.25%)</title><rect x="4.7858%" y="965" width="0.2482%" height="15" fill="rgb(220,13,46)"/><text x="5.0358%" y="975.50"></text></g><g><title>rayon_core::registry::in_worker (46 samples, 0.25%)</title><rect x="4.7858%" y="949" width="0.2482%" height="15" fill="rgb(239,221,27)"/><text x="5.0358%" y="959.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (46 samples, 0.25%)</title><rect x="4.7858%" y="933" width="0.2482%" height="15" fill="rgb(222,198,25)"/><text x="5.0358%" y="943.50"></text></g><g><title>rayon_core::registry::in_worker (43 samples, 0.23%)</title><rect x="5.1311%" y="1509" width="0.2320%" height="15" fill="rgb(211,99,13)"/><text x="5.3811%" y="1519.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (43 samples, 0.23%)</title><rect x="5.1311%" y="1493" width="0.2320%" height="15" fill="rgb(232,111,31)"/><text x="5.3811%" y="1503.50"></text></g><g><title>start_thread (35 samples, 0.19%)</title><rect x="5.3631%" y="1509" width="0.1888%" height="15" fill="rgb(245,82,37)"/><text x="5.6131%" y="1519.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (35 samples, 0.19%)</title><rect x="5.3631%" y="1493" width="0.1888%" height="15" fill="rgb(227,149,46)"/><text x="5.6131%" y="1503.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (35 samples, 0.19%)</title><rect x="5.3631%" y="1477" width="0.1888%" height="15" fill="rgb(218,36,50)"/><text x="5.6131%" y="1487.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (35 samples, 0.19%)</title><rect x="5.3631%" y="1461" width="0.1888%" height="15" fill="rgb(226,80,48)"/><text x="5.6131%" y="1471.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (35 samples, 0.19%)</title><rect x="5.3631%" y="1445" width="0.1888%" height="15" fill="rgb(238,224,15)"/><text x="5.6131%" y="1455.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (35 samples, 0.19%)</title><rect x="5.3631%" y="1429" width="0.1888%" height="15" fill="rgb(241,136,10)"/><text x="5.6131%" y="1439.50"></text></g><g><title>std::panic::catch_unwind (35 samples, 0.19%)</title><rect x="5.3631%" y="1413" width="0.1888%" height="15" fill="rgb(208,32,45)"/><text x="5.6131%" y="1423.50"></text></g><g><title>std::panicking::try (35 samples, 0.19%)</title><rect x="5.3631%" y="1397" width="0.1888%" height="15" fill="rgb(207,135,9)"/><text x="5.6131%" y="1407.50"></text></g><g><title>std::panicking::try::do_call (35 samples, 0.19%)</title><rect x="5.3631%" y="1381" width="0.1888%" height="15" fill="rgb(206,86,44)"/><text x="5.6131%" y="1391.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35 samples, 0.19%)</title><rect x="5.3631%" y="1365" width="0.1888%" height="15" fill="rgb(245,177,15)"/><text x="5.6131%" y="1375.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (35 samples, 0.19%)</title><rect x="5.3631%" y="1349" width="0.1888%" height="15" fill="rgb(206,64,50)"/><text x="5.6131%" y="1359.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35 samples, 0.19%)</title><rect x="5.3631%" y="1333" width="0.1888%" height="15" fill="rgb(234,36,40)"/><text x="5.6131%" y="1343.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (35 samples, 0.19%)</title><rect x="5.3631%" y="1317" width="0.1888%" height="15" fill="rgb(213,64,8)"/><text x="5.6131%" y="1327.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (35 samples, 0.19%)</title><rect x="5.3631%" y="1301" width="0.1888%" height="15" fill="rgb(210,75,36)"/><text x="5.6131%" y="1311.50"></text></g><g><title>rayon_core::registry::main_loop (35 samples, 0.19%)</title><rect x="5.3631%" y="1285" width="0.1888%" height="15" fill="rgb(229,88,21)"/><text x="5.6131%" y="1295.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (35 samples, 0.19%)</title><rect x="5.3631%" y="1269" width="0.1888%" height="15" fill="rgb(252,204,47)"/><text x="5.6131%" y="1279.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (35 samples, 0.19%)</title><rect x="5.3631%" y="1253" width="0.1888%" height="15" fill="rgb(208,77,27)"/><text x="5.6131%" y="1263.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (35 samples, 0.19%)</title><rect x="5.3631%" y="1237" width="0.1888%" height="15" fill="rgb(221,76,26)"/><text x="5.6131%" y="1247.50"></text></g><g><title>rayon_core::job::JobRef::execute (35 samples, 0.19%)</title><rect x="5.3631%" y="1221" width="0.1888%" height="15" fill="rgb(225,139,18)"/><text x="5.6131%" y="1231.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (35 samples, 0.19%)</title><rect x="5.3631%" y="1205" width="0.1888%" height="15" fill="rgb(230,137,11)"/><text x="5.6131%" y="1215.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (35 samples, 0.19%)</title><rect x="5.3631%" y="1189" width="0.1888%" height="15" fill="rgb(212,28,1)"/><text x="5.6131%" y="1199.50"></text></g><g><title>std::panic::catch_unwind (35 samples, 0.19%)</title><rect x="5.3631%" y="1173" width="0.1888%" height="15" fill="rgb(248,164,17)"/><text x="5.6131%" y="1183.50"></text></g><g><title>std::panicking::try (35 samples, 0.19%)</title><rect x="5.3631%" y="1157" width="0.1888%" height="15" fill="rgb(222,171,42)"/><text x="5.6131%" y="1167.50"></text></g><g><title>std::panicking::try::do_call (35 samples, 0.19%)</title><rect x="5.3631%" y="1141" width="0.1888%" height="15" fill="rgb(243,84,45)"/><text x="5.6131%" y="1151.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35 samples, 0.19%)</title><rect x="5.3631%" y="1125" width="0.1888%" height="15" fill="rgb(252,49,23)"/><text x="5.6131%" y="1135.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (35 samples, 0.19%)</title><rect x="5.3631%" y="1109" width="0.1888%" height="15" fill="rgb(215,19,7)"/><text x="5.6131%" y="1119.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (20 samples, 0.11%)</title><rect x="5.4440%" y="1093" width="0.1079%" height="15" fill="rgb(238,81,41)"/><text x="5.6940%" y="1103.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (20 samples, 0.11%)</title><rect x="5.4440%" y="1077" width="0.1079%" height="15" fill="rgb(210,199,37)"/><text x="5.6940%" y="1087.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (20 samples, 0.11%)</title><rect x="5.4440%" y="1061" width="0.1079%" height="15" fill="rgb(244,192,49)"/><text x="5.6940%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (20 samples, 0.11%)</title><rect x="5.4440%" y="1045" width="0.1079%" height="15" fill="rgb(226,211,11)"/><text x="5.6940%" y="1055.50"></text></g><g><title>std::panicking::try (20 samples, 0.11%)</title><rect x="5.4440%" y="1029" width="0.1079%" height="15" fill="rgb(236,162,54)"/><text x="5.6940%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (20 samples, 0.11%)</title><rect x="5.4440%" y="1013" width="0.1079%" height="15" fill="rgb(220,229,9)"/><text x="5.6940%" y="1023.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20 samples, 0.11%)</title><rect x="5.4440%" y="997" width="0.1079%" height="15" fill="rgb(250,87,22)"/><text x="5.6940%" y="1007.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (20 samples, 0.11%)</title><rect x="5.4440%" y="981" width="0.1079%" height="15" fill="rgb(239,43,17)"/><text x="5.6940%" y="991.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (20 samples, 0.11%)</title><rect x="5.4440%" y="965" width="0.1079%" height="15" fill="rgb(231,177,25)"/><text x="5.6940%" y="975.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.11%)</title><rect x="5.4440%" y="949" width="0.1079%" height="15" fill="rgb(219,179,1)"/><text x="5.6940%" y="959.50"></text></g><g><title>rayon_core::join::join_context (20 samples, 0.11%)</title><rect x="5.4440%" y="933" width="0.1079%" height="15" fill="rgb(238,219,53)"/><text x="5.6940%" y="943.50"></text></g><g><title>rayon_core::registry::in_worker (20 samples, 0.11%)</title><rect x="5.4440%" y="917" width="0.1079%" height="15" fill="rgb(232,167,36)"/><text x="5.6940%" y="927.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (20 samples, 0.11%)</title><rect x="5.4440%" y="901" width="0.1079%" height="15" fill="rgb(244,19,51)"/><text x="5.6940%" y="911.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (20 samples, 0.11%)</title><rect x="5.4440%" y="885" width="0.1079%" height="15" fill="rgb(224,6,22)"/><text x="5.6940%" y="895.50"></text></g><g><title>std::panic::catch_unwind (20 samples, 0.11%)</title><rect x="5.4440%" y="869" width="0.1079%" height="15" fill="rgb(224,145,5)"/><text x="5.6940%" y="879.50"></text></g><g><title>std::panicking::try (20 samples, 0.11%)</title><rect x="5.4440%" y="853" width="0.1079%" height="15" fill="rgb(234,130,49)"/><text x="5.6940%" y="863.50"></text></g><g><title>std::panicking::try::do_call (20 samples, 0.11%)</title><rect x="5.4440%" y="837" width="0.1079%" height="15" fill="rgb(254,6,2)"/><text x="5.6940%" y="847.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20 samples, 0.11%)</title><rect x="5.4440%" y="821" width="0.1079%" height="15" fill="rgb(208,96,46)"/><text x="5.6940%" y="831.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (20 samples, 0.11%)</title><rect x="5.4440%" y="805" width="0.1079%" height="15" fill="rgb(239,3,39)"/><text x="5.6940%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (20 samples, 0.11%)</title><rect x="5.4440%" y="789" width="0.1079%" height="15" fill="rgb(233,210,1)"/><text x="5.6940%" y="799.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.11%)</title><rect x="5.4440%" y="773" width="0.1079%" height="15" fill="rgb(244,137,37)"/><text x="5.6940%" y="783.50"></text></g><g><title>rayon_core::join::join_context (20 samples, 0.11%)</title><rect x="5.4440%" y="757" width="0.1079%" height="15" fill="rgb(240,136,2)"/><text x="5.6940%" y="767.50"></text></g><g><title>rayon_core::registry::in_worker (20 samples, 0.11%)</title><rect x="5.4440%" y="741" width="0.1079%" height="15" fill="rgb(239,18,37)"/><text x="5.6940%" y="751.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (20 samples, 0.11%)</title><rect x="5.4440%" y="725" width="0.1079%" height="15" fill="rgb(218,185,22)"/><text x="5.6940%" y="735.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (38 samples, 0.21%)</title><rect x="5.6059%" y="1509" width="0.2050%" height="15" fill="rgb(225,218,4)"/><text x="5.8559%" y="1519.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (38 samples, 0.21%)</title><rect x="5.6059%" y="1493" width="0.2050%" height="15" fill="rgb(230,182,32)"/><text x="5.8559%" y="1503.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (38 samples, 0.21%)</title><rect x="5.6059%" y="1477" width="0.2050%" height="15" fill="rgb(242,56,43)"/><text x="5.8559%" y="1487.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (38 samples, 0.21%)</title><rect x="5.6059%" y="1461" width="0.2050%" height="15" fill="rgb(233,99,24)"/><text x="5.8559%" y="1471.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (38 samples, 0.21%)</title><rect x="5.6059%" y="1445" width="0.2050%" height="15" fill="rgb(234,209,42)"/><text x="5.8559%" y="1455.50"></text></g><g><title>std::panic::catch_unwind (38 samples, 0.21%)</title><rect x="5.6059%" y="1429" width="0.2050%" height="15" fill="rgb(227,7,12)"/><text x="5.8559%" y="1439.50"></text></g><g><title>std::panicking::try (38 samples, 0.21%)</title><rect x="5.6059%" y="1413" width="0.2050%" height="15" fill="rgb(245,203,43)"/><text x="5.8559%" y="1423.50"></text></g><g><title>std::panicking::try::do_call (38 samples, 0.21%)</title><rect x="5.6059%" y="1397" width="0.2050%" height="15" fill="rgb(238,205,33)"/><text x="5.8559%" y="1407.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38 samples, 0.21%)</title><rect x="5.6059%" y="1381" width="0.2050%" height="15" fill="rgb(231,56,7)"/><text x="5.8559%" y="1391.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (38 samples, 0.21%)</title><rect x="5.6059%" y="1365" width="0.2050%" height="15" fill="rgb(244,186,29)"/><text x="5.8559%" y="1375.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38 samples, 0.21%)</title><rect x="5.6059%" y="1349" width="0.2050%" height="15" fill="rgb(234,111,31)"/><text x="5.8559%" y="1359.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (38 samples, 0.21%)</title><rect x="5.6059%" y="1333" width="0.2050%" height="15" fill="rgb(241,149,10)"/><text x="5.8559%" y="1343.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (38 samples, 0.21%)</title><rect x="5.6059%" y="1317" width="0.2050%" height="15" fill="rgb(249,206,44)"/><text x="5.8559%" y="1327.50"></text></g><g><title>rayon_core::registry::main_loop (38 samples, 0.21%)</title><rect x="5.6059%" y="1301" width="0.2050%" height="15" fill="rgb(251,153,30)"/><text x="5.8559%" y="1311.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (38 samples, 0.21%)</title><rect x="5.6059%" y="1285" width="0.2050%" height="15" fill="rgb(239,152,38)"/><text x="5.8559%" y="1295.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (38 samples, 0.21%)</title><rect x="5.6059%" y="1269" width="0.2050%" height="15" fill="rgb(249,139,47)"/><text x="5.8559%" y="1279.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (38 samples, 0.21%)</title><rect x="5.6059%" y="1253" width="0.2050%" height="15" fill="rgb(244,64,35)"/><text x="5.8559%" y="1263.50"></text></g><g><title>rayon_core::job::JobRef::execute (38 samples, 0.21%)</title><rect x="5.6059%" y="1237" width="0.2050%" height="15" fill="rgb(216,46,15)"/><text x="5.8559%" y="1247.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (38 samples, 0.21%)</title><rect x="5.6059%" y="1221" width="0.2050%" height="15" fill="rgb(250,74,19)"/><text x="5.8559%" y="1231.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (38 samples, 0.21%)</title><rect x="5.6059%" y="1205" width="0.2050%" height="15" fill="rgb(249,42,33)"/><text x="5.8559%" y="1215.50"></text></g><g><title>std::panic::catch_unwind (38 samples, 0.21%)</title><rect x="5.6059%" y="1189" width="0.2050%" height="15" fill="rgb(242,149,17)"/><text x="5.8559%" y="1199.50"></text></g><g><title>std::panicking::try (38 samples, 0.21%)</title><rect x="5.6059%" y="1173" width="0.2050%" height="15" fill="rgb(244,29,21)"/><text x="5.8559%" y="1183.50"></text></g><g><title>std::panicking::try::do_call (38 samples, 0.21%)</title><rect x="5.6059%" y="1157" width="0.2050%" height="15" fill="rgb(220,130,37)"/><text x="5.8559%" y="1167.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38 samples, 0.21%)</title><rect x="5.6059%" y="1141" width="0.2050%" height="15" fill="rgb(211,67,2)"/><text x="5.8559%" y="1151.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (38 samples, 0.21%)</title><rect x="5.6059%" y="1125" width="0.2050%" height="15" fill="rgb(235,68,52)"/><text x="5.8559%" y="1135.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (24 samples, 0.13%)</title><rect x="5.6815%" y="1109" width="0.1295%" height="15" fill="rgb(246,142,3)"/><text x="5.9315%" y="1119.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (24 samples, 0.13%)</title><rect x="5.6815%" y="1093" width="0.1295%" height="15" fill="rgb(241,25,7)"/><text x="5.9315%" y="1103.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (24 samples, 0.13%)</title><rect x="5.6815%" y="1077" width="0.1295%" height="15" fill="rgb(242,119,39)"/><text x="5.9315%" y="1087.50"></text></g><g><title>std::panic::catch_unwind (24 samples, 0.13%)</title><rect x="5.6815%" y="1061" width="0.1295%" height="15" fill="rgb(241,98,45)"/><text x="5.9315%" y="1071.50"></text></g><g><title>std::panicking::try (24 samples, 0.13%)</title><rect x="5.6815%" y="1045" width="0.1295%" height="15" fill="rgb(254,28,30)"/><text x="5.9315%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (24 samples, 0.13%)</title><rect x="5.6815%" y="1029" width="0.1295%" height="15" fill="rgb(241,142,54)"/><text x="5.9315%" y="1039.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 0.13%)</title><rect x="5.6815%" y="1013" width="0.1295%" height="15" fill="rgb(222,85,15)"/><text x="5.9315%" y="1023.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (24 samples, 0.13%)</title><rect x="5.6815%" y="997" width="0.1295%" height="15" fill="rgb(210,85,47)"/><text x="5.9315%" y="1007.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (24 samples, 0.13%)</title><rect x="5.6815%" y="981" width="0.1295%" height="15" fill="rgb(224,206,25)"/><text x="5.9315%" y="991.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (24 samples, 0.13%)</title><rect x="5.6815%" y="965" width="0.1295%" height="15" fill="rgb(243,201,19)"/><text x="5.9315%" y="975.50"></text></g><g><title>rayon_core::join::join_context (24 samples, 0.13%)</title><rect x="5.6815%" y="949" width="0.1295%" height="15" fill="rgb(236,59,4)"/><text x="5.9315%" y="959.50"></text></g><g><title>rayon_core::registry::in_worker (24 samples, 0.13%)</title><rect x="5.6815%" y="933" width="0.1295%" height="15" fill="rgb(254,179,45)"/><text x="5.9315%" y="943.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (24 samples, 0.13%)</title><rect x="5.6815%" y="917" width="0.1295%" height="15" fill="rgb(226,14,10)"/><text x="5.9315%" y="927.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (24 samples, 0.13%)</title><rect x="5.6815%" y="901" width="0.1295%" height="15" fill="rgb(244,27,41)"/><text x="5.9315%" y="911.50"></text></g><g><title>std::panic::catch_unwind (24 samples, 0.13%)</title><rect x="5.6815%" y="885" width="0.1295%" height="15" fill="rgb(235,35,32)"/><text x="5.9315%" y="895.50"></text></g><g><title>std::panicking::try (24 samples, 0.13%)</title><rect x="5.6815%" y="869" width="0.1295%" height="15" fill="rgb(218,68,31)"/><text x="5.9315%" y="879.50"></text></g><g><title>std::panicking::try::do_call (24 samples, 0.13%)</title><rect x="5.6815%" y="853" width="0.1295%" height="15" fill="rgb(207,120,37)"/><text x="5.9315%" y="863.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 0.13%)</title><rect x="5.6815%" y="837" width="0.1295%" height="15" fill="rgb(227,98,0)"/><text x="5.9315%" y="847.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (24 samples, 0.13%)</title><rect x="5.6815%" y="821" width="0.1295%" height="15" fill="rgb(207,7,3)"/><text x="5.9315%" y="831.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (24 samples, 0.13%)</title><rect x="5.6815%" y="805" width="0.1295%" height="15" fill="rgb(206,98,19)"/><text x="5.9315%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (24 samples, 0.13%)</title><rect x="5.6815%" y="789" width="0.1295%" height="15" fill="rgb(217,5,26)"/><text x="5.9315%" y="799.50"></text></g><g><title>rayon_core::join::join_context (24 samples, 0.13%)</title><rect x="5.6815%" y="773" width="0.1295%" height="15" fill="rgb(235,190,38)"/><text x="5.9315%" y="783.50"></text></g><g><title>rayon_core::registry::in_worker (24 samples, 0.13%)</title><rect x="5.6815%" y="757" width="0.1295%" height="15" fill="rgb(247,86,24)"/><text x="5.9315%" y="767.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (24 samples, 0.13%)</title><rect x="5.6815%" y="741" width="0.1295%" height="15" fill="rgb(205,101,16)"/><text x="5.9315%" y="751.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (25 samples, 0.13%)</title><rect x="5.8109%" y="1509" width="0.1349%" height="15" fill="rgb(246,168,33)"/><text x="6.0609%" y="1519.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (25 samples, 0.13%)</title><rect x="5.8109%" y="1493" width="0.1349%" height="15" fill="rgb(231,114,1)"/><text x="6.0609%" y="1503.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (25 samples, 0.13%)</title><rect x="5.8109%" y="1477" width="0.1349%" height="15" fill="rgb(207,184,53)"/><text x="6.0609%" y="1487.50"></text></g><g><title>rayon_core::registry::main_loop (25 samples, 0.13%)</title><rect x="5.8109%" y="1461" width="0.1349%" height="15" fill="rgb(224,95,51)"/><text x="6.0609%" y="1471.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (25 samples, 0.13%)</title><rect x="5.8109%" y="1445" width="0.1349%" height="15" fill="rgb(212,188,45)"/><text x="6.0609%" y="1455.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (25 samples, 0.13%)</title><rect x="5.8109%" y="1429" width="0.1349%" height="15" fill="rgb(223,154,38)"/><text x="6.0609%" y="1439.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (25 samples, 0.13%)</title><rect x="5.8109%" y="1413" width="0.1349%" height="15" fill="rgb(251,22,52)"/><text x="6.0609%" y="1423.50"></text></g><g><title>rayon_core::job::JobRef::execute (25 samples, 0.13%)</title><rect x="5.8109%" y="1397" width="0.1349%" height="15" fill="rgb(229,209,22)"/><text x="6.0609%" y="1407.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (25 samples, 0.13%)</title><rect x="5.8109%" y="1381" width="0.1349%" height="15" fill="rgb(234,138,34)"/><text x="6.0609%" y="1391.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (25 samples, 0.13%)</title><rect x="5.8109%" y="1365" width="0.1349%" height="15" fill="rgb(212,95,11)"/><text x="6.0609%" y="1375.50"></text></g><g><title>std::panic::catch_unwind (25 samples, 0.13%)</title><rect x="5.8109%" y="1349" width="0.1349%" height="15" fill="rgb(240,179,47)"/><text x="6.0609%" y="1359.50"></text></g><g><title>std::panicking::try (25 samples, 0.13%)</title><rect x="5.8109%" y="1333" width="0.1349%" height="15" fill="rgb(240,163,11)"/><text x="6.0609%" y="1343.50"></text></g><g><title>std::panicking::try::do_call (25 samples, 0.13%)</title><rect x="5.8109%" y="1317" width="0.1349%" height="15" fill="rgb(236,37,12)"/><text x="6.0609%" y="1327.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (25 samples, 0.13%)</title><rect x="5.8109%" y="1301" width="0.1349%" height="15" fill="rgb(232,164,16)"/><text x="6.0609%" y="1311.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (25 samples, 0.13%)</title><rect x="5.8109%" y="1285" width="0.1349%" height="15" fill="rgb(244,205,15)"/><text x="6.0609%" y="1295.50"></text></g><g><title>nenbody::imgui_build_ui (32 samples, 0.17%)</title><rect x="6.0915%" y="1413" width="0.1727%" height="15" fill="rgb(223,117,47)"/><text x="6.3415%" y="1423.50"></text></g><g><title>imgui::window::Window::build (31 samples, 0.17%)</title><rect x="6.0969%" y="1397" width="0.1673%" height="15" fill="rgb(244,107,35)"/><text x="6.3469%" y="1407.50"></text></g><g><title>imgui_wgpu::Renderer::render (27 samples, 0.15%)</title><rect x="6.2750%" y="1397" width="0.1457%" height="15" fill="rgb(205,140,8)"/><text x="6.5250%" y="1407.50"></text></g><g><title>wgpu::CommandEncoder::finish (26 samples, 0.14%)</title><rect x="6.4260%" y="1397" width="0.1403%" height="15" fill="rgb(228,84,46)"/><text x="6.6760%" y="1407.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_finish (26 samples, 0.14%)</title><rect x="6.4260%" y="1381" width="0.1403%" height="15" fill="rgb(254,188,9)"/><text x="6.6760%" y="1391.50"></text></g><g><title>wgpu_core::command::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_finish (26 samples, 0.14%)</title><rect x="6.4260%" y="1365" width="0.1403%" height="15" fill="rgb(206,112,54)"/><text x="6.6760%" y="1375.50"></text></g><g><title>wgpu_core::hub::Registry&lt;T,I,F&gt;::write (24 samples, 0.13%)</title><rect x="6.4368%" y="1349" width="0.1295%" height="15" fill="rgb(216,84,49)"/><text x="6.6868%" y="1359.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (24 samples, 0.13%)</title><rect x="6.4368%" y="1333" width="0.1295%" height="15" fill="rgb(214,194,35)"/><text x="6.6868%" y="1343.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (24 samples, 0.13%)</title><rect x="6.4368%" y="1317" width="0.1295%" height="15" fill="rgb(249,28,3)"/><text x="6.6868%" y="1327.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (24 samples, 0.13%)</title><rect x="6.4368%" y="1301" width="0.1295%" height="15" fill="rgb(222,56,52)"/><text x="6.6868%" y="1311.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (24 samples, 0.13%)</title><rect x="6.4368%" y="1285" width="0.1295%" height="15" fill="rgb(245,217,50)"/><text x="6.6868%" y="1295.50"></text></g><g><title>nenbody::imgui_draw_ui (57 samples, 0.31%)</title><rect x="6.2642%" y="1413" width="0.3075%" height="15" fill="rgb(213,201,24)"/><text x="6.5142%" y="1423.50"></text></g><g><title>wgpu::CommandEncoder::finish (19 samples, 0.10%)</title><rect x="6.5879%" y="1397" width="0.1025%" height="15" fill="rgb(248,116,28)"/><text x="6.8379%" y="1407.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_finish (19 samples, 0.10%)</title><rect x="6.5879%" y="1381" width="0.1025%" height="15" fill="rgb(219,72,43)"/><text x="6.8379%" y="1391.50"></text></g><g><title>wgpu_core::command::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_finish (19 samples, 0.10%)</title><rect x="6.5879%" y="1365" width="0.1025%" height="15" fill="rgb(209,138,14)"/><text x="6.8379%" y="1375.50"></text></g><g><title>nenbody::render (28 samples, 0.15%)</title><rect x="6.5717%" y="1413" width="0.1511%" height="15" fill="rgb(222,18,33)"/><text x="6.8217%" y="1423.50"></text></g><g><title>rayon::iter::ParallelIterator::collect (20 samples, 0.11%)</title><rect x="6.7228%" y="1397" width="0.1079%" height="15" fill="rgb(213,199,7)"/><text x="6.9728%" y="1407.50"></text></g><g><title>rayon::iter::from_par_iter::&lt;impl rayon::iter::FromParallelIterator&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_par_iter (20 samples, 0.11%)</title><rect x="6.7228%" y="1381" width="0.1079%" height="15" fill="rgb(250,110,10)"/><text x="6.9728%" y="1391.50"></text></g><g><title>rayon::iter::from_par_iter::collect_extended (20 samples, 0.11%)</title><rect x="6.7228%" y="1365" width="0.1079%" height="15" fill="rgb(248,123,6)"/><text x="6.9728%" y="1375.50"></text></g><g><title>rayon::iter::collect::&lt;impl rayon::iter::ParallelExtend&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::par_extend (20 samples, 0.11%)</title><rect x="6.7228%" y="1349" width="0.1079%" height="15" fill="rgb(206,91,31)"/><text x="6.9728%" y="1359.50"></text></g><g><title>rayon::iter::collect::special_extend (20 samples, 0.11%)</title><rect x="6.7228%" y="1333" width="0.1079%" height="15" fill="rgb(211,154,13)"/><text x="6.9728%" y="1343.50"></text></g><g><title>rayon::iter::collect::Collect&lt;T&gt;::with_consumer (20 samples, 0.11%)</title><rect x="6.7228%" y="1317" width="0.1079%" height="15" fill="rgb(225,148,7)"/><text x="6.9728%" y="1327.50"></text></g><g><title>rayon::iter::collect::special_extend::{{closure}} (20 samples, 0.11%)</title><rect x="6.7228%" y="1301" width="0.1079%" height="15" fill="rgb(220,160,43)"/><text x="6.9728%" y="1311.50"></text></g><g><title>&lt;rayon::iter::map::Map&lt;I,F&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (20 samples, 0.11%)</title><rect x="6.7228%" y="1285" width="0.1079%" height="15" fill="rgb(213,52,39)"/><text x="6.9728%" y="1295.50"></text></g><g><title>&lt;rayon::range::Iter&lt;usize&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (20 samples, 0.11%)</title><rect x="6.7228%" y="1269" width="0.1079%" height="15" fill="rgb(243,137,7)"/><text x="6.9728%" y="1279.50"></text></g><g><title>rayon::iter::plumbing::bridge (20 samples, 0.11%)</title><rect x="6.7228%" y="1253" width="0.1079%" height="15" fill="rgb(230,79,13)"/><text x="6.9728%" y="1263.50"></text></g><g><title>&lt;rayon::range::Iter&lt;usize&gt; as rayon::iter::IndexedParallelIterator&gt;::with_producer (20 samples, 0.11%)</title><rect x="6.7228%" y="1237" width="0.1079%" height="15" fill="rgb(247,105,23)"/><text x="6.9728%" y="1247.50"></text></g><g><title>&lt;rayon::iter::plumbing::bridge::Callback&lt;C&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (20 samples, 0.11%)</title><rect x="6.7228%" y="1221" width="0.1079%" height="15" fill="rgb(223,179,41)"/><text x="6.9728%" y="1231.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer (20 samples, 0.11%)</title><rect x="6.7228%" y="1205" width="0.1079%" height="15" fill="rgb(218,9,34)"/><text x="6.9728%" y="1215.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (25 samples, 0.13%)</title><rect x="6.9224%" y="1349" width="0.1349%" height="15" fill="rgb(222,106,8)"/><text x="7.1724%" y="1359.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.13%)</title><rect x="6.9224%" y="1333" width="0.1349%" height="15" fill="rgb(211,220,0)"/><text x="7.1724%" y="1343.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.13%)</title><rect x="6.9224%" y="1317" width="0.1349%" height="15" fill="rgb(229,52,16)"/><text x="7.1724%" y="1327.50"></text></g><g><title>wgpu_core::hub::Registry&lt;T,I,F&gt;::write (27 samples, 0.15%)</title><rect x="7.1490%" y="1349" width="0.1457%" height="15" fill="rgb(212,155,18)"/><text x="7.3990%" y="1359.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (27 samples, 0.15%)</title><rect x="7.1490%" y="1333" width="0.1457%" height="15" fill="rgb(242,21,14)"/><text x="7.3990%" y="1343.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (27 samples, 0.15%)</title><rect x="7.1490%" y="1317" width="0.1457%" height="15" fill="rgb(222,19,48)"/><text x="7.3990%" y="1327.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (27 samples, 0.15%)</title><rect x="7.1490%" y="1301" width="0.1457%" height="15" fill="rgb(232,45,27)"/><text x="7.3990%" y="1311.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (27 samples, 0.15%)</title><rect x="7.1490%" y="1285" width="0.1457%" height="15" fill="rgb(249,103,42)"/><text x="7.3990%" y="1295.50"></text></g><g><title>nenbody::update_camera_list (108 samples, 0.58%)</title><rect x="6.7228%" y="1413" width="0.5827%" height="15" fill="rgb(246,81,33)"/><text x="6.9728%" y="1423.50"></text></g><g><title>wgpu::Queue::write_buffer (88 samples, 0.47%)</title><rect x="6.8307%" y="1397" width="0.4748%" height="15" fill="rgb(252,33,42)"/><text x="7.0807%" y="1407.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::queue_write_buffer (88 samples, 0.47%)</title><rect x="6.8307%" y="1381" width="0.4748%" height="15" fill="rgb(209,212,41)"/><text x="7.0807%" y="1391.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_write_buffer (88 samples, 0.47%)</title><rect x="6.8307%" y="1365" width="0.4748%" height="15" fill="rgb(207,154,6)"/><text x="7.0807%" y="1375.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (21 samples, 0.11%)</title><rect x="7.3325%" y="1365" width="0.1133%" height="15" fill="rgb(223,64,47)"/><text x="7.5825%" y="1375.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.11%)</title><rect x="7.3325%" y="1349" width="0.1133%" height="15" fill="rgb(211,161,38)"/><text x="7.5825%" y="1359.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.11%)</title><rect x="7.3325%" y="1333" width="0.1133%" height="15" fill="rgb(219,138,40)"/><text x="7.5825%" y="1343.50"></text></g><g><title>wgpu::Queue::write_buffer (32 samples, 0.17%)</title><rect x="7.3055%" y="1413" width="0.1727%" height="15" fill="rgb(241,228,46)"/><text x="7.5555%" y="1423.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::queue_write_buffer (32 samples, 0.17%)</title><rect x="7.3055%" y="1397" width="0.1727%" height="15" fill="rgb(223,209,38)"/><text x="7.5555%" y="1407.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_write_buffer (32 samples, 0.17%)</title><rect x="7.3055%" y="1381" width="0.1727%" height="15" fill="rgb(236,164,45)"/><text x="7.5555%" y="1391.50"></text></g><g><title>winit::platform_impl::platform::sticky_exit_callback (306 samples, 1.65%)</title><rect x="5.9674%" y="1445" width="1.6510%" height="15" fill="rgb(231,15,5)"/><text x="6.2174%" y="1455.50"></text></g><g><title>nenbody::main::{{closure}}::{{closure}} (306 samples, 1.65%)</title><rect x="5.9674%" y="1429" width="1.6510%" height="15" fill="rgb(252,35,15)"/><text x="6.2174%" y="1439.50"></text></g><g><title>wgpu::SwapChain::get_current_frame (26 samples, 0.14%)</title><rect x="7.4781%" y="1413" width="0.1403%" height="15" fill="rgb(248,181,18)"/><text x="7.7281%" y="1423.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::swap_chain_get_current_texture_view (26 samples, 0.14%)</title><rect x="7.4781%" y="1397" width="0.1403%" height="15" fill="rgb(233,39,42)"/><text x="7.7281%" y="1407.50"></text></g><g><title>wgpu_core::swap_chain::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::swap_chain_get_current_texture_view (26 samples, 0.14%)</title><rect x="7.4781%" y="1381" width="0.1403%" height="15" fill="rgb(238,110,33)"/><text x="7.7281%" y="1391.50"></text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (319 samples, 1.72%)</title><rect x="5.9674%" y="1509" width="1.7212%" height="15" fill="rgb(233,195,10)"/><text x="6.2174%" y="1519.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (319 samples, 1.72%)</title><rect x="5.9674%" y="1493" width="1.7212%" height="15" fill="rgb(254,105,3)"/><text x="6.2174%" y="1503.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (319 samples, 1.72%)</title><rect x="5.9674%" y="1477" width="1.7212%" height="15" fill="rgb(221,225,9)"/><text x="6.2174%" y="1487.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return (319 samples, 1.72%)</title><rect x="5.9674%" y="1461" width="1.7212%" height="15" fill="rgb(224,227,45)"/><text x="6.2174%" y="1471.50"></text></g><g><title>core::mem::drop (33 samples, 0.18%)</title><rect x="7.6940%" y="1413" width="0.1781%" height="15" fill="rgb(229,198,43)"/><text x="7.9440%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place (33 samples, 0.18%)</title><rect x="7.6940%" y="1397" width="0.1781%" height="15" fill="rgb(206,209,35)"/><text x="7.9440%" y="1407.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_end_render_pass (33 samples, 0.18%)</title><rect x="7.6940%" y="1381" width="0.1781%" height="15" fill="rgb(245,195,53)"/><text x="7.9440%" y="1391.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (33 samples, 0.18%)</title><rect x="7.6940%" y="1365" width="0.1781%" height="15" fill="rgb(240,92,26)"/><text x="7.9440%" y="1375.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (33 samples, 0.18%)</title><rect x="7.6940%" y="1349" width="0.1781%" height="15" fill="rgb(207,40,23)"/><text x="7.9440%" y="1359.50"></text></g><g><title>imgui_wgpu::Renderer::upload_index_buffer (35 samples, 0.19%)</title><rect x="7.9691%" y="1397" width="0.1888%" height="15" fill="rgb(223,111,35)"/><text x="8.2191%" y="1407.50"></text></g><g><title>&lt;wgpu::Device as wgpu::util::DeviceExt&gt;::create_buffer_init (35 samples, 0.19%)</title><rect x="7.9691%" y="1381" width="0.1888%" height="15" fill="rgb(229,147,28)"/><text x="8.2191%" y="1391.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::device_create_buffer (19 samples, 0.10%)</title><rect x="8.1580%" y="1365" width="0.1025%" height="15" fill="rgb(211,29,28)"/><text x="8.4080%" y="1375.50"></text></g><g><title>wgpu_core::device::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::device_create_buffer (19 samples, 0.10%)</title><rect x="8.1580%" y="1349" width="0.1025%" height="15" fill="rgb(228,72,33)"/><text x="8.4080%" y="1359.50"></text></g><g><title>imgui_wgpu::Renderer::render (97 samples, 0.52%)</title><rect x="7.8720%" y="1413" width="0.5234%" height="15" fill="rgb(205,214,31)"/><text x="8.1220%" y="1423.50"></text></g><g><title>imgui_wgpu::Renderer::upload_vertex_buffer (44 samples, 0.24%)</title><rect x="8.1580%" y="1397" width="0.2374%" height="15" fill="rgb(224,111,15)"/><text x="8.4080%" y="1407.50"></text></g><g><title>&lt;wgpu::Device as wgpu::util::DeviceExt&gt;::create_buffer_init (44 samples, 0.24%)</title><rect x="8.1580%" y="1381" width="0.2374%" height="15" fill="rgb(253,21,26)"/><text x="8.4080%" y="1391.50"></text></g><g><title>wgpu::Buffer::unmap (25 samples, 0.13%)</title><rect x="8.2605%" y="1365" width="0.1349%" height="15" fill="rgb(245,139,43)"/><text x="8.5105%" y="1375.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::buffer_unmap (25 samples, 0.13%)</title><rect x="8.2605%" y="1349" width="0.1349%" height="15" fill="rgb(252,170,7)"/><text x="8.5105%" y="1359.50"></text></g><g><title>wgpu_core::device::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::buffer_unmap (25 samples, 0.13%)</title><rect x="8.2605%" y="1333" width="0.1349%" height="15" fill="rgb(231,118,14)"/><text x="8.5105%" y="1343.50"></text></g><g><title>wgpu_core::hub::Registry&lt;T,I,F&gt;::write (20 samples, 0.11%)</title><rect x="8.2875%" y="1317" width="0.1079%" height="15" fill="rgb(238,83,0)"/><text x="8.5375%" y="1327.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (20 samples, 0.11%)</title><rect x="8.2875%" y="1301" width="0.1079%" height="15" fill="rgb(221,39,39)"/><text x="8.5375%" y="1311.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (20 samples, 0.11%)</title><rect x="8.2875%" y="1285" width="0.1079%" height="15" fill="rgb(222,119,46)"/><text x="8.5375%" y="1295.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (20 samples, 0.11%)</title><rect x="8.2875%" y="1269" width="0.1079%" height="15" fill="rgb(222,165,49)"/><text x="8.5375%" y="1279.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (20 samples, 0.11%)</title><rect x="8.2875%" y="1253" width="0.1079%" height="15" fill="rgb(219,113,52)"/><text x="8.5375%" y="1263.50"></text></g><g><title>__ioctl (64 samples, 0.35%)</title><rect x="8.4763%" y="1221" width="0.3453%" height="15" fill="rgb(214,7,15)"/><text x="8.7263%" y="1231.50"></text></g><g><title>__libc_open64 (24 samples, 0.13%)</title><rect x="8.8216%" y="1221" width="0.1295%" height="15" fill="rgb(235,32,4)"/><text x="9.0716%" y="1231.50"></text></g><g><title>gfx_backend_vulkan::device::&lt;impl gfx_hal::device::Device&lt;gfx_backend_vulkan::Backend&gt; for gfx_backend_vulkan::Device&gt;::create_fence (95 samples, 0.51%)</title><rect x="8.4547%" y="1365" width="0.5126%" height="15" fill="rgb(238,90,54)"/><text x="8.7047%" y="1375.50"></text></g><g><title>ash::device::DeviceV1_0::create_fence (95 samples, 0.51%)</title><rect x="8.4547%" y="1349" width="0.5126%" height="15" fill="rgb(213,208,19)"/><text x="8.7047%" y="1359.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (95 samples, 0.51%)</title><rect x="8.4547%" y="1333" width="0.5126%" height="15" fill="rgb(233,156,4)"/><text x="8.7047%" y="1343.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (95 samples, 0.51%)</title><rect x="8.4547%" y="1317" width="0.5126%" height="15" fill="rgb(207,194,5)"/><text x="8.7047%" y="1327.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (95 samples, 0.51%)</title><rect x="8.4547%" y="1301" width="0.5126%" height="15" fill="rgb(206,111,30)"/><text x="8.7047%" y="1311.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (95 samples, 0.51%)</title><rect x="8.4547%" y="1285" width="0.5126%" height="15" fill="rgb(243,70,54)"/><text x="8.7047%" y="1295.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (93 samples, 0.50%)</title><rect x="8.4655%" y="1269" width="0.5018%" height="15" fill="rgb(242,28,8)"/><text x="8.7155%" y="1279.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (92 samples, 0.50%)</title><rect x="8.4709%" y="1253" width="0.4964%" height="15" fill="rgb(219,106,18)"/><text x="8.7209%" y="1263.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (91 samples, 0.49%)</title><rect x="8.4763%" y="1237" width="0.4910%" height="15" fill="rgb(244,222,10)"/><text x="8.7263%" y="1247.50"></text></g><g><title>nenbody::imgui_draw_ui (256 samples, 1.38%)</title><rect x="7.6940%" y="1429" width="1.3812%" height="15" fill="rgb(236,179,52)"/><text x="7.9440%" y="1439.50"></text></g><g><title>wgpu::Queue::submit (126 samples, 0.68%)</title><rect x="8.3954%" y="1413" width="0.6798%" height="15" fill="rgb(213,23,39)"/><text x="8.6454%" y="1423.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::queue_submit (126 samples, 0.68%)</title><rect x="8.3954%" y="1397" width="0.6798%" height="15" fill="rgb(238,48,10)"/><text x="8.6454%" y="1407.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (126 samples, 0.68%)</title><rect x="8.3954%" y="1381" width="0.6798%" height="15" fill="rgb(251,196,23)"/><text x="8.6454%" y="1391.50"></text></g><g><title>core::mem::drop (48 samples, 0.26%)</title><rect x="9.0752%" y="1413" width="0.2590%" height="15" fill="rgb(250,152,24)"/><text x="9.3252%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place (48 samples, 0.26%)</title><rect x="9.0752%" y="1397" width="0.2590%" height="15" fill="rgb(209,150,17)"/><text x="9.3252%" y="1407.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_end_render_pass (48 samples, 0.26%)</title><rect x="9.0752%" y="1381" width="0.2590%" height="15" fill="rgb(234,202,34)"/><text x="9.3252%" y="1391.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (48 samples, 0.26%)</title><rect x="9.0752%" y="1365" width="0.2590%" height="15" fill="rgb(253,148,53)"/><text x="9.3252%" y="1375.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (48 samples, 0.26%)</title><rect x="9.0752%" y="1349" width="0.2590%" height="15" fill="rgb(218,129,16)"/><text x="9.3252%" y="1359.50"></text></g><g><title>__ioctl (61 samples, 0.33%)</title><rect x="9.4205%" y="1221" width="0.3291%" height="15" fill="rgb(216,85,19)"/><text x="9.6705%" y="1231.50"></text></g><g><title>__libc_open64 (24 samples, 0.13%)</title><rect x="9.7496%" y="1221" width="0.1295%" height="15" fill="rgb(235,228,7)"/><text x="9.9996%" y="1231.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (22 samples, 0.12%)</title><rect x="9.7604%" y="1205" width="0.1187%" height="15" fill="rgb(245,175,0)"/><text x="10.0104%" y="1215.50"></text></g><g><title>do_syscall_64 (22 samples, 0.12%)</title><rect x="9.7604%" y="1189" width="0.1187%" height="15" fill="rgb(208,168,36)"/><text x="10.0104%" y="1199.50"></text></g><g><title>__x64_sys_openat (22 samples, 0.12%)</title><rect x="9.7604%" y="1173" width="0.1187%" height="15" fill="rgb(246,171,24)"/><text x="10.0104%" y="1183.50"></text></g><g><title>do_sys_openat2 (22 samples, 0.12%)</title><rect x="9.7604%" y="1157" width="0.1187%" height="15" fill="rgb(215,142,24)"/><text x="10.0104%" y="1167.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (88 samples, 0.47%)</title><rect x="9.4097%" y="1253" width="0.4748%" height="15" fill="rgb(250,187,7)"/><text x="9.6597%" y="1263.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (87 samples, 0.47%)</title><rect x="9.4151%" y="1237" width="0.4694%" height="15" fill="rgb(228,66,33)"/><text x="9.6651%" y="1247.50"></text></g><g><title>gfx_backend_vulkan::device::&lt;impl gfx_hal::device::Device&lt;gfx_backend_vulkan::Backend&gt; for gfx_backend_vulkan::Device&gt;::create_fence (92 samples, 0.50%)</title><rect x="9.3989%" y="1365" width="0.4964%" height="15" fill="rgb(234,215,21)"/><text x="9.6489%" y="1375.50"></text></g><g><title>ash::device::DeviceV1_0::create_fence (92 samples, 0.50%)</title><rect x="9.3989%" y="1349" width="0.4964%" height="15" fill="rgb(222,191,20)"/><text x="9.6489%" y="1359.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (92 samples, 0.50%)</title><rect x="9.3989%" y="1333" width="0.4964%" height="15" fill="rgb(245,79,54)"/><text x="9.6489%" y="1343.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (91 samples, 0.49%)</title><rect x="9.4043%" y="1317" width="0.4910%" height="15" fill="rgb(240,10,37)"/><text x="9.6543%" y="1327.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (91 samples, 0.49%)</title><rect x="9.4043%" y="1301" width="0.4910%" height="15" fill="rgb(214,192,32)"/><text x="9.6543%" y="1311.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (91 samples, 0.49%)</title><rect x="9.4043%" y="1285" width="0.4910%" height="15" fill="rgb(209,36,54)"/><text x="9.6543%" y="1295.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (91 samples, 0.49%)</title><rect x="9.4043%" y="1269" width="0.4910%" height="15" fill="rgb(220,10,11)"/><text x="9.6543%" y="1279.50"></text></g><g><title>nenbody::render (180 samples, 0.97%)</title><rect x="9.0752%" y="1429" width="0.9712%" height="15" fill="rgb(221,106,17)"/><text x="9.3252%" y="1439.50"></text></g><g><title>wgpu::Queue::submit (132 samples, 0.71%)</title><rect x="9.3342%" y="1413" width="0.7122%" height="15" fill="rgb(251,142,44)"/><text x="9.5842%" y="1423.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::queue_submit (132 samples, 0.71%)</title><rect x="9.3342%" y="1397" width="0.7122%" height="15" fill="rgb(238,13,15)"/><text x="9.5842%" y="1407.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (132 samples, 0.71%)</title><rect x="9.3342%" y="1381" width="0.7122%" height="15" fill="rgb(208,107,27)"/><text x="9.5842%" y="1391.50"></text></g><g><title>__ioctl (39 samples, 0.21%)</title><rect x="10.2029%" y="1237" width="0.2104%" height="15" fill="rgb(205,136,37)"/><text x="10.4529%" y="1247.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (54 samples, 0.29%)</title><rect x="10.1975%" y="1269" width="0.2914%" height="15" fill="rgb(250,205,27)"/><text x="10.4475%" y="1279.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (54 samples, 0.29%)</title><rect x="10.1975%" y="1253" width="0.2914%" height="15" fill="rgb(210,80,43)"/><text x="10.4475%" y="1263.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (58 samples, 0.31%)</title><rect x="10.1813%" y="1333" width="0.3129%" height="15" fill="rgb(247,160,36)"/><text x="10.4313%" y="1343.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (57 samples, 0.31%)</title><rect x="10.1867%" y="1317" width="0.3075%" height="15" fill="rgb(234,13,49)"/><text x="10.4367%" y="1327.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (57 samples, 0.31%)</title><rect x="10.1867%" y="1301" width="0.3075%" height="15" fill="rgb(234,122,0)"/><text x="10.4367%" y="1311.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (57 samples, 0.31%)</title><rect x="10.1867%" y="1285" width="0.3075%" height="15" fill="rgb(207,146,38)"/><text x="10.4367%" y="1295.50"></text></g><g><title>gfx_backend_vulkan::device::&lt;impl gfx_hal::device::Device&lt;gfx_backend_vulkan::Backend&gt; for gfx_backend_vulkan::Device&gt;::create_fence (61 samples, 0.33%)</title><rect x="10.1759%" y="1381" width="0.3291%" height="15" fill="rgb(207,177,25)"/><text x="10.4259%" y="1391.50"></text></g><g><title>ash::device::DeviceV1_0::create_fence (60 samples, 0.32%)</title><rect x="10.1813%" y="1365" width="0.3237%" height="15" fill="rgb(211,178,42)"/><text x="10.4313%" y="1375.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (60 samples, 0.32%)</title><rect x="10.1813%" y="1349" width="0.3237%" height="15" fill="rgb(230,69,54)"/><text x="10.4313%" y="1359.50"></text></g><g><title>wgpu_core::device::Device&lt;B&gt;::maintain (108 samples, 0.58%)</title><rect x="10.6507%" y="1381" width="0.5827%" height="15" fill="rgb(214,135,41)"/><text x="10.9007%" y="1391.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_framebuffers (102 samples, 0.55%)</title><rect x="10.6831%" y="1365" width="0.5503%" height="15" fill="rgb(237,67,25)"/><text x="10.9331%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (102 samples, 0.55%)</title><rect x="10.6831%" y="1349" width="0.5503%" height="15" fill="rgb(222,189,50)"/><text x="10.9331%" y="1359.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (102 samples, 0.55%)</title><rect x="10.6831%" y="1333" width="0.5503%" height="15" fill="rgb(245,148,34)"/><text x="10.9331%" y="1343.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (102 samples, 0.55%)</title><rect x="10.6831%" y="1317" width="0.5503%" height="15" fill="rgb(222,29,6)"/><text x="10.9331%" y="1327.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (102 samples, 0.55%)</title><rect x="10.6831%" y="1301" width="0.5503%" height="15" fill="rgb(221,189,43)"/><text x="10.9331%" y="1311.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (101 samples, 0.54%)</title><rect x="10.6885%" y="1285" width="0.5449%" height="15" fill="rgb(207,36,27)"/><text x="10.9385%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (101 samples, 0.54%)</title><rect x="10.6885%" y="1269" width="0.5449%" height="15" fill="rgb(217,90,24)"/><text x="10.9385%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (101 samples, 0.54%)</title><rect x="10.6885%" y="1253" width="0.5449%" height="15" fill="rgb(224,66,35)"/><text x="10.9385%" y="1263.50"></text></g><g><title>core::iter::adapters::filter_map_fold::{{closure}} (92 samples, 0.50%)</title><rect x="10.7370%" y="1237" width="0.4964%" height="15" fill="rgb(221,13,50)"/><text x="10.9870%" y="1247.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_framebuffers::{{closure}} (91 samples, 0.49%)</title><rect x="10.7424%" y="1221" width="0.4910%" height="15" fill="rgb(236,68,49)"/><text x="10.9924%" y="1231.50"></text></g><g><title>wgpu::Queue::submit (231 samples, 1.25%)</title><rect x="10.0518%" y="1429" width="1.2464%" height="15" fill="rgb(229,146,28)"/><text x="10.3018%" y="1439.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::queue_submit (231 samples, 1.25%)</title><rect x="10.0518%" y="1413" width="1.2464%" height="15" fill="rgb(225,31,38)"/><text x="10.3018%" y="1423.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (231 samples, 1.25%)</title><rect x="10.0518%" y="1397" width="1.2464%" height="15" fill="rgb(250,208,3)"/><text x="10.3018%" y="1407.50"></text></g><g><title>winit::platform_impl::platform::sticky_exit_callback (670 samples, 3.61%)</title><rect x="7.6886%" y="1461" width="3.6150%" height="15" fill="rgb(246,54,23)"/><text x="7.9386%" y="1471.50">wini..</text></g><g><title>nenbody::main::{{closure}}::{{closure}} (670 samples, 3.61%)</title><rect x="7.6886%" y="1445" width="3.6150%" height="15" fill="rgb(243,76,11)"/><text x="7.9386%" y="1455.50">nenb..</text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (671 samples, 3.62%)</title><rect x="7.6886%" y="1509" width="3.6204%" height="15" fill="rgb(245,21,50)"/><text x="7.9386%" y="1519.50">wini..</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (671 samples, 3.62%)</title><rect x="7.6886%" y="1493" width="3.6204%" height="15" fill="rgb(228,9,43)"/><text x="7.9386%" y="1503.50">wini..</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return (671 samples, 3.62%)</title><rect x="7.6886%" y="1477" width="3.6204%" height="15" fill="rgb(208,100,47)"/><text x="7.9386%" y="1487.50">wini..</text></g><g><title>core::mem::drop (24 samples, 0.13%)</title><rect x="11.3089%" y="1429" width="0.1295%" height="15" fill="rgb(232,26,8)"/><text x="11.5589%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place (24 samples, 0.13%)</title><rect x="11.3089%" y="1413" width="0.1295%" height="15" fill="rgb(216,166,38)"/><text x="11.5589%" y="1423.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_end_render_pass (24 samples, 0.13%)</title><rect x="11.3089%" y="1397" width="0.1295%" height="15" fill="rgb(251,202,51)"/><text x="11.5589%" y="1407.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (24 samples, 0.13%)</title><rect x="11.3089%" y="1381" width="0.1295%" height="15" fill="rgb(254,216,34)"/><text x="11.5589%" y="1391.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (24 samples, 0.13%)</title><rect x="11.3089%" y="1365" width="0.1295%" height="15" fill="rgb(251,32,27)"/><text x="11.5589%" y="1375.50"></text></g><g><title>__GI___sched_yield (20 samples, 0.11%)</title><rect x="11.6111%" y="1253" width="0.1079%" height="15" fill="rgb(208,127,28)"/><text x="11.8611%" y="1263.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (41 samples, 0.22%)</title><rect x="11.5086%" y="1301" width="0.2212%" height="15" fill="rgb(224,137,22)"/><text x="11.7586%" y="1311.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (23 samples, 0.12%)</title><rect x="11.6057%" y="1285" width="0.1241%" height="15" fill="rgb(254,70,32)"/><text x="11.8557%" y="1295.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (22 samples, 0.12%)</title><rect x="11.6111%" y="1269" width="0.1187%" height="15" fill="rgb(229,75,37)"/><text x="11.8611%" y="1279.50"></text></g><g><title>wgpu::Device::create_command_encoder (52 samples, 0.28%)</title><rect x="11.4546%" y="1429" width="0.2806%" height="15" fill="rgb(252,64,23)"/><text x="11.7046%" y="1439.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::device_create_command_encoder (52 samples, 0.28%)</title><rect x="11.4546%" y="1413" width="0.2806%" height="15" fill="rgb(232,162,48)"/><text x="11.7046%" y="1423.50"></text></g><g><title>wgpu_core::device::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::device_create_command_encoder (52 samples, 0.28%)</title><rect x="11.4546%" y="1397" width="0.2806%" height="15" fill="rgb(246,160,12)"/><text x="11.7046%" y="1407.50"></text></g><g><title>wgpu_core::hub::Registry&lt;T,I,F&gt;::register_identity (48 samples, 0.26%)</title><rect x="11.4762%" y="1381" width="0.2590%" height="15" fill="rgb(247,166,0)"/><text x="11.7262%" y="1391.50"></text></g><g><title>wgpu_core::hub::Registry&lt;T,I,F&gt;::register (48 samples, 0.26%)</title><rect x="11.4762%" y="1365" width="0.2590%" height="15" fill="rgb(249,219,21)"/><text x="11.7262%" y="1375.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (42 samples, 0.23%)</title><rect x="11.5086%" y="1349" width="0.2266%" height="15" fill="rgb(205,209,3)"/><text x="11.7586%" y="1359.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (42 samples, 0.23%)</title><rect x="11.5086%" y="1333" width="0.2266%" height="15" fill="rgb(243,44,1)"/><text x="11.7586%" y="1343.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (42 samples, 0.23%)</title><rect x="11.5086%" y="1317" width="0.2266%" height="15" fill="rgb(206,159,16)"/><text x="11.7586%" y="1327.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_framebuffers (89 samples, 0.48%)</title><rect x="11.7837%" y="1365" width="0.4802%" height="15" fill="rgb(244,77,30)"/><text x="12.0337%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (89 samples, 0.48%)</title><rect x="11.7837%" y="1349" width="0.4802%" height="15" fill="rgb(218,69,12)"/><text x="12.0337%" y="1359.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (89 samples, 0.48%)</title><rect x="11.7837%" y="1333" width="0.4802%" height="15" fill="rgb(212,87,7)"/><text x="12.0337%" y="1343.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (89 samples, 0.48%)</title><rect x="11.7837%" y="1317" width="0.4802%" height="15" fill="rgb(245,114,25)"/><text x="12.0337%" y="1327.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (89 samples, 0.48%)</title><rect x="11.7837%" y="1301" width="0.4802%" height="15" fill="rgb(210,61,42)"/><text x="12.0337%" y="1311.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (89 samples, 0.48%)</title><rect x="11.7837%" y="1285" width="0.4802%" height="15" fill="rgb(211,52,33)"/><text x="12.0337%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (89 samples, 0.48%)</title><rect x="11.7837%" y="1269" width="0.4802%" height="15" fill="rgb(234,58,33)"/><text x="12.0337%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (89 samples, 0.48%)</title><rect x="11.7837%" y="1253" width="0.4802%" height="15" fill="rgb(220,115,36)"/><text x="12.0337%" y="1263.50"></text></g><g><title>core::iter::adapters::filter_map_fold::{{closure}} (84 samples, 0.45%)</title><rect x="11.8107%" y="1237" width="0.4532%" height="15" fill="rgb(243,153,54)"/><text x="12.0607%" y="1247.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_framebuffers::{{closure}} (83 samples, 0.45%)</title><rect x="11.8161%" y="1221" width="0.4478%" height="15" fill="rgb(251,47,18)"/><text x="12.0661%" y="1231.50"></text></g><g><title>__ioctl (70 samples, 0.38%)</title><rect x="12.3287%" y="1269" width="0.3777%" height="15" fill="rgb(242,102,42)"/><text x="12.5787%" y="1279.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (93 samples, 0.50%)</title><rect x="12.2639%" y="1349" width="0.5018%" height="15" fill="rgb(234,31,38)"/><text x="12.5139%" y="1359.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (92 samples, 0.50%)</title><rect x="12.2693%" y="1333" width="0.4964%" height="15" fill="rgb(221,117,51)"/><text x="12.5193%" y="1343.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (91 samples, 0.49%)</title><rect x="12.2747%" y="1317" width="0.4910%" height="15" fill="rgb(212,20,18)"/><text x="12.5247%" y="1327.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (90 samples, 0.49%)</title><rect x="12.2801%" y="1301" width="0.4856%" height="15" fill="rgb(245,133,36)"/><text x="12.5301%" y="1311.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (89 samples, 0.48%)</title><rect x="12.2855%" y="1285" width="0.4802%" height="15" fill="rgb(212,6,19)"/><text x="12.5355%" y="1295.50"></text></g><g><title>nenbody::imgui_draw_ui (273 samples, 1.47%)</title><rect x="11.3089%" y="1445" width="1.4730%" height="15" fill="rgb(218,1,36)"/><text x="11.5589%" y="1455.50"></text></g><g><title>wgpu::Queue::submit (194 samples, 1.05%)</title><rect x="11.7352%" y="1429" width="1.0467%" height="15" fill="rgb(246,84,54)"/><text x="11.9852%" y="1439.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::queue_submit (194 samples, 1.05%)</title><rect x="11.7352%" y="1413" width="1.0467%" height="15" fill="rgb(242,110,6)"/><text x="11.9852%" y="1423.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (194 samples, 1.05%)</title><rect x="11.7352%" y="1397" width="1.0467%" height="15" fill="rgb(214,47,5)"/><text x="11.9852%" y="1407.50"></text></g><g><title>wgpu_core::device::Device&lt;B&gt;::maintain (185 samples, 1.00%)</title><rect x="11.7837%" y="1381" width="0.9982%" height="15" fill="rgb(218,159,25)"/><text x="12.0337%" y="1391.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_submissions (96 samples, 0.52%)</title><rect x="12.2639%" y="1365" width="0.5180%" height="15" fill="rgb(215,211,28)"/><text x="12.5139%" y="1375.50"></text></g><g><title>core::mem::drop (24 samples, 0.13%)</title><rect x="12.7819%" y="1429" width="0.1295%" height="15" fill="rgb(238,59,32)"/><text x="13.0319%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place (24 samples, 0.13%)</title><rect x="12.7819%" y="1413" width="0.1295%" height="15" fill="rgb(226,82,3)"/><text x="13.0319%" y="1423.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_end_render_pass (24 samples, 0.13%)</title><rect x="12.7819%" y="1397" width="0.1295%" height="15" fill="rgb(240,164,32)"/><text x="13.0319%" y="1407.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (24 samples, 0.13%)</title><rect x="12.7819%" y="1381" width="0.1295%" height="15" fill="rgb(232,46,7)"/><text x="13.0319%" y="1391.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (24 samples, 0.13%)</title><rect x="12.7819%" y="1365" width="0.1295%" height="15" fill="rgb(229,129,53)"/><text x="13.0319%" y="1375.50"></text></g><g><title>wgpu_core::command::allocator::CommandAllocator&lt;B&gt;::maintain (85 samples, 0.46%)</title><rect x="12.9869%" y="1365" width="0.4586%" height="15" fill="rgb(234,188,29)"/><text x="13.2369%" y="1375.50"></text></g><g><title>wgpu_core::command::allocator::CommandPool&lt;B&gt;::maintain (85 samples, 0.46%)</title><rect x="12.9869%" y="1349" width="0.4586%" height="15" fill="rgb(246,141,4)"/><text x="13.2369%" y="1359.50"></text></g><g><title>wgpu_core::command::allocator::CommandPool&lt;B&gt;::recycle (84 samples, 0.45%)</title><rect x="12.9923%" y="1333" width="0.4532%" height="15" fill="rgb(229,23,39)"/><text x="13.2423%" y="1343.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::reset (84 samples, 0.45%)</title><rect x="12.9923%" y="1317" width="0.4532%" height="15" fill="rgb(206,12,3)"/><text x="13.2423%" y="1327.50"></text></g><g><title>ash::device::DeviceV1_0::reset_command_buffer (84 samples, 0.45%)</title><rect x="12.9923%" y="1301" width="0.4532%" height="15" fill="rgb(252,226,20)"/><text x="13.2423%" y="1311.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (83 samples, 0.45%)</title><rect x="12.9977%" y="1285" width="0.4478%" height="15" fill="rgb(216,123,35)"/><text x="13.2477%" y="1295.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (38 samples, 0.21%)</title><rect x="13.2405%" y="1269" width="0.2050%" height="15" fill="rgb(212,68,40)"/><text x="13.4905%" y="1279.50"></text></g><g><title>&lt;gfx_memory::allocator::general::GeneralAllocator&lt;B&gt; as gfx_memory::allocator::Allocator&lt;B&gt;&gt;::free (19 samples, 0.10%)</title><rect x="13.5211%" y="1301" width="0.1025%" height="15" fill="rgb(254,125,32)"/><text x="13.7711%" y="1311.50"></text></g><g><title>gfx_memory::allocator::general::GeneralAllocator&lt;B&gt;::free_block (19 samples, 0.10%)</title><rect x="13.5211%" y="1285" width="0.1025%" height="15" fill="rgb(253,97,22)"/><text x="13.7711%" y="1295.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::cleanup (34 samples, 0.18%)</title><rect x="13.4456%" y="1365" width="0.1834%" height="15" fill="rgb(241,101,14)"/><text x="13.6956%" y="1375.50"></text></g><g><title>wgpu_core::device::life::NonReferencedResources&lt;B&gt;::clean (34 samples, 0.18%)</title><rect x="13.4456%" y="1349" width="0.1834%" height="15" fill="rgb(238,103,29)"/><text x="13.6956%" y="1359.50"></text></g><g><title>gfx_memory::heaps::Heaps&lt;B&gt;::free (22 samples, 0.12%)</title><rect x="13.5103%" y="1333" width="0.1187%" height="15" fill="rgb(233,195,47)"/><text x="13.7603%" y="1343.50"></text></g><g><title>gfx_memory::heaps::memory_type::MemoryType&lt;B&gt;::free (21 samples, 0.11%)</title><rect x="13.5157%" y="1317" width="0.1133%" height="15" fill="rgb(246,218,30)"/><text x="13.7657%" y="1327.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_framebuffers (88 samples, 0.47%)</title><rect x="13.6290%" y="1365" width="0.4748%" height="15" fill="rgb(219,145,47)"/><text x="13.8790%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (88 samples, 0.47%)</title><rect x="13.6290%" y="1349" width="0.4748%" height="15" fill="rgb(243,12,26)"/><text x="13.8790%" y="1359.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (88 samples, 0.47%)</title><rect x="13.6290%" y="1333" width="0.4748%" height="15" fill="rgb(214,87,16)"/><text x="13.8790%" y="1343.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (88 samples, 0.47%)</title><rect x="13.6290%" y="1317" width="0.4748%" height="15" fill="rgb(208,99,42)"/><text x="13.8790%" y="1327.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (88 samples, 0.47%)</title><rect x="13.6290%" y="1301" width="0.4748%" height="15" fill="rgb(253,99,2)"/><text x="13.8790%" y="1311.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (88 samples, 0.47%)</title><rect x="13.6290%" y="1285" width="0.4748%" height="15" fill="rgb(220,168,23)"/><text x="13.8790%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (88 samples, 0.47%)</title><rect x="13.6290%" y="1269" width="0.4748%" height="15" fill="rgb(242,38,24)"/><text x="13.8790%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (88 samples, 0.47%)</title><rect x="13.6290%" y="1253" width="0.4748%" height="15" fill="rgb(225,182,9)"/><text x="13.8790%" y="1263.50"></text></g><g><title>core::iter::adapters::filter_map_fold::{{closure}} (82 samples, 0.44%)</title><rect x="13.6614%" y="1237" width="0.4424%" height="15" fill="rgb(243,178,37)"/><text x="13.9114%" y="1247.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_framebuffers::{{closure}} (80 samples, 0.43%)</title><rect x="13.6722%" y="1221" width="0.4316%" height="15" fill="rgb(232,139,19)"/><text x="13.9222%" y="1231.50"></text></g><g><title>__ioctl (53 samples, 0.29%)</title><rect x="14.1847%" y="1269" width="0.2860%" height="15" fill="rgb(225,201,24)"/><text x="14.4347%" y="1279.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (68 samples, 0.37%)</title><rect x="14.1416%" y="1301" width="0.3669%" height="15" fill="rgb(221,47,46)"/><text x="14.3916%" y="1311.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (66 samples, 0.36%)</title><rect x="14.1524%" y="1285" width="0.3561%" height="15" fill="rgb(249,23,13)"/><text x="14.4024%" y="1295.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (71 samples, 0.38%)</title><rect x="14.1308%" y="1349" width="0.3831%" height="15" fill="rgb(219,9,5)"/><text x="14.3808%" y="1359.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (71 samples, 0.38%)</title><rect x="14.1308%" y="1333" width="0.3831%" height="15" fill="rgb(254,171,16)"/><text x="14.3808%" y="1343.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (70 samples, 0.38%)</title><rect x="14.1362%" y="1317" width="0.3777%" height="15" fill="rgb(230,171,20)"/><text x="14.3862%" y="1327.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_submissions (79 samples, 0.43%)</title><rect x="14.1038%" y="1365" width="0.4262%" height="15" fill="rgb(210,71,41)"/><text x="14.3538%" y="1375.50"></text></g><g><title>nenbody::render (325 samples, 1.75%)</title><rect x="12.7819%" y="1445" width="1.7535%" height="15" fill="rgb(206,173,20)"/><text x="13.0319%" y="1455.50"></text></g><g><title>wgpu::Queue::submit (297 samples, 1.60%)</title><rect x="12.9330%" y="1429" width="1.6025%" height="15" fill="rgb(233,88,34)"/><text x="13.1830%" y="1439.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::queue_submit (297 samples, 1.60%)</title><rect x="12.9330%" y="1413" width="1.6025%" height="15" fill="rgb(223,209,46)"/><text x="13.1830%" y="1423.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (297 samples, 1.60%)</title><rect x="12.9330%" y="1397" width="1.6025%" height="15" fill="rgb(250,43,18)"/><text x="13.1830%" y="1407.50"></text></g><g><title>wgpu_core::device::Device&lt;B&gt;::maintain (287 samples, 1.55%)</title><rect x="12.9869%" y="1381" width="1.5485%" height="15" fill="rgb(208,13,10)"/><text x="13.2369%" y="1391.50"></text></g><g><title>__ioctl (21 samples, 0.11%)</title><rect x="14.6056%" y="1285" width="0.1133%" height="15" fill="rgb(212,200,36)"/><text x="14.8556%" y="1295.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (33 samples, 0.18%)</title><rect x="14.5570%" y="1365" width="0.1781%" height="15" fill="rgb(225,90,30)"/><text x="14.8070%" y="1375.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (33 samples, 0.18%)</title><rect x="14.5570%" y="1349" width="0.1781%" height="15" fill="rgb(236,182,39)"/><text x="14.8070%" y="1359.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (33 samples, 0.18%)</title><rect x="14.5570%" y="1333" width="0.1781%" height="15" fill="rgb(212,144,35)"/><text x="14.8070%" y="1343.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (33 samples, 0.18%)</title><rect x="14.5570%" y="1317" width="0.1781%" height="15" fill="rgb(228,63,44)"/><text x="14.8070%" y="1327.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (33 samples, 0.18%)</title><rect x="14.5570%" y="1301" width="0.1781%" height="15" fill="rgb(228,109,6)"/><text x="14.8070%" y="1311.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (637 samples, 3.44%)</title><rect x="11.3089%" y="1509" width="3.4369%" height="15" fill="rgb(238,117,24)"/><text x="11.5589%" y="1519.50">win..</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return (637 samples, 3.44%)</title><rect x="11.3089%" y="1493" width="3.4369%" height="15" fill="rgb(242,26,26)"/><text x="11.5589%" y="1503.50">win..</text></g><g><title>winit::platform_impl::platform::sticky_exit_callback (637 samples, 3.44%)</title><rect x="11.3089%" y="1477" width="3.4369%" height="15" fill="rgb(221,92,48)"/><text x="11.5589%" y="1487.50">win..</text></g><g><title>nenbody::main::{{closure}}::{{closure}} (637 samples, 3.44%)</title><rect x="11.3089%" y="1461" width="3.4369%" height="15" fill="rgb(209,209,32)"/><text x="11.5589%" y="1471.50">nen..</text></g><g><title>wgpu::Queue::submit (39 samples, 0.21%)</title><rect x="14.5354%" y="1445" width="0.2104%" height="15" fill="rgb(221,70,22)"/><text x="14.7854%" y="1455.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::queue_submit (39 samples, 0.21%)</title><rect x="14.5354%" y="1429" width="0.2104%" height="15" fill="rgb(248,145,5)"/><text x="14.7854%" y="1439.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (39 samples, 0.21%)</title><rect x="14.5354%" y="1413" width="0.2104%" height="15" fill="rgb(226,116,26)"/><text x="14.7854%" y="1423.50"></text></g><g><title>wgpu_core::device::Device&lt;B&gt;::maintain (36 samples, 0.19%)</title><rect x="14.5516%" y="1397" width="0.1942%" height="15" fill="rgb(244,5,17)"/><text x="14.8016%" y="1407.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;B&gt;::triage_submissions (35 samples, 0.19%)</title><rect x="14.5570%" y="1381" width="0.1888%" height="15" fill="rgb(252,159,33)"/><text x="14.8070%" y="1391.50"></text></g><g><title>[unknown] (2,285 samples, 12.33%)</title><rect x="2.4226%" y="1525" width="12.3287%" height="15" fill="rgb(206,71,0)"/><text x="2.6726%" y="1535.50">[unknown]</text></g><g><title>ret_from_fork (25 samples, 0.13%)</title><rect x="14.7567%" y="1509" width="0.1349%" height="15" fill="rgb(233,118,54)"/><text x="15.0067%" y="1519.50"></text></g><g><title>schedule_tail (25 samples, 0.13%)</title><rect x="14.7567%" y="1493" width="0.1349%" height="15" fill="rgb(234,83,48)"/><text x="15.0067%" y="1503.50"></text></g><g><title>finish_task_switch (25 samples, 0.13%)</title><rect x="14.7567%" y="1477" width="0.1349%" height="15" fill="rgb(228,3,54)"/><text x="15.0067%" y="1487.50"></text></g><g><title>__perf_event_task_sched_in (25 samples, 0.13%)</title><rect x="14.7567%" y="1461" width="0.1349%" height="15" fill="rgb(226,155,13)"/><text x="15.0067%" y="1471.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (41 samples, 0.22%)</title><rect x="15.1236%" y="1109" width="0.2212%" height="15" fill="rgb(241,28,37)"/><text x="15.3736%" y="1119.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (41 samples, 0.22%)</title><rect x="15.1236%" y="1093" width="0.2212%" height="15" fill="rgb(233,93,10)"/><text x="15.3736%" y="1103.50"></text></g><g><title>crossbeam_deque::Stealer&lt;T&gt;::steal (38 samples, 0.21%)</title><rect x="15.1397%" y="1077" width="0.2050%" height="15" fill="rgb(225,113,19)"/><text x="15.3897%" y="1087.50"></text></g><g><title>core::iter::adapters::filter_try_fold::{{closure}} (42 samples, 0.23%)</title><rect x="15.1236%" y="1125" width="0.2266%" height="15" fill="rgb(241,2,18)"/><text x="15.3736%" y="1135.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (19 samples, 0.10%)</title><rect x="15.5174%" y="1045" width="0.1025%" height="15" fill="rgb(228,207,21)"/><text x="15.7674%" y="1055.50"></text></g><g><title>crossbeam_epoch::default::with_handle (19 samples, 0.10%)</title><rect x="15.5174%" y="1029" width="0.1025%" height="15" fill="rgb(213,211,35)"/><text x="15.7674%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.10%)</title><rect x="15.5174%" y="1013" width="0.1025%" height="15" fill="rgb(209,83,10)"/><text x="15.7674%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (154 samples, 0.83%)</title><rect x="15.0696%" y="1157" width="0.8309%" height="15" fill="rgb(209,164,1)"/><text x="15.3196%" y="1167.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (146 samples, 0.79%)</title><rect x="15.1128%" y="1141" width="0.7877%" height="15" fill="rgb(213,184,43)"/><text x="15.3628%" y="1151.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (96 samples, 0.52%)</title><rect x="15.3825%" y="1125" width="0.5180%" height="15" fill="rgb(231,61,34)"/><text x="15.6325%" y="1135.50"></text></g><g><title>core::iter::adapters::filter_try_fold::{{closure}} (96 samples, 0.52%)</title><rect x="15.3825%" y="1109" width="0.5180%" height="15" fill="rgb(235,75,3)"/><text x="15.6325%" y="1119.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (93 samples, 0.50%)</title><rect x="15.3987%" y="1093" width="0.5018%" height="15" fill="rgb(220,106,47)"/><text x="15.6487%" y="1103.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (93 samples, 0.50%)</title><rect x="15.3987%" y="1077" width="0.5018%" height="15" fill="rgb(210,196,33)"/><text x="15.6487%" y="1087.50"></text></g><g><title>crossbeam_deque::Stealer&lt;T&gt;::steal (90 samples, 0.49%)</title><rect x="15.4149%" y="1061" width="0.4856%" height="15" fill="rgb(229,154,42)"/><text x="15.6649%" y="1071.50"></text></g><g><title>crossbeam_epoch::default::pin (52 samples, 0.28%)</title><rect x="15.6199%" y="1045" width="0.2806%" height="15" fill="rgb(228,114,26)"/><text x="15.8699%" y="1055.50"></text></g><g><title>crossbeam_epoch::default::with_handle (52 samples, 0.28%)</title><rect x="15.6199%" y="1029" width="0.2806%" height="15" fill="rgb(208,144,1)"/><text x="15.8699%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (52 samples, 0.28%)</title><rect x="15.6199%" y="1013" width="0.2806%" height="15" fill="rgb(239,112,37)"/><text x="15.8699%" y="1023.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (45 samples, 0.24%)</title><rect x="15.6577%" y="997" width="0.2428%" height="15" fill="rgb(210,96,50)"/><text x="15.9077%" y="1007.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (45 samples, 0.24%)</title><rect x="15.6577%" y="981" width="0.2428%" height="15" fill="rgb(222,178,2)"/><text x="15.9077%" y="991.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (45 samples, 0.24%)</title><rect x="15.6577%" y="965" width="0.2428%" height="15" fill="rgb(226,74,18)"/><text x="15.9077%" y="975.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (45 samples, 0.24%)</title><rect x="15.6577%" y="949" width="0.2428%" height="15" fill="rgb(225,67,54)"/><text x="15.9077%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (157 samples, 0.85%)</title><rect x="15.0696%" y="1189" width="0.8471%" height="15" fill="rgb(251,92,32)"/><text x="15.3196%" y="1199.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (157 samples, 0.85%)</title><rect x="15.0696%" y="1173" width="0.8471%" height="15" fill="rgb(228,149,22)"/><text x="15.3196%" y="1183.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (187 samples, 1.01%)</title><rect x="14.9185%" y="1237" width="1.0090%" height="15" fill="rgb(243,54,13)"/><text x="15.1685%" y="1247.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::{{closure}} (187 samples, 1.01%)</title><rect x="14.9185%" y="1221" width="1.0090%" height="15" fill="rgb(243,180,28)"/><text x="15.1685%" y="1231.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (168 samples, 0.91%)</title><rect x="15.0210%" y="1205" width="0.9064%" height="15" fill="rgb(208,167,24)"/><text x="15.2710%" y="1215.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (22 samples, 0.12%)</title><rect x="15.9653%" y="885" width="0.1187%" height="15" fill="rgb(245,73,45)"/><text x="16.2153%" y="895.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (21 samples, 0.11%)</title><rect x="15.9706%" y="869" width="0.1133%" height="15" fill="rgb(237,203,48)"/><text x="16.2206%" y="879.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (21 samples, 0.11%)</title><rect x="15.9706%" y="853" width="0.1133%" height="15" fill="rgb(211,197,16)"/><text x="16.2206%" y="863.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.11%)</title><rect x="15.9706%" y="837" width="0.1133%" height="15" fill="rgb(243,99,51)"/><text x="16.2206%" y="847.50"></text></g><g><title>rayon_core::join::join_context (21 samples, 0.11%)</title><rect x="15.9706%" y="821" width="0.1133%" height="15" fill="rgb(215,123,29)"/><text x="16.2206%" y="831.50"></text></g><g><title>rayon_core::registry::in_worker (21 samples, 0.11%)</title><rect x="15.9706%" y="805" width="0.1133%" height="15" fill="rgb(239,186,37)"/><text x="16.2206%" y="815.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (21 samples, 0.11%)</title><rect x="15.9706%" y="789" width="0.1133%" height="15" fill="rgb(252,136,39)"/><text x="16.2206%" y="799.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (19 samples, 0.10%)</title><rect x="16.1757%" y="709" width="0.1025%" height="15" fill="rgb(223,213,32)"/><text x="16.4257%" y="719.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (76 samples, 0.41%)</title><rect x="15.9653%" y="901" width="0.4101%" height="15" fill="rgb(233,115,5)"/><text x="16.2153%" y="911.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (38 samples, 0.21%)</title><rect x="16.1703%" y="885" width="0.2050%" height="15" fill="rgb(207,226,44)"/><text x="16.4203%" y="895.50"></text></g><g><title>std::panic::catch_unwind (38 samples, 0.21%)</title><rect x="16.1703%" y="869" width="0.2050%" height="15" fill="rgb(208,126,0)"/><text x="16.4203%" y="879.50"></text></g><g><title>std::panicking::try (38 samples, 0.21%)</title><rect x="16.1703%" y="853" width="0.2050%" height="15" fill="rgb(244,66,21)"/><text x="16.4203%" y="863.50"></text></g><g><title>std::panicking::try::do_call (38 samples, 0.21%)</title><rect x="16.1703%" y="837" width="0.2050%" height="15" fill="rgb(222,97,12)"/><text x="16.4203%" y="847.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38 samples, 0.21%)</title><rect x="16.1703%" y="821" width="0.2050%" height="15" fill="rgb(219,213,19)"/><text x="16.4203%" y="831.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (38 samples, 0.21%)</title><rect x="16.1703%" y="805" width="0.2050%" height="15" fill="rgb(252,169,30)"/><text x="16.4203%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (38 samples, 0.21%)</title><rect x="16.1703%" y="789" width="0.2050%" height="15" fill="rgb(206,32,51)"/><text x="16.4203%" y="799.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (38 samples, 0.21%)</title><rect x="16.1703%" y="773" width="0.2050%" height="15" fill="rgb(250,172,42)"/><text x="16.4203%" y="783.50"></text></g><g><title>rayon_core::join::join_context (38 samples, 0.21%)</title><rect x="16.1703%" y="757" width="0.2050%" height="15" fill="rgb(209,34,43)"/><text x="16.4203%" y="767.50"></text></g><g><title>rayon_core::registry::in_worker (38 samples, 0.21%)</title><rect x="16.1703%" y="741" width="0.2050%" height="15" fill="rgb(223,11,35)"/><text x="16.4203%" y="751.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (38 samples, 0.21%)</title><rect x="16.1703%" y="725" width="0.2050%" height="15" fill="rgb(251,219,26)"/><text x="16.4203%" y="735.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (77 samples, 0.42%)</title><rect x="15.9653%" y="997" width="0.4155%" height="15" fill="rgb(231,119,3)"/><text x="16.2153%" y="1007.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (77 samples, 0.42%)</title><rect x="15.9653%" y="981" width="0.4155%" height="15" fill="rgb(216,97,11)"/><text x="16.2153%" y="991.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (77 samples, 0.42%)</title><rect x="15.9653%" y="965" width="0.4155%" height="15" fill="rgb(223,59,9)"/><text x="16.2153%" y="975.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (77 samples, 0.42%)</title><rect x="15.9653%" y="949" width="0.4155%" height="15" fill="rgb(233,93,31)"/><text x="16.2153%" y="959.50"></text></g><g><title>rayon_core::join::join_context (77 samples, 0.42%)</title><rect x="15.9653%" y="933" width="0.4155%" height="15" fill="rgb(239,81,33)"/><text x="16.2153%" y="943.50"></text></g><g><title>rayon_core::registry::in_worker (77 samples, 0.42%)</title><rect x="15.9653%" y="917" width="0.4155%" height="15" fill="rgb(213,120,34)"/><text x="16.2153%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (19 samples, 0.10%)</title><rect x="16.3969%" y="965" width="0.1025%" height="15" fill="rgb(243,49,53)"/><text x="16.6469%" y="975.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::{{closure}} (19 samples, 0.10%)</title><rect x="16.3969%" y="949" width="0.1025%" height="15" fill="rgb(247,216,33)"/><text x="16.6469%" y="959.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (19 samples, 0.10%)</title><rect x="16.3969%" y="933" width="0.1025%" height="15" fill="rgb(226,26,14)"/><text x="16.6469%" y="943.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (23 samples, 0.12%)</title><rect x="16.5480%" y="725" width="0.1241%" height="15" fill="rgb(215,49,53)"/><text x="16.7980%" y="735.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (23 samples, 0.12%)</title><rect x="16.5480%" y="709" width="0.1241%" height="15" fill="rgb(245,162,40)"/><text x="16.7980%" y="719.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (48 samples, 0.26%)</title><rect x="16.4994%" y="965" width="0.2590%" height="15" fill="rgb(229,68,17)"/><text x="16.7494%" y="975.50"></text></g><g><title>rayon_core::job::JobRef::execute (48 samples, 0.26%)</title><rect x="16.4994%" y="949" width="0.2590%" height="15" fill="rgb(213,182,10)"/><text x="16.7494%" y="959.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (48 samples, 0.26%)</title><rect x="16.4994%" y="933" width="0.2590%" height="15" fill="rgb(245,125,30)"/><text x="16.7494%" y="943.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (48 samples, 0.26%)</title><rect x="16.4994%" y="917" width="0.2590%" height="15" fill="rgb(232,202,2)"/><text x="16.7494%" y="927.50"></text></g><g><title>std::panic::catch_unwind (48 samples, 0.26%)</title><rect x="16.4994%" y="901" width="0.2590%" height="15" fill="rgb(237,140,51)"/><text x="16.7494%" y="911.50"></text></g><g><title>std::panicking::try (48 samples, 0.26%)</title><rect x="16.4994%" y="885" width="0.2590%" height="15" fill="rgb(236,157,25)"/><text x="16.7494%" y="895.50"></text></g><g><title>std::panicking::try::do_call (48 samples, 0.26%)</title><rect x="16.4994%" y="869" width="0.2590%" height="15" fill="rgb(219,209,0)"/><text x="16.7494%" y="879.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (48 samples, 0.26%)</title><rect x="16.4994%" y="853" width="0.2590%" height="15" fill="rgb(240,116,54)"/><text x="16.7494%" y="863.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (48 samples, 0.26%)</title><rect x="16.4994%" y="837" width="0.2590%" height="15" fill="rgb(216,10,36)"/><text x="16.7494%" y="847.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (48 samples, 0.26%)</title><rect x="16.4994%" y="821" width="0.2590%" height="15" fill="rgb(222,72,44)"/><text x="16.7494%" y="831.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (48 samples, 0.26%)</title><rect x="16.4994%" y="805" width="0.2590%" height="15" fill="rgb(232,159,9)"/><text x="16.7494%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (48 samples, 0.26%)</title><rect x="16.4994%" y="789" width="0.2590%" height="15" fill="rgb(210,39,32)"/><text x="16.7494%" y="799.50"></text></g><g><title>rayon_core::join::join_context (48 samples, 0.26%)</title><rect x="16.4994%" y="773" width="0.2590%" height="15" fill="rgb(216,194,45)"/><text x="16.7494%" y="783.50"></text></g><g><title>rayon_core::registry::in_worker (48 samples, 0.26%)</title><rect x="16.4994%" y="757" width="0.2590%" height="15" fill="rgb(218,18,35)"/><text x="16.7494%" y="767.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (48 samples, 0.26%)</title><rect x="16.4994%" y="741" width="0.2590%" height="15" fill="rgb(207,83,51)"/><text x="16.7494%" y="751.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (89 samples, 0.48%)</title><rect x="16.3861%" y="997" width="0.4802%" height="15" fill="rgb(225,63,43)"/><text x="16.6361%" y="1007.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (89 samples, 0.48%)</title><rect x="16.3861%" y="981" width="0.4802%" height="15" fill="rgb(207,57,36)"/><text x="16.6361%" y="991.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (22 samples, 0.12%)</title><rect x="16.8717%" y="597" width="0.1187%" height="15" fill="rgb(216,99,33)"/><text x="17.1217%" y="607.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (22 samples, 0.12%)</title><rect x="16.8717%" y="581" width="0.1187%" height="15" fill="rgb(225,42,16)"/><text x="17.1217%" y="591.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (22 samples, 0.12%)</title><rect x="16.8717%" y="565" width="0.1187%" height="15" fill="rgb(220,201,45)"/><text x="17.1217%" y="575.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (22 samples, 0.12%)</title><rect x="16.8717%" y="549" width="0.1187%" height="15" fill="rgb(225,33,4)"/><text x="17.1217%" y="559.50"></text></g><g><title>rayon_core::join::join_context (22 samples, 0.12%)</title><rect x="16.8717%" y="533" width="0.1187%" height="15" fill="rgb(224,33,50)"/><text x="17.1217%" y="543.50"></text></g><g><title>rayon_core::registry::in_worker (22 samples, 0.12%)</title><rect x="16.8717%" y="517" width="0.1187%" height="15" fill="rgb(246,198,51)"/><text x="17.1217%" y="527.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (22 samples, 0.12%)</title><rect x="16.8717%" y="501" width="0.1187%" height="15" fill="rgb(205,22,4)"/><text x="17.1217%" y="511.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (52 samples, 0.28%)</title><rect x="16.8717%" y="709" width="0.2806%" height="15" fill="rgb(206,3,8)"/><text x="17.1217%" y="719.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (52 samples, 0.28%)</title><rect x="16.8717%" y="693" width="0.2806%" height="15" fill="rgb(251,23,15)"/><text x="17.1217%" y="703.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (52 samples, 0.28%)</title><rect x="16.8717%" y="677" width="0.2806%" height="15" fill="rgb(252,88,28)"/><text x="17.1217%" y="687.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (52 samples, 0.28%)</title><rect x="16.8717%" y="661" width="0.2806%" height="15" fill="rgb(212,127,14)"/><text x="17.1217%" y="671.50"></text></g><g><title>rayon_core::join::join_context (52 samples, 0.28%)</title><rect x="16.8717%" y="645" width="0.2806%" height="15" fill="rgb(247,145,37)"/><text x="17.1217%" y="655.50"></text></g><g><title>rayon_core::registry::in_worker (52 samples, 0.28%)</title><rect x="16.8717%" y="629" width="0.2806%" height="15" fill="rgb(209,117,53)"/><text x="17.1217%" y="639.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (52 samples, 0.28%)</title><rect x="16.8717%" y="613" width="0.2806%" height="15" fill="rgb(212,90,42)"/><text x="17.1217%" y="623.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (26 samples, 0.14%)</title><rect x="17.0120%" y="597" width="0.1403%" height="15" fill="rgb(218,164,37)"/><text x="17.2620%" y="607.50"></text></g><g><title>std::panic::catch_unwind (26 samples, 0.14%)</title><rect x="17.0120%" y="581" width="0.1403%" height="15" fill="rgb(246,65,34)"/><text x="17.2620%" y="591.50"></text></g><g><title>std::panicking::try (26 samples, 0.14%)</title><rect x="17.0120%" y="565" width="0.1403%" height="15" fill="rgb(231,100,33)"/><text x="17.2620%" y="575.50"></text></g><g><title>std::panicking::try::do_call (26 samples, 0.14%)</title><rect x="17.0120%" y="549" width="0.1403%" height="15" fill="rgb(228,126,14)"/><text x="17.2620%" y="559.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (26 samples, 0.14%)</title><rect x="17.0120%" y="533" width="0.1403%" height="15" fill="rgb(215,173,21)"/><text x="17.2620%" y="543.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (26 samples, 0.14%)</title><rect x="17.0120%" y="517" width="0.1403%" height="15" fill="rgb(210,6,40)"/><text x="17.2620%" y="527.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (26 samples, 0.14%)</title><rect x="17.0120%" y="501" width="0.1403%" height="15" fill="rgb(212,48,18)"/><text x="17.2620%" y="511.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (26 samples, 0.14%)</title><rect x="17.0120%" y="485" width="0.1403%" height="15" fill="rgb(230,214,11)"/><text x="17.2620%" y="495.50"></text></g><g><title>rayon_core::join::join_context (26 samples, 0.14%)</title><rect x="17.0120%" y="469" width="0.1403%" height="15" fill="rgb(254,105,39)"/><text x="17.2620%" y="479.50"></text></g><g><title>rayon_core::registry::in_worker (26 samples, 0.14%)</title><rect x="17.0120%" y="453" width="0.1403%" height="15" fill="rgb(245,158,5)"/><text x="17.2620%" y="463.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (26 samples, 0.14%)</title><rect x="17.0120%" y="437" width="0.1403%" height="15" fill="rgb(249,208,11)"/><text x="17.2620%" y="447.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (33 samples, 0.18%)</title><rect x="17.2440%" y="533" width="0.1781%" height="15" fill="rgb(210,39,28)"/><text x="17.4940%" y="543.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (33 samples, 0.18%)</title><rect x="17.2440%" y="517" width="0.1781%" height="15" fill="rgb(211,56,53)"/><text x="17.4940%" y="527.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (33 samples, 0.18%)</title><rect x="17.2440%" y="501" width="0.1781%" height="15" fill="rgb(226,201,30)"/><text x="17.4940%" y="511.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (33 samples, 0.18%)</title><rect x="17.2440%" y="485" width="0.1781%" height="15" fill="rgb(239,101,34)"/><text x="17.4940%" y="495.50"></text></g><g><title>rayon_core::join::join_context (33 samples, 0.18%)</title><rect x="17.2440%" y="469" width="0.1781%" height="15" fill="rgb(226,209,5)"/><text x="17.4940%" y="479.50"></text></g><g><title>rayon_core::registry::in_worker (33 samples, 0.18%)</title><rect x="17.2440%" y="453" width="0.1781%" height="15" fill="rgb(250,105,47)"/><text x="17.4940%" y="463.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (33 samples, 0.18%)</title><rect x="17.2440%" y="437" width="0.1781%" height="15" fill="rgb(230,72,3)"/><text x="17.4940%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.11%)</title><rect x="17.5245%" y="181" width="0.1079%" height="15" fill="rgb(232,218,39)"/><text x="17.7745%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.11%)</title><rect x="17.5245%" y="165" width="0.1079%" height="15" fill="rgb(248,166,6)"/><text x="17.7745%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (20 samples, 0.11%)</title><rect x="17.5245%" y="149" width="0.1079%" height="15" fill="rgb(247,89,20)"/><text x="17.7745%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (20 samples, 0.11%)</title><rect x="17.5245%" y="133" width="0.1079%" height="15" fill="rgb(248,130,54)"/><text x="17.7745%" y="143.50"></text></g><g><title>nenbody::update_camera_list::{{closure}} (20 samples, 0.11%)</title><rect x="17.5245%" y="117" width="0.1079%" height="15" fill="rgb(234,196,4)"/><text x="17.7745%" y="127.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (142 samples, 0.77%)</title><rect x="16.8717%" y="821" width="0.7662%" height="15" fill="rgb(250,143,31)"/><text x="17.1217%" y="831.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (142 samples, 0.77%)</title><rect x="16.8717%" y="805" width="0.7662%" height="15" fill="rgb(211,110,34)"/><text x="17.1217%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (142 samples, 0.77%)</title><rect x="16.8717%" y="789" width="0.7662%" height="15" fill="rgb(215,124,48)"/><text x="17.1217%" y="799.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (142 samples, 0.77%)</title><rect x="16.8717%" y="773" width="0.7662%" height="15" fill="rgb(216,46,13)"/><text x="17.1217%" y="783.50"></text></g><g><title>rayon_core::join::join_context (142 samples, 0.77%)</title><rect x="16.8717%" y="757" width="0.7662%" height="15" fill="rgb(205,184,25)"/><text x="17.1217%" y="767.50"></text></g><g><title>rayon_core::registry::in_worker (142 samples, 0.77%)</title><rect x="16.8717%" y="741" width="0.7662%" height="15" fill="rgb(228,1,10)"/><text x="17.1217%" y="751.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (142 samples, 0.77%)</title><rect x="16.8717%" y="725" width="0.7662%" height="15" fill="rgb(213,116,27)"/><text x="17.1217%" y="735.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (74 samples, 0.40%)</title><rect x="17.2386%" y="709" width="0.3993%" height="15" fill="rgb(241,95,50)"/><text x="17.4886%" y="719.50"></text></g><g><title>std::panic::catch_unwind (74 samples, 0.40%)</title><rect x="17.2386%" y="693" width="0.3993%" height="15" fill="rgb(238,48,32)"/><text x="17.4886%" y="703.50"></text></g><g><title>std::panicking::try (74 samples, 0.40%)</title><rect x="17.2386%" y="677" width="0.3993%" height="15" fill="rgb(235,113,49)"/><text x="17.4886%" y="687.50"></text></g><g><title>std::panicking::try::do_call (74 samples, 0.40%)</title><rect x="17.2386%" y="661" width="0.3993%" height="15" fill="rgb(205,127,43)"/><text x="17.4886%" y="671.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (74 samples, 0.40%)</title><rect x="17.2386%" y="645" width="0.3993%" height="15" fill="rgb(250,162,2)"/><text x="17.4886%" y="655.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (74 samples, 0.40%)</title><rect x="17.2386%" y="629" width="0.3993%" height="15" fill="rgb(220,13,41)"/><text x="17.4886%" y="639.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (74 samples, 0.40%)</title><rect x="17.2386%" y="613" width="0.3993%" height="15" fill="rgb(249,221,25)"/><text x="17.4886%" y="623.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (74 samples, 0.40%)</title><rect x="17.2386%" y="597" width="0.3993%" height="15" fill="rgb(215,208,19)"/><text x="17.4886%" y="607.50"></text></g><g><title>rayon_core::join::join_context (74 samples, 0.40%)</title><rect x="17.2386%" y="581" width="0.3993%" height="15" fill="rgb(236,175,2)"/><text x="17.4886%" y="591.50"></text></g><g><title>rayon_core::registry::in_worker (74 samples, 0.40%)</title><rect x="17.2386%" y="565" width="0.3993%" height="15" fill="rgb(241,52,2)"/><text x="17.4886%" y="575.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (73 samples, 0.39%)</title><rect x="17.2440%" y="549" width="0.3939%" height="15" fill="rgb(248,140,14)"/><text x="17.4940%" y="559.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (36 samples, 0.19%)</title><rect x="17.4436%" y="533" width="0.1942%" height="15" fill="rgb(253,22,42)"/><text x="17.6936%" y="543.50"></text></g><g><title>std::panic::catch_unwind (36 samples, 0.19%)</title><rect x="17.4436%" y="517" width="0.1942%" height="15" fill="rgb(234,61,47)"/><text x="17.6936%" y="527.50"></text></g><g><title>std::panicking::try (36 samples, 0.19%)</title><rect x="17.4436%" y="501" width="0.1942%" height="15" fill="rgb(208,226,15)"/><text x="17.6936%" y="511.50"></text></g><g><title>std::panicking::try::do_call (36 samples, 0.19%)</title><rect x="17.4436%" y="485" width="0.1942%" height="15" fill="rgb(217,221,4)"/><text x="17.6936%" y="495.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36 samples, 0.19%)</title><rect x="17.4436%" y="469" width="0.1942%" height="15" fill="rgb(212,174,34)"/><text x="17.6936%" y="479.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (36 samples, 0.19%)</title><rect x="17.4436%" y="453" width="0.1942%" height="15" fill="rgb(253,83,4)"/><text x="17.6936%" y="463.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (36 samples, 0.19%)</title><rect x="17.4436%" y="437" width="0.1942%" height="15" fill="rgb(250,195,49)"/><text x="17.6936%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (36 samples, 0.19%)</title><rect x="17.4436%" y="421" width="0.1942%" height="15" fill="rgb(241,192,25)"/><text x="17.6936%" y="431.50"></text></g><g><title>rayon_core::join::join_context (36 samples, 0.19%)</title><rect x="17.4436%" y="405" width="0.1942%" height="15" fill="rgb(208,124,10)"/><text x="17.6936%" y="415.50"></text></g><g><title>rayon_core::registry::in_worker (36 samples, 0.19%)</title><rect x="17.4436%" y="389" width="0.1942%" height="15" fill="rgb(222,33,0)"/><text x="17.6936%" y="399.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (35 samples, 0.19%)</title><rect x="17.4490%" y="373" width="0.1888%" height="15" fill="rgb(234,209,28)"/><text x="17.6990%" y="383.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (21 samples, 0.11%)</title><rect x="17.5245%" y="357" width="0.1133%" height="15" fill="rgb(224,11,23)"/><text x="17.7745%" y="367.50"></text></g><g><title>std::panic::catch_unwind (21 samples, 0.11%)</title><rect x="17.5245%" y="341" width="0.1133%" height="15" fill="rgb(232,99,1)"/><text x="17.7745%" y="351.50"></text></g><g><title>std::panicking::try (21 samples, 0.11%)</title><rect x="17.5245%" y="325" width="0.1133%" height="15" fill="rgb(237,95,45)"/><text x="17.7745%" y="335.50"></text></g><g><title>std::panicking::try::do_call (21 samples, 0.11%)</title><rect x="17.5245%" y="309" width="0.1133%" height="15" fill="rgb(208,109,11)"/><text x="17.7745%" y="319.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (21 samples, 0.11%)</title><rect x="17.5245%" y="293" width="0.1133%" height="15" fill="rgb(216,190,48)"/><text x="17.7745%" y="303.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (21 samples, 0.11%)</title><rect x="17.5245%" y="277" width="0.1133%" height="15" fill="rgb(251,171,36)"/><text x="17.7745%" y="287.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (21 samples, 0.11%)</title><rect x="17.5245%" y="261" width="0.1133%" height="15" fill="rgb(230,62,22)"/><text x="17.7745%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.11%)</title><rect x="17.5245%" y="245" width="0.1133%" height="15" fill="rgb(225,114,35)"/><text x="17.7745%" y="255.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (21 samples, 0.11%)</title><rect x="17.5245%" y="229" width="0.1133%" height="15" fill="rgb(215,118,42)"/><text x="17.7745%" y="239.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (21 samples, 0.11%)</title><rect x="17.5245%" y="213" width="0.1133%" height="15" fill="rgb(243,119,21)"/><text x="17.7745%" y="223.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (21 samples, 0.11%)</title><rect x="17.5245%" y="197" width="0.1133%" height="15" fill="rgb(252,177,53)"/><text x="17.7745%" y="207.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (26 samples, 0.14%)</title><rect x="17.6864%" y="789" width="0.1403%" height="15" fill="rgb(237,209,29)"/><text x="17.9364%" y="799.50"></text></g><g><title>rayon_core::job::JobRef::execute (26 samples, 0.14%)</title><rect x="17.6864%" y="773" width="0.1403%" height="15" fill="rgb(212,65,23)"/><text x="17.9364%" y="783.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (26 samples, 0.14%)</title><rect x="17.6864%" y="757" width="0.1403%" height="15" fill="rgb(230,222,46)"/><text x="17.9364%" y="767.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (26 samples, 0.14%)</title><rect x="17.6864%" y="741" width="0.1403%" height="15" fill="rgb(215,135,32)"/><text x="17.9364%" y="751.50"></text></g><g><title>std::panic::catch_unwind (26 samples, 0.14%)</title><rect x="17.6864%" y="725" width="0.1403%" height="15" fill="rgb(246,101,22)"/><text x="17.9364%" y="735.50"></text></g><g><title>std::panicking::try (26 samples, 0.14%)</title><rect x="17.6864%" y="709" width="0.1403%" height="15" fill="rgb(206,107,13)"/><text x="17.9364%" y="719.50"></text></g><g><title>std::panicking::try::do_call (26 samples, 0.14%)</title><rect x="17.6864%" y="693" width="0.1403%" height="15" fill="rgb(250,100,44)"/><text x="17.9364%" y="703.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (26 samples, 0.14%)</title><rect x="17.6864%" y="677" width="0.1403%" height="15" fill="rgb(231,147,38)"/><text x="17.9364%" y="687.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (26 samples, 0.14%)</title><rect x="17.6864%" y="661" width="0.1403%" height="15" fill="rgb(229,8,40)"/><text x="17.9364%" y="671.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (26 samples, 0.14%)</title><rect x="17.6864%" y="645" width="0.1403%" height="15" fill="rgb(221,135,30)"/><text x="17.9364%" y="655.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (26 samples, 0.14%)</title><rect x="17.6864%" y="629" width="0.1403%" height="15" fill="rgb(249,193,18)"/><text x="17.9364%" y="639.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (26 samples, 0.14%)</title><rect x="17.6864%" y="613" width="0.1403%" height="15" fill="rgb(209,133,39)"/><text x="17.9364%" y="623.50"></text></g><g><title>rayon_core::join::join_context (26 samples, 0.14%)</title><rect x="17.6864%" y="597" width="0.1403%" height="15" fill="rgb(232,100,14)"/><text x="17.9364%" y="607.50"></text></g><g><title>rayon_core::registry::in_worker (26 samples, 0.14%)</title><rect x="17.6864%" y="581" width="0.1403%" height="15" fill="rgb(224,185,1)"/><text x="17.9364%" y="591.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (26 samples, 0.14%)</title><rect x="17.6864%" y="565" width="0.1403%" height="15" fill="rgb(223,139,8)"/><text x="17.9364%" y="575.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (46 samples, 0.25%)</title><rect x="17.6540%" y="821" width="0.2482%" height="15" fill="rgb(232,213,38)"/><text x="17.9040%" y="831.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (46 samples, 0.25%)</title><rect x="17.6540%" y="805" width="0.2482%" height="15" fill="rgb(207,94,22)"/><text x="17.9040%" y="815.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (28 samples, 0.15%)</title><rect x="17.9238%" y="421" width="0.1511%" height="15" fill="rgb(219,183,54)"/><text x="18.1738%" y="431.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (28 samples, 0.15%)</title><rect x="17.9238%" y="405" width="0.1511%" height="15" fill="rgb(216,185,54)"/><text x="18.1738%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (28 samples, 0.15%)</title><rect x="17.9238%" y="389" width="0.1511%" height="15" fill="rgb(254,217,39)"/><text x="18.1738%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (28 samples, 0.15%)</title><rect x="17.9238%" y="373" width="0.1511%" height="15" fill="rgb(240,178,23)"/><text x="18.1738%" y="383.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (28 samples, 0.15%)</title><rect x="17.9238%" y="357" width="0.1511%" height="15" fill="rgb(218,11,47)"/><text x="18.1738%" y="367.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (28 samples, 0.15%)</title><rect x="17.9238%" y="341" width="0.1511%" height="15" fill="rgb(218,51,51)"/><text x="18.1738%" y="351.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (28 samples, 0.15%)</title><rect x="17.9238%" y="325" width="0.1511%" height="15" fill="rgb(238,126,27)"/><text x="18.1738%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.15%)</title><rect x="17.9238%" y="309" width="0.1511%" height="15" fill="rgb(249,202,22)"/><text x="18.1738%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (27 samples, 0.15%)</title><rect x="17.9292%" y="293" width="0.1457%" height="15" fill="rgb(254,195,49)"/><text x="18.1792%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (27 samples, 0.15%)</title><rect x="17.9292%" y="277" width="0.1457%" height="15" fill="rgb(208,123,14)"/><text x="18.1792%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (27 samples, 0.15%)</title><rect x="17.9292%" y="261" width="0.1457%" height="15" fill="rgb(224,200,8)"/><text x="18.1792%" y="271.50"></text></g><g><title>nenbody::update_camera_list::{{closure}} (27 samples, 0.15%)</title><rect x="17.9292%" y="245" width="0.1457%" height="15" fill="rgb(217,61,36)"/><text x="18.1792%" y="255.50"></text></g><g><title>nenbody::build_camera (26 samples, 0.14%)</title><rect x="17.9346%" y="229" width="0.1403%" height="15" fill="rgb(206,35,45)"/><text x="18.1846%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.11%)</title><rect x="18.0857%" y="245" width="0.1133%" height="15" fill="rgb(217,65,33)"/><text x="18.3357%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21 samples, 0.11%)</title><rect x="18.0857%" y="229" width="0.1133%" height="15" fill="rgb(222,158,48)"/><text x="18.3357%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (21 samples, 0.11%)</title><rect x="18.0857%" y="213" width="0.1133%" height="15" fill="rgb(254,2,54)"/><text x="18.3357%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (20 samples, 0.11%)</title><rect x="18.0911%" y="197" width="0.1079%" height="15" fill="rgb(250,143,38)"/><text x="18.3411%" y="207.50"></text></g><g><title>nenbody::update_camera_list::{{closure}} (19 samples, 0.10%)</title><rect x="18.0965%" y="181" width="0.1025%" height="15" fill="rgb(248,25,0)"/><text x="18.3465%" y="191.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (53 samples, 0.29%)</title><rect x="17.9184%" y="533" width="0.2860%" height="15" fill="rgb(206,152,27)"/><text x="18.1684%" y="543.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (52 samples, 0.28%)</title><rect x="17.9238%" y="517" width="0.2806%" height="15" fill="rgb(240,77,30)"/><text x="18.1738%" y="527.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (52 samples, 0.28%)</title><rect x="17.9238%" y="501" width="0.2806%" height="15" fill="rgb(231,5,3)"/><text x="18.1738%" y="511.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (52 samples, 0.28%)</title><rect x="17.9238%" y="485" width="0.2806%" height="15" fill="rgb(207,226,32)"/><text x="18.1738%" y="495.50"></text></g><g><title>rayon_core::join::join_context (52 samples, 0.28%)</title><rect x="17.9238%" y="469" width="0.2806%" height="15" fill="rgb(222,207,47)"/><text x="18.1738%" y="479.50"></text></g><g><title>rayon_core::registry::in_worker (52 samples, 0.28%)</title><rect x="17.9238%" y="453" width="0.2806%" height="15" fill="rgb(229,115,45)"/><text x="18.1738%" y="463.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (52 samples, 0.28%)</title><rect x="17.9238%" y="437" width="0.2806%" height="15" fill="rgb(224,191,6)"/><text x="18.1738%" y="447.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (22 samples, 0.12%)</title><rect x="18.0857%" y="421" width="0.1187%" height="15" fill="rgb(230,227,24)"/><text x="18.3357%" y="431.50"></text></g><g><title>std::panic::catch_unwind (22 samples, 0.12%)</title><rect x="18.0857%" y="405" width="0.1187%" height="15" fill="rgb(228,80,19)"/><text x="18.3357%" y="415.50"></text></g><g><title>std::panicking::try (22 samples, 0.12%)</title><rect x="18.0857%" y="389" width="0.1187%" height="15" fill="rgb(247,229,0)"/><text x="18.3357%" y="399.50"></text></g><g><title>std::panicking::try::do_call (22 samples, 0.12%)</title><rect x="18.0857%" y="373" width="0.1187%" height="15" fill="rgb(237,194,15)"/><text x="18.3357%" y="383.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22 samples, 0.12%)</title><rect x="18.0857%" y="357" width="0.1187%" height="15" fill="rgb(219,203,20)"/><text x="18.3357%" y="367.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (22 samples, 0.12%)</title><rect x="18.0857%" y="341" width="0.1187%" height="15" fill="rgb(234,128,8)"/><text x="18.3357%" y="351.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (22 samples, 0.12%)</title><rect x="18.0857%" y="325" width="0.1187%" height="15" fill="rgb(248,202,8)"/><text x="18.3357%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (22 samples, 0.12%)</title><rect x="18.0857%" y="309" width="0.1187%" height="15" fill="rgb(206,104,37)"/><text x="18.3357%" y="319.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (22 samples, 0.12%)</title><rect x="18.0857%" y="293" width="0.1187%" height="15" fill="rgb(223,8,27)"/><text x="18.3357%" y="303.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (22 samples, 0.12%)</title><rect x="18.0857%" y="277" width="0.1187%" height="15" fill="rgb(216,217,28)"/><text x="18.3357%" y="287.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (22 samples, 0.12%)</title><rect x="18.0857%" y="261" width="0.1187%" height="15" fill="rgb(249,199,1)"/><text x="18.3357%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.20%)</title><rect x="18.2206%" y="245" width="0.1996%" height="15" fill="rgb(240,85,17)"/><text x="18.4706%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (37 samples, 0.20%)</title><rect x="18.2206%" y="229" width="0.1996%" height="15" fill="rgb(206,108,45)"/><text x="18.4706%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (37 samples, 0.20%)</title><rect x="18.2206%" y="213" width="0.1996%" height="15" fill="rgb(245,210,41)"/><text x="18.4706%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (37 samples, 0.20%)</title><rect x="18.2206%" y="197" width="0.1996%" height="15" fill="rgb(206,13,37)"/><text x="18.4706%" y="207.50"></text></g><g><title>nenbody::update_camera_list::{{closure}} (24 samples, 0.13%)</title><rect x="18.2907%" y="181" width="0.1295%" height="15" fill="rgb(250,61,18)"/><text x="18.5407%" y="191.50"></text></g><g><title>nenbody::build_camera (22 samples, 0.12%)</title><rect x="18.3015%" y="165" width="0.1187%" height="15" fill="rgb(235,172,48)"/><text x="18.5515%" y="175.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (38 samples, 0.21%)</title><rect x="18.2206%" y="357" width="0.2050%" height="15" fill="rgb(249,201,17)"/><text x="18.4706%" y="367.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (38 samples, 0.21%)</title><rect x="18.2206%" y="341" width="0.2050%" height="15" fill="rgb(219,208,6)"/><text x="18.4706%" y="351.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (38 samples, 0.21%)</title><rect x="18.2206%" y="325" width="0.2050%" height="15" fill="rgb(248,31,23)"/><text x="18.4706%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (38 samples, 0.21%)</title><rect x="18.2206%" y="309" width="0.2050%" height="15" fill="rgb(245,15,42)"/><text x="18.4706%" y="319.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (38 samples, 0.21%)</title><rect x="18.2206%" y="293" width="0.2050%" height="15" fill="rgb(222,217,39)"/><text x="18.4706%" y="303.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (38 samples, 0.21%)</title><rect x="18.2206%" y="277" width="0.2050%" height="15" fill="rgb(210,219,27)"/><text x="18.4706%" y="287.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (38 samples, 0.21%)</title><rect x="18.2206%" y="261" width="0.2050%" height="15" fill="rgb(252,166,36)"/><text x="18.4706%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.10%)</title><rect x="18.4256%" y="181" width="0.1025%" height="15" fill="rgb(245,132,34)"/><text x="18.6756%" y="191.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (114 samples, 0.62%)</title><rect x="17.9184%" y="549" width="0.6151%" height="15" fill="rgb(236,54,3)"/><text x="18.1684%" y="559.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (59 samples, 0.32%)</title><rect x="18.2152%" y="533" width="0.3183%" height="15" fill="rgb(241,173,43)"/><text x="18.4652%" y="543.50"></text></g><g><title>std::panic::catch_unwind (59 samples, 0.32%)</title><rect x="18.2152%" y="517" width="0.3183%" height="15" fill="rgb(215,190,9)"/><text x="18.4652%" y="527.50"></text></g><g><title>std::panicking::try (59 samples, 0.32%)</title><rect x="18.2152%" y="501" width="0.3183%" height="15" fill="rgb(242,101,16)"/><text x="18.4652%" y="511.50"></text></g><g><title>std::panicking::try::do_call (59 samples, 0.32%)</title><rect x="18.2152%" y="485" width="0.3183%" height="15" fill="rgb(223,190,21)"/><text x="18.4652%" y="495.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (59 samples, 0.32%)</title><rect x="18.2152%" y="469" width="0.3183%" height="15" fill="rgb(215,228,25)"/><text x="18.4652%" y="479.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (59 samples, 0.32%)</title><rect x="18.2152%" y="453" width="0.3183%" height="15" fill="rgb(225,36,22)"/><text x="18.4652%" y="463.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (59 samples, 0.32%)</title><rect x="18.2152%" y="437" width="0.3183%" height="15" fill="rgb(251,106,46)"/><text x="18.4652%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (59 samples, 0.32%)</title><rect x="18.2152%" y="421" width="0.3183%" height="15" fill="rgb(208,90,1)"/><text x="18.4652%" y="431.50"></text></g><g><title>rayon_core::join::join_context (58 samples, 0.31%)</title><rect x="18.2206%" y="405" width="0.3129%" height="15" fill="rgb(243,10,4)"/><text x="18.4706%" y="415.50"></text></g><g><title>rayon_core::registry::in_worker (58 samples, 0.31%)</title><rect x="18.2206%" y="389" width="0.3129%" height="15" fill="rgb(212,137,27)"/><text x="18.4706%" y="399.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (58 samples, 0.31%)</title><rect x="18.2206%" y="373" width="0.3129%" height="15" fill="rgb(231,220,49)"/><text x="18.4706%" y="383.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (20 samples, 0.11%)</title><rect x="18.4256%" y="357" width="0.1079%" height="15" fill="rgb(237,96,20)"/><text x="18.6756%" y="367.50"></text></g><g><title>std::panic::catch_unwind (20 samples, 0.11%)</title><rect x="18.4256%" y="341" width="0.1079%" height="15" fill="rgb(239,229,30)"/><text x="18.6756%" y="351.50"></text></g><g><title>std::panicking::try (20 samples, 0.11%)</title><rect x="18.4256%" y="325" width="0.1079%" height="15" fill="rgb(219,65,33)"/><text x="18.6756%" y="335.50"></text></g><g><title>std::panicking::try::do_call (20 samples, 0.11%)</title><rect x="18.4256%" y="309" width="0.1079%" height="15" fill="rgb(243,134,7)"/><text x="18.6756%" y="319.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20 samples, 0.11%)</title><rect x="18.4256%" y="293" width="0.1079%" height="15" fill="rgb(216,177,54)"/><text x="18.6756%" y="303.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (20 samples, 0.11%)</title><rect x="18.4256%" y="277" width="0.1079%" height="15" fill="rgb(211,160,20)"/><text x="18.6756%" y="287.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (20 samples, 0.11%)</title><rect x="18.4256%" y="261" width="0.1079%" height="15" fill="rgb(239,85,39)"/><text x="18.6756%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.11%)</title><rect x="18.4256%" y="245" width="0.1079%" height="15" fill="rgb(232,125,22)"/><text x="18.6756%" y="255.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (20 samples, 0.11%)</title><rect x="18.4256%" y="229" width="0.1079%" height="15" fill="rgb(244,57,34)"/><text x="18.6756%" y="239.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (20 samples, 0.11%)</title><rect x="18.4256%" y="213" width="0.1079%" height="15" fill="rgb(214,203,32)"/><text x="18.6756%" y="223.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (20 samples, 0.11%)</title><rect x="18.4256%" y="197" width="0.1079%" height="15" fill="rgb(207,58,43)"/><text x="18.6756%" y="207.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (116 samples, 0.63%)</title><rect x="17.9130%" y="645" width="0.6259%" height="15" fill="rgb(215,193,15)"/><text x="18.1630%" y="655.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (115 samples, 0.62%)</title><rect x="17.9184%" y="629" width="0.6205%" height="15" fill="rgb(232,15,44)"/><text x="18.1684%" y="639.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (115 samples, 0.62%)</title><rect x="17.9184%" y="613" width="0.6205%" height="15" fill="rgb(212,3,48)"/><text x="18.1684%" y="623.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (115 samples, 0.62%)</title><rect x="17.9184%" y="597" width="0.6205%" height="15" fill="rgb(218,128,7)"/><text x="18.1684%" y="607.50"></text></g><g><title>rayon_core::join::join_context (115 samples, 0.62%)</title><rect x="17.9184%" y="581" width="0.6205%" height="15" fill="rgb(226,216,39)"/><text x="18.1684%" y="591.50"></text></g><g><title>rayon_core::registry::in_worker (115 samples, 0.62%)</title><rect x="17.9184%" y="565" width="0.6205%" height="15" fill="rgb(243,47,51)"/><text x="18.1684%" y="575.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (22 samples, 0.12%)</title><rect x="18.5875%" y="357" width="0.1187%" height="15" fill="rgb(241,183,40)"/><text x="18.8375%" y="367.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (22 samples, 0.12%)</title><rect x="18.5875%" y="341" width="0.1187%" height="15" fill="rgb(231,217,32)"/><text x="18.8375%" y="351.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (22 samples, 0.12%)</title><rect x="18.5875%" y="325" width="0.1187%" height="15" fill="rgb(229,61,38)"/><text x="18.8375%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (22 samples, 0.12%)</title><rect x="18.5875%" y="309" width="0.1187%" height="15" fill="rgb(225,210,5)"/><text x="18.8375%" y="319.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (22 samples, 0.12%)</title><rect x="18.5875%" y="293" width="0.1187%" height="15" fill="rgb(231,79,45)"/><text x="18.8375%" y="303.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (22 samples, 0.12%)</title><rect x="18.5875%" y="277" width="0.1187%" height="15" fill="rgb(224,100,7)"/><text x="18.8375%" y="287.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (22 samples, 0.12%)</title><rect x="18.5875%" y="261" width="0.1187%" height="15" fill="rgb(241,198,18)"/><text x="18.8375%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.12%)</title><rect x="18.5875%" y="245" width="0.1187%" height="15" fill="rgb(252,97,53)"/><text x="18.8375%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22 samples, 0.12%)</title><rect x="18.5875%" y="229" width="0.1187%" height="15" fill="rgb(220,88,7)"/><text x="18.8375%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (22 samples, 0.12%)</title><rect x="18.5875%" y="213" width="0.1187%" height="15" fill="rgb(213,176,14)"/><text x="18.8375%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (22 samples, 0.12%)</title><rect x="18.5875%" y="197" width="0.1187%" height="15" fill="rgb(246,73,7)"/><text x="18.8375%" y="207.50"></text></g><g><title>nenbody::update_camera_list::{{closure}} (20 samples, 0.11%)</title><rect x="18.5983%" y="181" width="0.1079%" height="15" fill="rgb(245,64,36)"/><text x="18.8483%" y="191.50"></text></g><g><title>nenbody::build_camera (19 samples, 0.10%)</title><rect x="18.6036%" y="165" width="0.1025%" height="15" fill="rgb(245,80,10)"/><text x="18.8536%" y="175.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (64 samples, 0.35%)</title><rect x="18.5821%" y="469" width="0.3453%" height="15" fill="rgb(232,107,50)"/><text x="18.8321%" y="479.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (63 samples, 0.34%)</title><rect x="18.5875%" y="453" width="0.3399%" height="15" fill="rgb(253,3,0)"/><text x="18.8375%" y="463.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (63 samples, 0.34%)</title><rect x="18.5875%" y="437" width="0.3399%" height="15" fill="rgb(212,99,53)"/><text x="18.8375%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (63 samples, 0.34%)</title><rect x="18.5875%" y="421" width="0.3399%" height="15" fill="rgb(249,111,54)"/><text x="18.8375%" y="431.50"></text></g><g><title>rayon_core::join::join_context (63 samples, 0.34%)</title><rect x="18.5875%" y="405" width="0.3399%" height="15" fill="rgb(249,55,30)"/><text x="18.8375%" y="415.50"></text></g><g><title>rayon_core::registry::in_worker (63 samples, 0.34%)</title><rect x="18.5875%" y="389" width="0.3399%" height="15" fill="rgb(237,47,42)"/><text x="18.8375%" y="399.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (63 samples, 0.34%)</title><rect x="18.5875%" y="373" width="0.3399%" height="15" fill="rgb(211,20,18)"/><text x="18.8375%" y="383.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (39 samples, 0.21%)</title><rect x="18.7170%" y="357" width="0.2104%" height="15" fill="rgb(231,203,46)"/><text x="18.9670%" y="367.50"></text></g><g><title>std::panic::catch_unwind (39 samples, 0.21%)</title><rect x="18.7170%" y="341" width="0.2104%" height="15" fill="rgb(237,142,3)"/><text x="18.9670%" y="351.50"></text></g><g><title>std::panicking::try (39 samples, 0.21%)</title><rect x="18.7170%" y="325" width="0.2104%" height="15" fill="rgb(241,107,1)"/><text x="18.9670%" y="335.50"></text></g><g><title>std::panicking::try::do_call (39 samples, 0.21%)</title><rect x="18.7170%" y="309" width="0.2104%" height="15" fill="rgb(229,83,13)"/><text x="18.9670%" y="319.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (39 samples, 0.21%)</title><rect x="18.7170%" y="293" width="0.2104%" height="15" fill="rgb(241,91,40)"/><text x="18.9670%" y="303.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (39 samples, 0.21%)</title><rect x="18.7170%" y="277" width="0.2104%" height="15" fill="rgb(225,3,45)"/><text x="18.9670%" y="287.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (39 samples, 0.21%)</title><rect x="18.7170%" y="261" width="0.2104%" height="15" fill="rgb(244,223,14)"/><text x="18.9670%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (39 samples, 0.21%)</title><rect x="18.7170%" y="245" width="0.2104%" height="15" fill="rgb(224,124,37)"/><text x="18.9670%" y="255.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (39 samples, 0.21%)</title><rect x="18.7170%" y="229" width="0.2104%" height="15" fill="rgb(251,171,30)"/><text x="18.9670%" y="239.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (39 samples, 0.21%)</title><rect x="18.7170%" y="213" width="0.2104%" height="15" fill="rgb(236,46,54)"/><text x="18.9670%" y="223.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (39 samples, 0.21%)</title><rect x="18.7170%" y="197" width="0.2104%" height="15" fill="rgb(245,213,5)"/><text x="18.9670%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.21%)</title><rect x="18.7223%" y="181" width="0.2050%" height="15" fill="rgb(230,144,27)"/><text x="18.9723%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (38 samples, 0.21%)</title><rect x="18.7223%" y="165" width="0.2050%" height="15" fill="rgb(220,86,6)"/><text x="18.9723%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (38 samples, 0.21%)</title><rect x="18.7223%" y="149" width="0.2050%" height="15" fill="rgb(240,20,13)"/><text x="18.9723%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (38 samples, 0.21%)</title><rect x="18.7223%" y="133" width="0.2050%" height="15" fill="rgb(217,89,34)"/><text x="18.9723%" y="143.50"></text></g><g><title>nenbody::update_camera_list::{{closure}} (25 samples, 0.13%)</title><rect x="18.7925%" y="117" width="0.1349%" height="15" fill="rgb(229,13,5)"/><text x="19.0425%" y="127.50"></text></g><g><title>nenbody::build_camera (23 samples, 0.12%)</title><rect x="18.8033%" y="101" width="0.1241%" height="15" fill="rgb(244,67,35)"/><text x="19.0533%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.13%)</title><rect x="18.9705%" y="181" width="0.1295%" height="15" fill="rgb(221,40,2)"/><text x="19.2205%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (24 samples, 0.13%)</title><rect x="18.9705%" y="165" width="0.1295%" height="15" fill="rgb(237,157,21)"/><text x="19.2205%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (24 samples, 0.13%)</title><rect x="18.9705%" y="149" width="0.1295%" height="15" fill="rgb(222,94,11)"/><text x="19.2205%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (24 samples, 0.13%)</title><rect x="18.9705%" y="133" width="0.1295%" height="15" fill="rgb(249,113,6)"/><text x="19.2205%" y="143.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (27 samples, 0.15%)</title><rect x="18.9597%" y="293" width="0.1457%" height="15" fill="rgb(238,137,36)"/><text x="19.2097%" y="303.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (27 samples, 0.15%)</title><rect x="18.9597%" y="277" width="0.1457%" height="15" fill="rgb(210,102,26)"/><text x="19.2097%" y="287.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (27 samples, 0.15%)</title><rect x="18.9597%" y="261" width="0.1457%" height="15" fill="rgb(218,30,30)"/><text x="19.2097%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (27 samples, 0.15%)</title><rect x="18.9597%" y="245" width="0.1457%" height="15" fill="rgb(214,67,26)"/><text x="19.2097%" y="255.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (27 samples, 0.15%)</title><rect x="18.9597%" y="229" width="0.1457%" height="15" fill="rgb(251,9,53)"/><text x="19.2097%" y="239.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (27 samples, 0.15%)</title><rect x="18.9597%" y="213" width="0.1457%" height="15" fill="rgb(228,204,25)"/><text x="19.2097%" y="223.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (26 samples, 0.14%)</title><rect x="18.9651%" y="197" width="0.1403%" height="15" fill="rgb(207,153,8)"/><text x="19.2151%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.12%)</title><rect x="19.1108%" y="117" width="0.1187%" height="15" fill="rgb(242,9,16)"/><text x="19.3608%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22 samples, 0.12%)</title><rect x="19.1108%" y="101" width="0.1187%" height="15" fill="rgb(217,211,10)"/><text x="19.3608%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (22 samples, 0.12%)</title><rect x="19.1108%" y="85" width="0.1187%" height="15" fill="rgb(219,228,52)"/><text x="19.3608%" y="95.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (22 samples, 0.12%)</title><rect x="19.1108%" y="69" width="0.1187%" height="15" fill="rgb(231,92,29)"/><text x="19.3608%" y="79.50"></text></g><g><title>nenbody::update_camera_list::{{closure}} (20 samples, 0.11%)</title><rect x="19.1216%" y="53" width="0.1079%" height="15" fill="rgb(232,8,23)"/><text x="19.3716%" y="63.50"></text></g><g><title>nenbody::build_camera (20 samples, 0.11%)</title><rect x="19.1216%" y="37" width="0.1079%" height="15" fill="rgb(216,211,34)"/><text x="19.3716%" y="47.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (52 samples, 0.28%)</title><rect x="18.9544%" y="309" width="0.2806%" height="15" fill="rgb(236,151,0)"/><text x="19.2044%" y="319.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (24 samples, 0.13%)</title><rect x="19.1054%" y="293" width="0.1295%" height="15" fill="rgb(209,168,3)"/><text x="19.3554%" y="303.50"></text></g><g><title>std::panic::catch_unwind (24 samples, 0.13%)</title><rect x="19.1054%" y="277" width="0.1295%" height="15" fill="rgb(208,129,28)"/><text x="19.3554%" y="287.50"></text></g><g><title>std::panicking::try (24 samples, 0.13%)</title><rect x="19.1054%" y="261" width="0.1295%" height="15" fill="rgb(229,78,22)"/><text x="19.3554%" y="271.50"></text></g><g><title>std::panicking::try::do_call (24 samples, 0.13%)</title><rect x="19.1054%" y="245" width="0.1295%" height="15" fill="rgb(228,187,13)"/><text x="19.3554%" y="255.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 0.13%)</title><rect x="19.1054%" y="229" width="0.1295%" height="15" fill="rgb(240,119,24)"/><text x="19.3554%" y="239.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (24 samples, 0.13%)</title><rect x="19.1054%" y="213" width="0.1295%" height="15" fill="rgb(209,194,42)"/><text x="19.3554%" y="223.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (24 samples, 0.13%)</title><rect x="19.1054%" y="197" width="0.1295%" height="15" fill="rgb(247,200,46)"/><text x="19.3554%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (24 samples, 0.13%)</title><rect x="19.1054%" y="181" width="0.1295%" height="15" fill="rgb(218,76,16)"/><text x="19.3554%" y="191.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (24 samples, 0.13%)</title><rect x="19.1054%" y="165" width="0.1295%" height="15" fill="rgb(225,21,48)"/><text x="19.3554%" y="175.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (24 samples, 0.13%)</title><rect x="19.1054%" y="149" width="0.1295%" height="15" fill="rgb(239,223,50)"/><text x="19.3554%" y="159.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (24 samples, 0.13%)</title><rect x="19.1054%" y="133" width="0.1295%" height="15" fill="rgb(244,45,21)"/><text x="19.3554%" y="143.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (610 samples, 3.29%)</title><rect x="15.9545%" y="1093" width="3.2912%" height="15" fill="rgb(232,33,43)"/><text x="16.2045%" y="1103.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (610 samples, 3.29%)</title><rect x="15.9545%" y="1077" width="3.2912%" height="15" fill="rgb(209,8,3)"/><text x="16.2045%" y="1087.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (609 samples, 3.29%)</title><rect x="15.9599%" y="1061" width="3.2859%" height="15" fill="rgb(214,25,53)"/><text x="16.2099%" y="1071.50">ray..</text></g><g><title>rayon_core::join::join_context (609 samples, 3.29%)</title><rect x="15.9599%" y="1045" width="3.2859%" height="15" fill="rgb(254,186,54)"/><text x="16.2099%" y="1055.50">ray..</text></g><g><title>rayon_core::registry::in_worker (609 samples, 3.29%)</title><rect x="15.9599%" y="1029" width="3.2859%" height="15" fill="rgb(208,174,49)"/><text x="16.2099%" y="1039.50">ray..</text></g><g><title>rayon_core::join::join_context::{{closure}} (608 samples, 3.28%)</title><rect x="15.9653%" y="1013" width="3.2805%" height="15" fill="rgb(233,191,51)"/><text x="16.2153%" y="1023.50">ray..</text></g><g><title>rayon_core::unwind::halt_unwinding (441 samples, 2.38%)</title><rect x="16.8663%" y="997" width="2.3794%" height="15" fill="rgb(222,134,10)"/><text x="17.1163%" y="1007.50">ra..</text></g><g><title>std::panic::catch_unwind (441 samples, 2.38%)</title><rect x="16.8663%" y="981" width="2.3794%" height="15" fill="rgb(230,226,20)"/><text x="17.1163%" y="991.50">st..</text></g><g><title>std::panicking::try (441 samples, 2.38%)</title><rect x="16.8663%" y="965" width="2.3794%" height="15" fill="rgb(251,111,25)"/><text x="17.1163%" y="975.50">st..</text></g><g><title>std::panicking::try::do_call (441 samples, 2.38%)</title><rect x="16.8663%" y="949" width="2.3794%" height="15" fill="rgb(224,40,46)"/><text x="17.1163%" y="959.50">st..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (441 samples, 2.38%)</title><rect x="16.8663%" y="933" width="2.3794%" height="15" fill="rgb(236,108,47)"/><text x="17.1163%" y="943.50">&lt;s..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (441 samples, 2.38%)</title><rect x="16.8663%" y="917" width="2.3794%" height="15" fill="rgb(234,93,0)"/><text x="17.1163%" y="927.50">ra..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (441 samples, 2.38%)</title><rect x="16.8663%" y="901" width="2.3794%" height="15" fill="rgb(224,213,32)"/><text x="17.1163%" y="911.50">ra..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (441 samples, 2.38%)</title><rect x="16.8663%" y="885" width="2.3794%" height="15" fill="rgb(251,11,48)"/><text x="17.1163%" y="895.50">ra..</text></g><g><title>rayon_core::join::join_context (440 samples, 2.37%)</title><rect x="16.8717%" y="869" width="2.3740%" height="15" fill="rgb(236,173,5)"/><text x="17.1217%" y="879.50">ra..</text></g><g><title>rayon_core::registry::in_worker (440 samples, 2.37%)</title><rect x="16.8717%" y="853" width="2.3740%" height="15" fill="rgb(230,95,12)"/><text x="17.1217%" y="863.50">ra..</text></g><g><title>rayon_core::join::join_context::{{closure}} (440 samples, 2.37%)</title><rect x="16.8717%" y="837" width="2.3740%" height="15" fill="rgb(232,209,1)"/><text x="17.1217%" y="847.50">ra..</text></g><g><title>rayon_core::unwind::halt_unwinding (249 samples, 1.34%)</title><rect x="17.9022%" y="821" width="1.3435%" height="15" fill="rgb(232,6,1)"/><text x="18.1522%" y="831.50"></text></g><g><title>std::panic::catch_unwind (249 samples, 1.34%)</title><rect x="17.9022%" y="805" width="1.3435%" height="15" fill="rgb(210,224,50)"/><text x="18.1522%" y="815.50"></text></g><g><title>std::panicking::try (249 samples, 1.34%)</title><rect x="17.9022%" y="789" width="1.3435%" height="15" fill="rgb(228,127,35)"/><text x="18.1522%" y="799.50"></text></g><g><title>std::panicking::try::do_call (249 samples, 1.34%)</title><rect x="17.9022%" y="773" width="1.3435%" height="15" fill="rgb(245,102,45)"/><text x="18.1522%" y="783.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (249 samples, 1.34%)</title><rect x="17.9022%" y="757" width="1.3435%" height="15" fill="rgb(214,1,49)"/><text x="18.1522%" y="767.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (249 samples, 1.34%)</title><rect x="17.9022%" y="741" width="1.3435%" height="15" fill="rgb(226,163,40)"/><text x="18.1522%" y="751.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (249 samples, 1.34%)</title><rect x="17.9022%" y="725" width="1.3435%" height="15" fill="rgb(239,212,28)"/><text x="18.1522%" y="735.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (248 samples, 1.34%)</title><rect x="17.9076%" y="709" width="1.3381%" height="15" fill="rgb(220,20,13)"/><text x="18.1576%" y="719.50"></text></g><g><title>rayon_core::join::join_context (247 samples, 1.33%)</title><rect x="17.9130%" y="693" width="1.3327%" height="15" fill="rgb(210,164,35)"/><text x="18.1630%" y="703.50"></text></g><g><title>rayon_core::registry::in_worker (247 samples, 1.33%)</title><rect x="17.9130%" y="677" width="1.3327%" height="15" fill="rgb(248,109,41)"/><text x="18.1630%" y="687.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (247 samples, 1.33%)</title><rect x="17.9130%" y="661" width="1.3327%" height="15" fill="rgb(238,23,50)"/><text x="18.1630%" y="671.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (125 samples, 0.67%)</title><rect x="18.5713%" y="645" width="0.6744%" height="15" fill="rgb(211,48,49)"/><text x="18.8213%" y="655.50"></text></g><g><title>std::panic::catch_unwind (125 samples, 0.67%)</title><rect x="18.5713%" y="629" width="0.6744%" height="15" fill="rgb(223,36,21)"/><text x="18.8213%" y="639.50"></text></g><g><title>std::panicking::try (125 samples, 0.67%)</title><rect x="18.5713%" y="613" width="0.6744%" height="15" fill="rgb(207,123,46)"/><text x="18.8213%" y="623.50"></text></g><g><title>std::panicking::try::do_call (125 samples, 0.67%)</title><rect x="18.5713%" y="597" width="0.6744%" height="15" fill="rgb(240,218,32)"/><text x="18.8213%" y="607.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (125 samples, 0.67%)</title><rect x="18.5713%" y="581" width="0.6744%" height="15" fill="rgb(252,5,43)"/><text x="18.8213%" y="591.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (125 samples, 0.67%)</title><rect x="18.5713%" y="565" width="0.6744%" height="15" fill="rgb(252,84,19)"/><text x="18.8213%" y="575.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (125 samples, 0.67%)</title><rect x="18.5713%" y="549" width="0.6744%" height="15" fill="rgb(243,152,39)"/><text x="18.8213%" y="559.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (125 samples, 0.67%)</title><rect x="18.5713%" y="533" width="0.6744%" height="15" fill="rgb(234,160,15)"/><text x="18.8213%" y="543.50"></text></g><g><title>rayon_core::join::join_context (125 samples, 0.67%)</title><rect x="18.5713%" y="517" width="0.6744%" height="15" fill="rgb(237,34,20)"/><text x="18.8213%" y="527.50"></text></g><g><title>rayon_core::registry::in_worker (124 samples, 0.67%)</title><rect x="18.5767%" y="501" width="0.6690%" height="15" fill="rgb(229,97,13)"/><text x="18.8267%" y="511.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (124 samples, 0.67%)</title><rect x="18.5767%" y="485" width="0.6690%" height="15" fill="rgb(234,71,50)"/><text x="18.8267%" y="495.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (55 samples, 0.30%)</title><rect x="18.9490%" y="469" width="0.2968%" height="15" fill="rgb(253,155,4)"/><text x="19.1990%" y="479.50"></text></g><g><title>std::panic::catch_unwind (55 samples, 0.30%)</title><rect x="18.9490%" y="453" width="0.2968%" height="15" fill="rgb(222,185,37)"/><text x="19.1990%" y="463.50"></text></g><g><title>std::panicking::try (55 samples, 0.30%)</title><rect x="18.9490%" y="437" width="0.2968%" height="15" fill="rgb(251,177,13)"/><text x="19.1990%" y="447.50"></text></g><g><title>std::panicking::try::do_call (55 samples, 0.30%)</title><rect x="18.9490%" y="421" width="0.2968%" height="15" fill="rgb(250,179,40)"/><text x="19.1990%" y="431.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (55 samples, 0.30%)</title><rect x="18.9490%" y="405" width="0.2968%" height="15" fill="rgb(242,44,2)"/><text x="19.1990%" y="415.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (55 samples, 0.30%)</title><rect x="18.9490%" y="389" width="0.2968%" height="15" fill="rgb(216,177,13)"/><text x="19.1990%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (55 samples, 0.30%)</title><rect x="18.9490%" y="373" width="0.2968%" height="15" fill="rgb(216,106,43)"/><text x="19.1990%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (55 samples, 0.30%)</title><rect x="18.9490%" y="357" width="0.2968%" height="15" fill="rgb(216,183,2)"/><text x="19.1990%" y="367.50"></text></g><g><title>rayon_core::join::join_context (54 samples, 0.29%)</title><rect x="18.9544%" y="341" width="0.2914%" height="15" fill="rgb(249,75,3)"/><text x="19.2044%" y="351.50"></text></g><g><title>rayon_core::registry::in_worker (54 samples, 0.29%)</title><rect x="18.9544%" y="325" width="0.2914%" height="15" fill="rgb(219,67,39)"/><text x="19.2044%" y="335.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (697 samples, 3.76%)</title><rect x="15.9545%" y="1125" width="3.7607%" height="15" fill="rgb(253,228,2)"/><text x="16.2045%" y="1135.50">&lt;std..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (697 samples, 3.76%)</title><rect x="15.9545%" y="1109" width="3.7607%" height="15" fill="rgb(235,138,27)"/><text x="16.2045%" y="1119.50">&lt;ray..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (87 samples, 0.47%)</title><rect x="19.2457%" y="1093" width="0.4694%" height="15" fill="rgb(236,97,51)"/><text x="19.4957%" y="1103.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (87 samples, 0.47%)</title><rect x="19.2457%" y="1077" width="0.4694%" height="15" fill="rgb(240,80,30)"/><text x="19.4957%" y="1087.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (77 samples, 0.42%)</title><rect x="19.2997%" y="1061" width="0.4155%" height="15" fill="rgb(230,178,19)"/><text x="19.5497%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (77 samples, 0.42%)</title><rect x="19.2997%" y="1045" width="0.4155%" height="15" fill="rgb(210,190,27)"/><text x="19.5497%" y="1055.50"></text></g><g><title>std::panicking::try (77 samples, 0.42%)</title><rect x="19.2997%" y="1029" width="0.4155%" height="15" fill="rgb(222,107,31)"/><text x="19.5497%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (77 samples, 0.42%)</title><rect x="19.2997%" y="1013" width="0.4155%" height="15" fill="rgb(216,127,34)"/><text x="19.5497%" y="1023.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77 samples, 0.42%)</title><rect x="19.2997%" y="997" width="0.4155%" height="15" fill="rgb(234,116,52)"/><text x="19.5497%" y="1007.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (77 samples, 0.42%)</title><rect x="19.2997%" y="981" width="0.4155%" height="15" fill="rgb(222,124,15)"/><text x="19.5497%" y="991.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (77 samples, 0.42%)</title><rect x="19.2997%" y="965" width="0.4155%" height="15" fill="rgb(231,179,28)"/><text x="19.5497%" y="975.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (77 samples, 0.42%)</title><rect x="19.2997%" y="949" width="0.4155%" height="15" fill="rgb(226,93,45)"/><text x="19.5497%" y="959.50"></text></g><g><title>rayon_core::join::join_context (76 samples, 0.41%)</title><rect x="19.3051%" y="933" width="0.4101%" height="15" fill="rgb(215,8,51)"/><text x="19.5551%" y="943.50"></text></g><g><title>rayon_core::registry::in_worker (76 samples, 0.41%)</title><rect x="19.3051%" y="917" width="0.4101%" height="15" fill="rgb(223,106,5)"/><text x="19.5551%" y="927.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (76 samples, 0.41%)</title><rect x="19.3051%" y="901" width="0.4101%" height="15" fill="rgb(250,191,5)"/><text x="19.5551%" y="911.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (55 samples, 0.30%)</title><rect x="19.4184%" y="885" width="0.2968%" height="15" fill="rgb(242,132,44)"/><text x="19.6684%" y="895.50"></text></g><g><title>std::panic::catch_unwind (55 samples, 0.30%)</title><rect x="19.4184%" y="869" width="0.2968%" height="15" fill="rgb(251,152,29)"/><text x="19.6684%" y="879.50"></text></g><g><title>std::panicking::try (55 samples, 0.30%)</title><rect x="19.4184%" y="853" width="0.2968%" height="15" fill="rgb(218,179,5)"/><text x="19.6684%" y="863.50"></text></g><g><title>std::panicking::try::do_call (55 samples, 0.30%)</title><rect x="19.4184%" y="837" width="0.2968%" height="15" fill="rgb(227,67,19)"/><text x="19.6684%" y="847.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (55 samples, 0.30%)</title><rect x="19.4184%" y="821" width="0.2968%" height="15" fill="rgb(233,119,31)"/><text x="19.6684%" y="831.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (55 samples, 0.30%)</title><rect x="19.4184%" y="805" width="0.2968%" height="15" fill="rgb(241,120,22)"/><text x="19.6684%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (55 samples, 0.30%)</title><rect x="19.4184%" y="789" width="0.2968%" height="15" fill="rgb(224,102,30)"/><text x="19.6684%" y="799.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (55 samples, 0.30%)</title><rect x="19.4184%" y="773" width="0.2968%" height="15" fill="rgb(210,164,37)"/><text x="19.6684%" y="783.50"></text></g><g><title>rayon_core::join::join_context (54 samples, 0.29%)</title><rect x="19.4238%" y="757" width="0.2914%" height="15" fill="rgb(226,191,16)"/><text x="19.6738%" y="767.50"></text></g><g><title>rayon_core::registry::in_worker (54 samples, 0.29%)</title><rect x="19.4238%" y="741" width="0.2914%" height="15" fill="rgb(214,40,45)"/><text x="19.6738%" y="751.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (54 samples, 0.29%)</title><rect x="19.4238%" y="725" width="0.2914%" height="15" fill="rgb(244,29,26)"/><text x="19.6738%" y="735.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (30 samples, 0.16%)</title><rect x="19.5533%" y="709" width="0.1619%" height="15" fill="rgb(216,16,5)"/><text x="19.8033%" y="719.50"></text></g><g><title>std::panic::catch_unwind (30 samples, 0.16%)</title><rect x="19.5533%" y="693" width="0.1619%" height="15" fill="rgb(249,76,35)"/><text x="19.8033%" y="703.50"></text></g><g><title>std::panicking::try (30 samples, 0.16%)</title><rect x="19.5533%" y="677" width="0.1619%" height="15" fill="rgb(207,11,44)"/><text x="19.8033%" y="687.50"></text></g><g><title>std::panicking::try::do_call (30 samples, 0.16%)</title><rect x="19.5533%" y="661" width="0.1619%" height="15" fill="rgb(228,190,49)"/><text x="19.8033%" y="671.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (30 samples, 0.16%)</title><rect x="19.5533%" y="645" width="0.1619%" height="15" fill="rgb(214,173,12)"/><text x="19.8033%" y="655.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (30 samples, 0.16%)</title><rect x="19.5533%" y="629" width="0.1619%" height="15" fill="rgb(218,26,35)"/><text x="19.8033%" y="639.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (30 samples, 0.16%)</title><rect x="19.5533%" y="613" width="0.1619%" height="15" fill="rgb(220,200,19)"/><text x="19.8033%" y="623.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (30 samples, 0.16%)</title><rect x="19.5533%" y="597" width="0.1619%" height="15" fill="rgb(239,95,49)"/><text x="19.8033%" y="607.50"></text></g><g><title>rayon_core::join::join_context (30 samples, 0.16%)</title><rect x="19.5533%" y="581" width="0.1619%" height="15" fill="rgb(235,85,53)"/><text x="19.8033%" y="591.50"></text></g><g><title>rayon_core::registry::in_worker (30 samples, 0.16%)</title><rect x="19.5533%" y="565" width="0.1619%" height="15" fill="rgb(233,133,31)"/><text x="19.8033%" y="575.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (30 samples, 0.16%)</title><rect x="19.5533%" y="549" width="0.1619%" height="15" fill="rgb(218,25,20)"/><text x="19.8033%" y="559.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (21 samples, 0.11%)</title><rect x="19.6018%" y="533" width="0.1133%" height="15" fill="rgb(252,210,38)"/><text x="19.8518%" y="543.50"></text></g><g><title>std::panic::catch_unwind (21 samples, 0.11%)</title><rect x="19.6018%" y="517" width="0.1133%" height="15" fill="rgb(242,134,21)"/><text x="19.8518%" y="527.50"></text></g><g><title>std::panicking::try (21 samples, 0.11%)</title><rect x="19.6018%" y="501" width="0.1133%" height="15" fill="rgb(213,28,48)"/><text x="19.8518%" y="511.50"></text></g><g><title>std::panicking::try::do_call (21 samples, 0.11%)</title><rect x="19.6018%" y="485" width="0.1133%" height="15" fill="rgb(250,196,2)"/><text x="19.8518%" y="495.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (21 samples, 0.11%)</title><rect x="19.6018%" y="469" width="0.1133%" height="15" fill="rgb(227,5,17)"/><text x="19.8518%" y="479.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (21 samples, 0.11%)</title><rect x="19.6018%" y="453" width="0.1133%" height="15" fill="rgb(221,226,24)"/><text x="19.8518%" y="463.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (21 samples, 0.11%)</title><rect x="19.6018%" y="437" width="0.1133%" height="15" fill="rgb(211,5,48)"/><text x="19.8518%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.11%)</title><rect x="19.6018%" y="421" width="0.1133%" height="15" fill="rgb(219,150,6)"/><text x="19.8518%" y="431.50"></text></g><g><title>rayon_core::join::join_context (21 samples, 0.11%)</title><rect x="19.6018%" y="405" width="0.1133%" height="15" fill="rgb(251,46,16)"/><text x="19.8518%" y="415.50"></text></g><g><title>rayon_core::registry::in_worker (21 samples, 0.11%)</title><rect x="19.6018%" y="389" width="0.1133%" height="15" fill="rgb(220,204,40)"/><text x="19.8518%" y="399.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (21 samples, 0.11%)</title><rect x="19.6018%" y="373" width="0.1133%" height="15" fill="rgb(211,85,2)"/><text x="19.8518%" y="383.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (703 samples, 3.79%)</title><rect x="15.9275%" y="1237" width="3.7930%" height="15" fill="rgb(229,17,7)"/><text x="16.1775%" y="1247.50">rayo..</text></g><g><title>rayon_core::job::JobRef::execute (703 samples, 3.79%)</title><rect x="15.9275%" y="1221" width="3.7930%" height="15" fill="rgb(239,72,28)"/><text x="16.1775%" y="1231.50">rayo..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (703 samples, 3.79%)</title><rect x="15.9275%" y="1205" width="3.7930%" height="15" fill="rgb(230,47,54)"/><text x="16.1775%" y="1215.50">&lt;ray..</text></g><g><title>rayon_core::unwind::halt_unwinding (698 samples, 3.77%)</title><rect x="15.9545%" y="1189" width="3.7661%" height="15" fill="rgb(214,50,8)"/><text x="16.2045%" y="1199.50">rayo..</text></g><g><title>std::panic::catch_unwind (698 samples, 3.77%)</title><rect x="15.9545%" y="1173" width="3.7661%" height="15" fill="rgb(216,198,43)"/><text x="16.2045%" y="1183.50">std:..</text></g><g><title>std::panicking::try (698 samples, 3.77%)</title><rect x="15.9545%" y="1157" width="3.7661%" height="15" fill="rgb(234,20,35)"/><text x="16.2045%" y="1167.50">std:..</text></g><g><title>std::panicking::try::do_call (698 samples, 3.77%)</title><rect x="15.9545%" y="1141" width="3.7661%" height="15" fill="rgb(254,45,19)"/><text x="16.2045%" y="1151.50">std:..</text></g><g><title>asm_load_gs_index (22 samples, 0.12%)</title><rect x="19.9471%" y="1205" width="0.1187%" height="15" fill="rgb(219,14,44)"/><text x="20.1971%" y="1215.50"></text></g><g><title>__prepare_exit_to_usermode (28 samples, 0.15%)</title><rect x="20.2547%" y="1173" width="0.1511%" height="15" fill="rgb(217,220,26)"/><text x="20.5047%" y="1183.50"></text></g><g><title>switch_fpu_return (24 samples, 0.13%)</title><rect x="20.2762%" y="1157" width="0.1295%" height="15" fill="rgb(213,158,28)"/><text x="20.5262%" y="1167.50"></text></g><g><title>copy_kernel_to_fpregs (19 samples, 0.10%)</title><rect x="20.3032%" y="1141" width="0.1025%" height="15" fill="rgb(252,51,52)"/><text x="20.5532%" y="1151.50"></text></g><g><title>__syscall_return_slowpath (29 samples, 0.16%)</title><rect x="20.4057%" y="1173" width="0.1565%" height="15" fill="rgb(246,89,16)"/><text x="20.6557%" y="1183.50"></text></g><g><title>__audit_syscall_exit (24 samples, 0.13%)</title><rect x="20.4327%" y="1157" width="0.1295%" height="15" fill="rgb(216,158,49)"/><text x="20.6827%" y="1167.50"></text></g><g><title>do_sched_yield (61 samples, 0.33%)</title><rect x="20.5676%" y="1157" width="0.3291%" height="15" fill="rgb(236,107,19)"/><text x="20.8176%" y="1167.50"></text></g><g><title>yield_task_fair (29 samples, 0.16%)</title><rect x="20.7403%" y="1141" width="0.1565%" height="15" fill="rgb(228,185,30)"/><text x="20.9903%" y="1151.50"></text></g><g><title>put_prev_entity (24 samples, 0.13%)</title><rect x="21.4633%" y="1109" width="0.1295%" height="15" fill="rgb(246,134,8)"/><text x="21.7133%" y="1119.50"></text></g><g><title>pick_next_task_fair (95 samples, 0.51%)</title><rect x="21.3446%" y="1125" width="0.5126%" height="15" fill="rgb(214,143,50)"/><text x="21.5946%" y="1135.50"></text></g><g><title>update_curr (34 samples, 0.18%)</title><rect x="21.6737%" y="1109" width="0.1834%" height="15" fill="rgb(228,75,8)"/><text x="21.9237%" y="1119.50"></text></g><g><title>__schedule (203 samples, 1.10%)</title><rect x="20.9129%" y="1141" width="1.0953%" height="15" fill="rgb(207,175,4)"/><text x="21.1629%" y="1151.50"></text></g><g><title>__x64_sys_sched_yield (271 samples, 1.46%)</title><rect x="20.5622%" y="1173" width="1.4622%" height="15" fill="rgb(205,108,24)"/><text x="20.8122%" y="1183.50"></text></g><g><title>schedule (209 samples, 1.13%)</title><rect x="20.8967%" y="1157" width="1.1277%" height="15" fill="rgb(244,120,49)"/><text x="21.1467%" y="1167.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (360 samples, 1.94%)</title><rect x="20.1791%" y="1205" width="1.9424%" height="15" fill="rgb(223,47,38)"/><text x="20.4291%" y="1215.50">e..</text></g><g><title>do_syscall_64 (356 samples, 1.92%)</title><rect x="20.2007%" y="1189" width="1.9208%" height="15" fill="rgb(229,179,11)"/><text x="20.4507%" y="1199.50">d..</text></g><g><title>__GI___sched_yield (458 samples, 2.47%)</title><rect x="19.7691%" y="1221" width="2.4711%" height="15" fill="rgb(231,122,1)"/><text x="20.0191%" y="1231.50">__..</text></g><g><title>__perf_event_task_sched_in (22 samples, 0.12%)</title><rect x="22.5963%" y="997" width="0.1187%" height="15" fill="rgb(245,119,9)"/><text x="22.8463%" y="1007.50"></text></g><g><title>finish_task_switch (25 samples, 0.13%)</title><rect x="22.5909%" y="1013" width="0.1349%" height="15" fill="rgb(241,163,25)"/><text x="22.8409%" y="1023.50"></text></g><g><title>load_balance (22 samples, 0.12%)</title><rect x="22.7366%" y="981" width="0.1187%" height="15" fill="rgb(217,214,3)"/><text x="22.9866%" y="991.50"></text></g><g><title>newidle_balance (31 samples, 0.17%)</title><rect x="22.7312%" y="997" width="0.1673%" height="15" fill="rgb(240,86,28)"/><text x="22.9812%" y="1007.50"></text></g><g><title>pick_next_task_fair (34 samples, 0.18%)</title><rect x="22.7258%" y="1013" width="0.1834%" height="15" fill="rgb(215,47,9)"/><text x="22.9758%" y="1023.50"></text></g><g><title>futex_wait_queue_me (97 samples, 0.52%)</title><rect x="22.4183%" y="1061" width="0.5234%" height="15" fill="rgb(252,25,45)"/><text x="22.6683%" y="1071.50"></text></g><g><title>schedule (88 samples, 0.47%)</title><rect x="22.4668%" y="1045" width="0.4748%" height="15" fill="rgb(251,164,9)"/><text x="22.7168%" y="1055.50"></text></g><g><title>__schedule (88 samples, 0.47%)</title><rect x="22.4668%" y="1029" width="0.4748%" height="15" fill="rgb(233,194,0)"/><text x="22.7168%" y="1039.50"></text></g><g><title>__do_sys_futex (109 samples, 0.59%)</title><rect x="22.3751%" y="1109" width="0.5881%" height="15" fill="rgb(249,111,24)"/><text x="22.6251%" y="1119.50"></text></g><g><title>do_futex (103 samples, 0.56%)</title><rect x="22.4075%" y="1093" width="0.5557%" height="15" fill="rgb(250,223,3)"/><text x="22.6575%" y="1103.50"></text></g><g><title>futex_wait (103 samples, 0.56%)</title><rect x="22.4075%" y="1077" width="0.5557%" height="15" fill="rgb(236,178,37)"/><text x="22.6575%" y="1087.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (114 samples, 0.62%)</title><rect x="22.3697%" y="1141" width="0.6151%" height="15" fill="rgb(241,158,50)"/><text x="22.6197%" y="1151.50"></text></g><g><title>do_syscall_64 (113 samples, 0.61%)</title><rect x="22.3751%" y="1125" width="0.6097%" height="15" fill="rgb(213,121,41)"/><text x="22.6251%" y="1135.50"></text></g><g><title>__pthread_cond_wait (126 samples, 0.68%)</title><rect x="22.3103%" y="1157" width="0.6798%" height="15" fill="rgb(240,92,3)"/><text x="22.5603%" y="1167.50"></text></g><g><title>std::sync::condvar::Condvar::wait (127 samples, 0.69%)</title><rect x="22.3103%" y="1205" width="0.6852%" height="15" fill="rgb(205,123,3)"/><text x="22.5603%" y="1215.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (127 samples, 0.69%)</title><rect x="22.3103%" y="1189" width="0.6852%" height="15" fill="rgb(205,97,47)"/><text x="22.5603%" y="1199.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait (127 samples, 0.69%)</title><rect x="22.3103%" y="1173" width="0.6852%" height="15" fill="rgb(247,152,14)"/><text x="22.5603%" y="1183.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (604 samples, 3.26%)</title><rect x="19.7421%" y="1237" width="3.2589%" height="15" fill="rgb(248,195,53)"/><text x="19.9921%" y="1247.50">ray..</text></g><g><title>rayon_core::sleep::Sleep::sleep (139 samples, 0.75%)</title><rect x="22.2510%" y="1221" width="0.7500%" height="15" fill="rgb(226,201,16)"/><text x="22.5010%" y="1231.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (1,529 samples, 8.25%)</title><rect x="14.8916%" y="1317" width="8.2497%" height="15" fill="rgb(205,98,0)"/><text x="15.1416%" y="1327.50">&lt;rayon_core..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (1,529 samples, 8.25%)</title><rect x="14.8916%" y="1301" width="8.2497%" height="15" fill="rgb(214,191,48)"/><text x="15.1416%" y="1311.50">rayon_core:..</text></g><g><title>rayon_core::registry::main_loop (1,529 samples, 8.25%)</title><rect x="14.8916%" y="1285" width="8.2497%" height="15" fill="rgb(237,112,39)"/><text x="15.1416%" y="1295.50">rayon_core:..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (1,529 samples, 8.25%)</title><rect x="14.8916%" y="1269" width="8.2497%" height="15" fill="rgb(247,203,27)"/><text x="15.1416%" y="1279.50">rayon_core:..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1,529 samples, 8.25%)</title><rect x="14.8916%" y="1253" width="8.2497%" height="15" fill="rgb(235,124,28)"/><text x="15.1416%" y="1263.50">rayon_core:..</text></g><g><title>rayon_core::sleep::Sleep::work_found (26 samples, 0.14%)</title><rect x="23.0010%" y="1237" width="0.1403%" height="15" fill="rgb(208,207,46)"/><text x="23.2510%" y="1247.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (26 samples, 0.14%)</title><rect x="23.0010%" y="1221" width="0.1403%" height="15" fill="rgb(234,176,4)"/><text x="23.2510%" y="1231.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (26 samples, 0.14%)</title><rect x="23.0010%" y="1205" width="0.1403%" height="15" fill="rgb(230,133,28)"/><text x="23.2510%" y="1215.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::is_full (50 samples, 0.27%)</title><rect x="23.2761%" y="1237" width="0.2698%" height="15" fill="rgb(211,137,40)"/><text x="23.5261%" y="1247.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (44 samples, 0.24%)</title><rect x="26.0980%" y="901" width="0.2374%" height="15" fill="rgb(254,35,13)"/><text x="26.3480%" y="911.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (326 samples, 1.76%)</title><rect x="24.6520%" y="933" width="1.7589%" height="15" fill="rgb(225,49,51)"/><text x="24.9020%" y="943.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (266 samples, 1.44%)</title><rect x="24.9757%" y="917" width="1.4352%" height="15" fill="rgb(251,10,15)"/><text x="25.2257%" y="927.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (477 samples, 2.57%)</title><rect x="24.0369%" y="965" width="2.5736%" height="15" fill="rgb(228,207,15)"/><text x="24.2869%" y="975.50">[l..</text></g><g><title>[libnvidia-glcore.so.435.21] (460 samples, 2.48%)</title><rect x="24.1286%" y="949" width="2.4819%" height="15" fill="rgb(241,99,19)"/><text x="24.3786%" y="959.50">[l..</text></g><g><title>__GI___libc_malloc (37 samples, 0.20%)</title><rect x="26.4109%" y="933" width="0.1996%" height="15" fill="rgb(207,104,49)"/><text x="26.6609%" y="943.50"></text></g><g><title>_int_malloc (29 samples, 0.16%)</title><rect x="26.4541%" y="917" width="0.1565%" height="15" fill="rgb(234,99,18)"/><text x="26.7041%" y="927.50"></text></g><g><title>ash::device::DeviceV1_0::cmd_begin_render_pass (481 samples, 2.60%)</title><rect x="24.0369%" y="981" width="2.5952%" height="15" fill="rgb(213,191,49)"/><text x="24.2869%" y="991.50">as..</text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::begin_render_pass (495 samples, 2.67%)</title><rect x="23.9722%" y="1077" width="2.6708%" height="15" fill="rgb(210,226,19)"/><text x="24.2222%" y="1087.50">&lt;g..</text></g><g><title>inplace_it::alloc_array::inplace_or_alloc_array (491 samples, 2.65%)</title><rect x="23.9937%" y="1061" width="2.6492%" height="15" fill="rgb(229,97,18)"/><text x="24.2437%" y="1071.50">in..</text></g><g><title>inplace_it::fixed_array::try_inplace_array (490 samples, 2.64%)</title><rect x="23.9991%" y="1045" width="2.6438%" height="15" fill="rgb(211,167,15)"/><text x="24.2491%" y="1055.50">in..</text></g><g><title>inplace_it::fixed_array::indirect (487 samples, 2.63%)</title><rect x="24.0153%" y="1029" width="2.6276%" height="15" fill="rgb(210,169,34)"/><text x="24.2653%" y="1039.50">in..</text></g><g><title>inplace_it::fixed_array::try_inplace_array::{{closure}} (487 samples, 2.63%)</title><rect x="24.0153%" y="1013" width="2.6276%" height="15" fill="rgb(241,121,31)"/><text x="24.2653%" y="1023.50">in..</text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::begin_render_pass::{{closure}} (486 samples, 2.62%)</title><rect x="24.0207%" y="997" width="2.6222%" height="15" fill="rgb(232,40,11)"/><text x="24.2707%" y="1007.50">&lt;g..</text></g><g><title>inplace_it::alloc_array::inplace_or_alloc_array (73 samples, 0.39%)</title><rect x="26.7454%" y="965" width="0.3939%" height="15" fill="rgb(205,86,26)"/><text x="26.9954%" y="975.50"></text></g><g><title>inplace_it::fixed_array::try_inplace_array (72 samples, 0.39%)</title><rect x="26.7508%" y="949" width="0.3885%" height="15" fill="rgb(231,126,28)"/><text x="27.0008%" y="959.50"></text></g><g><title>inplace_it::fixed_array::indirect (71 samples, 0.38%)</title><rect x="26.7562%" y="933" width="0.3831%" height="15" fill="rgb(219,221,18)"/><text x="27.0062%" y="943.50"></text></g><g><title>inplace_it::fixed_array::try_inplace_array::{{closure}} (71 samples, 0.38%)</title><rect x="26.7562%" y="917" width="0.3831%" height="15" fill="rgb(211,40,0)"/><text x="27.0062%" y="927.50"></text></g><g><title>gfx_backend_vulkan::command::CommandBuffer::bind_descriptor_sets::{{closure}}::{{closure}} (71 samples, 0.38%)</title><rect x="26.7562%" y="901" width="0.3831%" height="15" fill="rgb(239,85,43)"/><text x="27.0062%" y="911.50"></text></g><g><title>ash::device::DeviceV1_0::cmd_bind_descriptor_sets (68 samples, 0.37%)</title><rect x="26.7724%" y="885" width="0.3669%" height="15" fill="rgb(231,55,21)"/><text x="27.0224%" y="895.50"></text></g><g><title>ash::vk::features::DeviceFnV1_0::cmd_bind_descriptor_sets (64 samples, 0.35%)</title><rect x="26.7940%" y="869" width="0.3453%" height="15" fill="rgb(225,184,43)"/><text x="27.0440%" y="879.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (62 samples, 0.33%)</title><rect x="26.8048%" y="853" width="0.3345%" height="15" fill="rgb(251,158,41)"/><text x="27.0548%" y="863.50"></text></g><g><title>__memset_avx2_unaligned_erms (32 samples, 0.17%)</title><rect x="26.9667%" y="837" width="0.1727%" height="15" fill="rgb(234,159,37)"/><text x="27.2167%" y="847.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::bind_graphics_descriptor_sets (93 samples, 0.50%)</title><rect x="26.6429%" y="1077" width="0.5018%" height="15" fill="rgb(216,204,22)"/><text x="26.8929%" y="1087.50"></text></g><g><title>gfx_backend_vulkan::command::CommandBuffer::bind_descriptor_sets (91 samples, 0.49%)</title><rect x="26.6537%" y="1061" width="0.4910%" height="15" fill="rgb(214,17,3)"/><text x="26.9037%" y="1071.50"></text></g><g><title>inplace_it::alloc_array::inplace_or_alloc_array (89 samples, 0.48%)</title><rect x="26.6645%" y="1045" width="0.4802%" height="15" fill="rgb(212,111,17)"/><text x="26.9145%" y="1055.50"></text></g><g><title>inplace_it::fixed_array::try_inplace_array (80 samples, 0.43%)</title><rect x="26.7131%" y="1029" width="0.4316%" height="15" fill="rgb(221,157,24)"/><text x="26.9631%" y="1039.50"></text></g><g><title>inplace_it::fixed_array::indirect (75 samples, 0.40%)</title><rect x="26.7400%" y="1013" width="0.4047%" height="15" fill="rgb(252,16,13)"/><text x="26.9900%" y="1023.50"></text></g><g><title>inplace_it::fixed_array::try_inplace_array::{{closure}} (75 samples, 0.40%)</title><rect x="26.7400%" y="997" width="0.4047%" height="15" fill="rgb(221,62,2)"/><text x="26.9900%" y="1007.50"></text></g><g><title>gfx_backend_vulkan::command::CommandBuffer::bind_descriptor_sets::{{closure}} (75 samples, 0.40%)</title><rect x="26.7400%" y="981" width="0.4047%" height="15" fill="rgb(247,87,22)"/><text x="26.9900%" y="991.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::bind_vertex_buffers (33 samples, 0.18%)</title><rect x="27.1609%" y="1077" width="0.1781%" height="15" fill="rgb(215,73,9)"/><text x="27.4109%" y="1087.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::draw_indexed (24 samples, 0.13%)</title><rect x="27.3389%" y="1077" width="0.1295%" height="15" fill="rgb(207,175,33)"/><text x="27.5889%" y="1087.50"></text></g><g><title>ash::device::DeviceV1_0::cmd_draw_indexed (19 samples, 0.10%)</title><rect x="27.3659%" y="1061" width="0.1025%" height="15" fill="rgb(243,129,54)"/><text x="27.6159%" y="1071.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (26 samples, 0.14%)</title><rect x="27.5710%" y="1029" width="0.1403%" height="15" fill="rgb(227,119,45)"/><text x="27.8210%" y="1039.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (36 samples, 0.19%)</title><rect x="27.5224%" y="1045" width="0.1942%" height="15" fill="rgb(205,109,36)"/><text x="27.7724%" y="1055.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::finish (41 samples, 0.22%)</title><rect x="27.5062%" y="1077" width="0.2212%" height="15" fill="rgb(205,6,39)"/><text x="27.7562%" y="1087.50"></text></g><g><title>ash::device::DeviceV1_0::end_command_buffer (38 samples, 0.21%)</title><rect x="27.5224%" y="1061" width="0.2050%" height="15" fill="rgb(221,32,16)"/><text x="27.7724%" y="1071.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::set_scissors (21 samples, 0.11%)</title><rect x="27.7976%" y="1077" width="0.1133%" height="15" fill="rgb(228,144,50)"/><text x="28.0476%" y="1087.50"></text></g><g><title>inplace_it::alloc_array::inplace_or_alloc_array (21 samples, 0.11%)</title><rect x="27.7976%" y="1061" width="0.1133%" height="15" fill="rgb(229,201,53)"/><text x="28.0476%" y="1071.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (24 samples, 0.13%)</title><rect x="27.9810%" y="965" width="0.1295%" height="15" fill="rgb(249,153,27)"/><text x="28.2310%" y="975.50"></text></g><g><title>ash::device::DeviceV1_0::cmd_set_viewport (25 samples, 0.13%)</title><rect x="27.9810%" y="981" width="0.1349%" height="15" fill="rgb(227,106,25)"/><text x="28.2310%" y="991.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::set_viewports (42 samples, 0.23%)</title><rect x="27.9109%" y="1077" width="0.2266%" height="15" fill="rgb(230,65,29)"/><text x="28.1609%" y="1087.50"></text></g><g><title>inplace_it::alloc_array::inplace_or_alloc_array (42 samples, 0.23%)</title><rect x="27.9109%" y="1061" width="0.2266%" height="15" fill="rgb(221,57,46)"/><text x="28.1609%" y="1071.50"></text></g><g><title>inplace_it::fixed_array::try_inplace_array (35 samples, 0.19%)</title><rect x="27.9486%" y="1045" width="0.1888%" height="15" fill="rgb(229,161,17)"/><text x="28.1986%" y="1055.50"></text></g><g><title>inplace_it::fixed_array::indirect (34 samples, 0.18%)</title><rect x="27.9540%" y="1029" width="0.1834%" height="15" fill="rgb(222,213,11)"/><text x="28.2040%" y="1039.50"></text></g><g><title>inplace_it::fixed_array::try_inplace_array::{{closure}} (34 samples, 0.18%)</title><rect x="27.9540%" y="1013" width="0.1834%" height="15" fill="rgb(235,35,13)"/><text x="28.2040%" y="1023.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::set_viewports::{{closure}} (34 samples, 0.18%)</title><rect x="27.9540%" y="997" width="0.1834%" height="15" fill="rgb(233,158,34)"/><text x="28.2040%" y="1007.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (30 samples, 0.16%)</title><rect x="30.3011%" y="933" width="0.1619%" height="15" fill="rgb(215,151,48)"/><text x="30.5511%" y="943.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (46 samples, 0.25%)</title><rect x="30.2255%" y="949" width="0.2482%" height="15" fill="rgb(229,84,14)"/><text x="30.4755%" y="959.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (105 samples, 0.57%)</title><rect x="29.9234%" y="965" width="0.5665%" height="15" fill="rgb(229,68,14)"/><text x="30.1734%" y="975.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (210 samples, 1.13%)</title><rect x="29.3623%" y="997" width="1.1331%" height="15" fill="rgb(243,106,26)"/><text x="29.6123%" y="1007.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (174 samples, 0.94%)</title><rect x="29.5565%" y="981" width="0.9388%" height="15" fill="rgb(206,45,38)"/><text x="29.8065%" y="991.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (256 samples, 1.38%)</title><rect x="29.1195%" y="1013" width="1.3812%" height="15" fill="rgb(226,6,15)"/><text x="29.3695%" y="1023.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (366 samples, 1.97%)</title><rect x="28.5313%" y="1045" width="1.9747%" height="15" fill="rgb(232,22,54)"/><text x="28.7813%" y="1055.50">[..</text></g><g><title>[libnvidia-glcore.so.435.21] (311 samples, 1.68%)</title><rect x="28.8281%" y="1029" width="1.6780%" height="15" fill="rgb(229,222,32)"/><text x="29.0781%" y="1039.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (407 samples, 2.20%)</title><rect x="28.3479%" y="1061" width="2.1960%" height="15" fill="rgb(228,62,29)"/><text x="28.5979%" y="1071.50">[..</text></g><g><title>[libnvidia-glcore.so.435.21] (424 samples, 2.29%)</title><rect x="28.2616%" y="1077" width="2.2877%" height="15" fill="rgb(251,103,34)"/><text x="28.5116%" y="1087.50">[..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.11%)</title><rect x="30.6032%" y="1077" width="0.1133%" height="15" fill="rgb(233,12,30)"/><text x="30.8532%" y="1087.50"></text></g><g><title>&lt;arrayvec::ArrayVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as arrayvec::array::Array&gt;::Item&gt;&gt;::from_iter (21 samples, 0.11%)</title><rect x="30.6032%" y="1061" width="0.1133%" height="15" fill="rgb(238,52,0)"/><text x="30.8532%" y="1071.50"></text></g><g><title>__do_sys_futex (28 samples, 0.15%)</title><rect x="30.8406%" y="933" width="0.1511%" height="15" fill="rgb(223,98,5)"/><text x="31.0906%" y="943.50"></text></g><g><title>do_futex (28 samples, 0.15%)</title><rect x="30.8406%" y="917" width="0.1511%" height="15" fill="rgb(228,75,37)"/><text x="31.0906%" y="927.50"></text></g><g><title>futex_wake (27 samples, 0.15%)</title><rect x="30.8460%" y="901" width="0.1457%" height="15" fill="rgb(205,115,49)"/><text x="31.0960%" y="911.50"></text></g><g><title>wake_up_q (22 samples, 0.12%)</title><rect x="30.8730%" y="885" width="0.1187%" height="15" fill="rgb(250,154,43)"/><text x="31.1230%" y="895.50"></text></g><g><title>try_to_wake_up (21 samples, 0.11%)</title><rect x="30.8784%" y="869" width="0.1133%" height="15" fill="rgb(226,43,29)"/><text x="31.1284%" y="879.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (38 samples, 0.21%)</title><rect x="30.8406%" y="997" width="0.2050%" height="15" fill="rgb(249,228,39)"/><text x="31.0906%" y="1007.50"></text></g><g><title>syscall (38 samples, 0.21%)</title><rect x="30.8406%" y="981" width="0.2050%" height="15" fill="rgb(216,79,43)"/><text x="31.0906%" y="991.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (38 samples, 0.21%)</title><rect x="30.8406%" y="965" width="0.2050%" height="15" fill="rgb(228,95,12)"/><text x="31.0906%" y="975.50"></text></g><g><title>do_syscall_64 (38 samples, 0.21%)</title><rect x="30.8406%" y="949" width="0.2050%" height="15" fill="rgb(249,221,15)"/><text x="31.0906%" y="959.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.34%)</title><rect x="30.7327%" y="1061" width="0.3399%" height="15" fill="rgb(233,34,13)"/><text x="30.9827%" y="1071.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (63 samples, 0.34%)</title><rect x="30.7327%" y="1045" width="0.3399%" height="15" fill="rgb(214,103,39)"/><text x="30.9827%" y="1055.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_shared_slow (46 samples, 0.25%)</title><rect x="30.8244%" y="1029" width="0.2482%" height="15" fill="rgb(251,126,39)"/><text x="31.0744%" y="1039.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (43 samples, 0.23%)</title><rect x="30.8406%" y="1013" width="0.2320%" height="15" fill="rgb(214,216,36)"/><text x="31.0906%" y="1023.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (25 samples, 0.13%)</title><rect x="31.1158%" y="981" width="0.1349%" height="15" fill="rgb(220,221,8)"/><text x="31.3658%" y="991.50"></text></g><g><title>syscall (25 samples, 0.13%)</title><rect x="31.1158%" y="965" width="0.1349%" height="15" fill="rgb(240,216,3)"/><text x="31.3658%" y="975.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (24 samples, 0.13%)</title><rect x="31.1212%" y="949" width="0.1295%" height="15" fill="rgb(232,218,17)"/><text x="31.3712%" y="959.50"></text></g><g><title>do_syscall_64 (24 samples, 0.13%)</title><rect x="31.1212%" y="933" width="0.1295%" height="15" fill="rgb(229,163,45)"/><text x="31.3712%" y="943.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.20%)</title><rect x="31.0726%" y="1061" width="0.1996%" height="15" fill="rgb(231,110,42)"/><text x="31.3226%" y="1071.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (35 samples, 0.19%)</title><rect x="31.0834%" y="1045" width="0.1888%" height="15" fill="rgb(208,170,48)"/><text x="31.3334%" y="1055.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (31 samples, 0.17%)</title><rect x="31.1050%" y="1029" width="0.1673%" height="15" fill="rgb(239,116,25)"/><text x="31.3550%" y="1039.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wake_parked_threads (31 samples, 0.17%)</title><rect x="31.1050%" y="1013" width="0.1673%" height="15" fill="rgb(219,200,50)"/><text x="31.3550%" y="1023.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_filter (29 samples, 0.16%)</title><rect x="31.1158%" y="997" width="0.1565%" height="15" fill="rgb(245,200,0)"/><text x="31.3658%" y="1007.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (32 samples, 0.17%)</title><rect x="31.3748%" y="981" width="0.1727%" height="15" fill="rgb(245,119,33)"/><text x="31.6248%" y="991.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (32 samples, 0.17%)</title><rect x="31.3748%" y="965" width="0.1727%" height="15" fill="rgb(231,125,12)"/><text x="31.6248%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (32 samples, 0.17%)</title><rect x="31.3748%" y="949" width="0.1727%" height="15" fill="rgb(216,96,41)"/><text x="31.6248%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.17%)</title><rect x="31.3802%" y="933" width="0.1673%" height="15" fill="rgb(248,43,45)"/><text x="31.6302%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.15%)</title><rect x="31.4017%" y="917" width="0.1457%" height="15" fill="rgb(217,222,7)"/><text x="31.6517%" y="927.50"></text></g><g><title>&lt;wgpu_core::RefCount as core::ops::drop::Drop&gt;::drop (27 samples, 0.15%)</title><rect x="31.4017%" y="901" width="0.1457%" height="15" fill="rgb(233,28,6)"/><text x="31.6517%" y="911.50"></text></g><g><title>wgpu_core::RefCount::rich_drop_inner (26 samples, 0.14%)</title><rect x="31.4071%" y="885" width="0.1403%" height="15" fill="rgb(231,218,15)"/><text x="31.6571%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.26%)</title><rect x="31.3478%" y="997" width="0.2644%" height="15" fill="rgb(226,171,48)"/><text x="31.5978%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (181 samples, 0.98%)</title><rect x="30.7219%" y="1077" width="0.9766%" height="15" fill="rgb(235,201,9)"/><text x="30.9719%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (78 samples, 0.42%)</title><rect x="31.2777%" y="1061" width="0.4208%" height="15" fill="rgb(217,80,15)"/><text x="31.5277%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (76 samples, 0.41%)</title><rect x="31.2884%" y="1045" width="0.4101%" height="15" fill="rgb(219,152,8)"/><text x="31.5384%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.36%)</title><rect x="31.3424%" y="1029" width="0.3561%" height="15" fill="rgb(243,107,38)"/><text x="31.5924%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.36%)</title><rect x="31.3424%" y="1013" width="0.3561%" height="15" fill="rgb(231,17,5)"/><text x="31.5924%" y="1023.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::begin (90 samples, 0.49%)</title><rect x="31.7255%" y="1061" width="0.4856%" height="15" fill="rgb(209,25,54)"/><text x="31.9755%" y="1071.50"></text></g><g><title>ash::device::DeviceV1_0::begin_command_buffer (90 samples, 0.49%)</title><rect x="31.7255%" y="1045" width="0.4856%" height="15" fill="rgb(219,0,2)"/><text x="31.9755%" y="1055.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (88 samples, 0.47%)</title><rect x="31.7363%" y="1029" width="0.4748%" height="15" fill="rgb(246,9,5)"/><text x="31.9863%" y="1039.50"></text></g><g><title>gfx_hal::command::CommandBuffer::begin_primary (93 samples, 0.50%)</title><rect x="31.7255%" y="1077" width="0.5018%" height="15" fill="rgb(226,159,4)"/><text x="31.9755%" y="1087.50"></text></g><g><title>&lt;arrayvec::ArrayVec&lt;A&gt; as core::cmp::PartialEq&gt;::eq (24 samples, 0.13%)</title><rect x="32.3783%" y="997" width="0.1295%" height="15" fill="rgb(219,175,34)"/><text x="32.6283%" y="1007.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (22 samples, 0.12%)</title><rect x="32.3891%" y="981" width="0.1187%" height="15" fill="rgb(236,10,46)"/><text x="32.6391%" y="991.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;B&gt;&gt;::equal (22 samples, 0.12%)</title><rect x="32.3891%" y="965" width="0.1187%" height="15" fill="rgb(240,211,16)"/><text x="32.6391%" y="975.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (45 samples, 0.24%)</title><rect x="32.2704%" y="1061" width="0.2428%" height="15" fill="rgb(205,3,43)"/><text x="32.5204%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (32 samples, 0.17%)</title><rect x="32.3406%" y="1045" width="0.1727%" height="15" fill="rgb(245,7,22)"/><text x="32.5906%" y="1055.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry::{{closure}} (25 samples, 0.13%)</title><rect x="32.3783%" y="1029" width="0.1349%" height="15" fill="rgb(239,132,32)"/><text x="32.6283%" y="1039.50"></text></g><g><title>&lt;wgpu_core::device::AttachmentData&lt;T&gt; as core::cmp::PartialEq&gt;::eq (25 samples, 0.13%)</title><rect x="32.3783%" y="1013" width="0.1349%" height="15" fill="rgb(228,202,34)"/><text x="32.6283%" y="1023.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (50 samples, 0.27%)</title><rect x="32.2542%" y="1077" width="0.2698%" height="15" fill="rgb(254,200,22)"/><text x="32.5042%" y="1087.50"></text></g><g><title>ash::device::DeviceV1_0::cmd_pipeline_barrier (31 samples, 0.17%)</title><rect x="32.6103%" y="1045" width="0.1673%" height="15" fill="rgb(219,10,39)"/><text x="32.8603%" y="1055.50"></text></g><g><title>ash::vk::features::DeviceFnV1_0::cmd_pipeline_barrier (31 samples, 0.17%)</title><rect x="32.6103%" y="1029" width="0.1673%" height="15" fill="rgb(226,210,39)"/><text x="32.8603%" y="1039.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (30 samples, 0.16%)</title><rect x="32.6157%" y="1013" width="0.1619%" height="15" fill="rgb(208,219,16)"/><text x="32.8657%" y="1023.50"></text></g><g><title>[libnvidia-glcore.so.435.21] (19 samples, 0.10%)</title><rect x="32.6751%" y="997" width="0.1025%" height="15" fill="rgb(216,158,51)"/><text x="32.9251%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.13%)</title><rect x="32.8369%" y="1029" width="0.1295%" height="15" fill="rgb(233,14,44)"/><text x="33.0869%" y="1039.50"></text></g><g><title>&lt;gfx_backend_vulkan::command::CommandBuffer as gfx_hal::command::CommandBuffer&lt;gfx_backend_vulkan::Backend&gt;&gt;::pipeline_barrier (80 samples, 0.43%)</title><rect x="32.5618%" y="1061" width="0.4316%" height="15" fill="rgb(237,97,39)"/><text x="32.8118%" y="1071.50"></text></g><g><title>gfx_backend_vulkan::command::destructure_barriers (40 samples, 0.22%)</title><rect x="32.7776%" y="1045" width="0.2158%" height="15" fill="rgb(218,198,43)"/><text x="33.0276%" y="1055.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (35 samples, 0.19%)</title><rect x="33.0582%" y="1045" width="0.1888%" height="15" fill="rgb(231,104,20)"/><text x="33.3082%" y="1055.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (35 samples, 0.19%)</title><rect x="33.0582%" y="1029" width="0.1888%" height="15" fill="rgb(254,36,13)"/><text x="33.3082%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (26 samples, 0.14%)</title><rect x="33.1067%" y="1013" width="0.1403%" height="15" fill="rgb(248,14,50)"/><text x="33.3567%" y="1023.50"></text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::merge_extend (62 samples, 0.33%)</title><rect x="33.0096%" y="1061" width="0.3345%" height="15" fill="rgb(217,107,29)"/><text x="33.2596%" y="1071.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 0.65%)</title><rect x="37.0185%" y="1013" width="0.6475%" height="15" fill="rgb(251,169,33)"/><text x="37.2685%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (156 samples, 0.84%)</title><rect x="37.0185%" y="1029" width="0.8417%" height="15" fill="rgb(217,108,32)"/><text x="37.2685%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (36 samples, 0.19%)</title><rect x="37.6659%" y="1013" width="0.1942%" height="15" fill="rgb(219,66,42)"/><text x="37.9159%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (36 samples, 0.19%)</title><rect x="37.6659%" y="997" width="0.1942%" height="15" fill="rgb(206,180,7)"/><text x="37.9159%" y="1007.50"></text></g><g><title>core::ptr::read (36 samples, 0.19%)</title><rect x="37.6659%" y="981" width="0.1942%" height="15" fill="rgb(208,226,31)"/><text x="37.9159%" y="991.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (138 samples, 0.74%)</title><rect x="67.5299%" y="949" width="0.7446%" height="15" fill="rgb(218,26,49)"/><text x="67.7799%" y="959.50"></text></g><g><title>&lt;wgpu_core::track::range::Merge&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (993 samples, 5.36%)</title><rect x="63.6614%" y="981" width="5.3577%" height="15" fill="rgb(233,197,48)"/><text x="63.9114%" y="991.50">&lt;wgpu_c..</text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek (276 samples, 1.49%)</title><rect x="67.5299%" y="965" width="1.4892%" height="15" fill="rgb(252,181,51)"/><text x="67.7799%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (138 samples, 0.74%)</title><rect x="68.2745%" y="949" width="0.7446%" height="15" fill="rgb(253,90,19)"/><text x="68.5245%" y="959.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek::{{closure}} (136 samples, 0.73%)</title><rect x="68.2853%" y="933" width="0.7338%" height="15" fill="rgb(215,171,30)"/><text x="68.5353%" y="943.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 0.73%)</title><rect x="68.2853%" y="917" width="0.7338%" height="15" fill="rgb(214,222,9)"/><text x="68.5353%" y="927.50"></text></g><g><title>__memmove_avx_unaligned_erms (323 samples, 1.74%)</title><rect x="69.4346%" y="821" width="1.7427%" height="15" fill="rgb(223,3,22)"/><text x="69.6846%" y="831.50"></text></g><g><title>_int_free (40 samples, 0.22%)</title><rect x="71.1773%" y="821" width="0.2158%" height="15" fill="rgb(225,196,46)"/><text x="71.4273%" y="831.50"></text></g><g><title>_int_malloc (180 samples, 0.97%)</title><rect x="71.3931%" y="821" width="0.9712%" height="15" fill="rgb(209,110,37)"/><text x="71.6431%" y="831.50"></text></g><g><title>unlink_chunk.constprop.0 (23 samples, 0.12%)</title><rect x="72.2402%" y="805" width="0.1241%" height="15" fill="rgb(249,89,12)"/><text x="72.4902%" y="815.50"></text></g><g><title>__GI___libc_realloc (604 samples, 3.26%)</title><rect x="69.1378%" y="853" width="3.2589%" height="15" fill="rgb(226,27,33)"/><text x="69.3878%" y="863.50">__G..</text></g><g><title>_int_realloc (573 samples, 3.09%)</title><rect x="69.3051%" y="837" width="3.0916%" height="15" fill="rgb(213,82,22)"/><text x="69.5551%" y="847.50">_in..</text></g><g><title>alloc::raw_vec::finish_grow (611 samples, 3.30%)</title><rect x="69.1324%" y="917" width="3.2966%" height="15" fill="rgb(248,140,0)"/><text x="69.3824%" y="927.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (611 samples, 3.30%)</title><rect x="69.1324%" y="901" width="3.2966%" height="15" fill="rgb(228,106,3)"/><text x="69.3824%" y="911.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (611 samples, 3.30%)</title><rect x="69.1324%" y="885" width="3.2966%" height="15" fill="rgb(209,23,37)"/><text x="69.3824%" y="895.50">all..</text></g><g><title>alloc::alloc::realloc (611 samples, 3.30%)</title><rect x="69.1324%" y="869" width="3.2966%" height="15" fill="rgb(241,93,50)"/><text x="69.3824%" y="879.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (631 samples, 3.40%)</title><rect x="69.0515%" y="933" width="3.4046%" height="15" fill="rgb(253,46,43)"/><text x="69.3015%" y="943.50">all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (636 samples, 3.43%)</title><rect x="69.0299%" y="981" width="3.4315%" height="15" fill="rgb(226,206,43)"/><text x="69.2799%" y="991.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (634 samples, 3.42%)</title><rect x="69.0407%" y="965" width="3.4207%" height="15" fill="rgb(217,54,7)"/><text x="69.2907%" y="975.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (632 samples, 3.41%)</title><rect x="69.0515%" y="949" width="3.4099%" height="15" fill="rgb(223,5,52)"/><text x="69.3015%" y="959.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (8,938 samples, 48.22%)</title><rect x="37.8601%" y="1029" width="48.2249%" height="15" fill="rgb(206,52,46)"/><text x="38.1101%" y="1039.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8,938 samples, 48.22%)</title><rect x="37.8601%" y="1013" width="48.2249%" height="15" fill="rgb(253,136,11)"/><text x="38.1101%" y="1023.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (8,938 samples, 48.22%)</title><rect x="37.8601%" y="997" width="48.2249%" height="15" fill="rgb(208,106,33)"/><text x="38.1101%" y="1007.50">alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g><title>core::ptr::write (2,509 samples, 13.54%)</title><rect x="72.5478%" y="981" width="13.5373%" height="15" fill="rgb(206,54,4)"/><text x="72.7978%" y="991.50">core::ptr::write</text></g><g><title>_int_free (19 samples, 0.10%)</title><rect x="86.2199%" y="1029" width="0.1025%" height="15" fill="rgb(213,3,15)"/><text x="86.4699%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.11%)</title><rect x="86.3332%" y="997" width="0.1079%" height="15" fill="rgb(252,211,39)"/><text x="86.5832%" y="1007.50"></text></g><g><title>&lt;wgpu_core::track::texture::TextureState as wgpu_core::track::ResourceState&gt;::merge (20 samples, 0.11%)</title><rect x="86.3332%" y="981" width="0.1079%" height="15" fill="rgb(223,6,36)"/><text x="86.5832%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (21 samples, 0.11%)</title><rect x="86.3332%" y="1029" width="0.1133%" height="15" fill="rgb(252,169,45)"/><text x="86.5832%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.11%)</title><rect x="86.3332%" y="1013" width="0.1133%" height="15" fill="rgb(212,48,26)"/><text x="86.5832%" y="1023.50"></text></g><g><title>&lt;wgpu_core::track::texture::TextureState as wgpu_core::track::ResourceState&gt;::merge (49 samples, 0.26%)</title><rect x="86.6138%" y="1013" width="0.2644%" height="15" fill="rgb(251,102,48)"/><text x="86.8638%" y="1023.50"></text></g><g><title>wgpu_core::track::Unit&lt;U&gt;::port (109 samples, 0.59%)</title><rect x="86.4465%" y="1029" width="0.5881%" height="15" fill="rgb(243,208,16)"/><text x="86.6965%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (29 samples, 0.16%)</title><rect x="86.8782%" y="1013" width="0.1565%" height="15" fill="rgb(219,96,24)"/><text x="87.1282%" y="1023.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (109 samples, 0.59%)</title><rect x="87.0346%" y="1013" width="0.5881%" height="15" fill="rgb(219,33,29)"/><text x="87.2846%" y="1023.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (109 samples, 0.59%)</title><rect x="87.0346%" y="997" width="0.5881%" height="15" fill="rgb(223,176,5)"/><text x="87.2846%" y="1007.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (26 samples, 0.14%)</title><rect x="87.4825%" y="981" width="0.1403%" height="15" fill="rgb(228,140,14)"/><text x="87.7325%" y="991.50"></text></g><g><title>core::ptr::write (814 samples, 4.39%)</title><rect x="89.1011%" y="997" width="4.3919%" height="15" fill="rgb(217,179,31)"/><text x="89.3511%" y="1007.50">core:..</text></g><g><title>wgpu_core::track::range::RangedStates&lt;I,T&gt;::append (1,222 samples, 6.59%)</title><rect x="87.0346%" y="1029" width="6.5933%" height="15" fill="rgb(230,9,30)"/><text x="87.2846%" y="1039.50">wgpu_core..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (1,113 samples, 6.01%)</title><rect x="87.6227%" y="1013" width="6.0052%" height="15" fill="rgb(230,136,20)"/><text x="87.8727%" y="1023.50">smallvec..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (23 samples, 0.12%)</title><rect x="93.5038%" y="997" width="0.1241%" height="15" fill="rgb(215,210,22)"/><text x="93.7538%" y="1007.50"></text></g><g><title>&lt;wgpu_core::track::texture::TextureState as wgpu_core::track::ResourceState&gt;::merge (11,168 samples, 60.26%)</title><rect x="33.3819%" y="1045" width="60.2568%" height="15" fill="rgb(218,43,5)"/><text x="33.6319%" y="1055.50">&lt;wgpu_core::track::texture::TextureState as wgpu_core::track::ResourceState&gt;::merge</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (26 samples, 0.14%)</title><rect x="93.6603%" y="1013" width="0.1403%" height="15" fill="rgb(216,11,5)"/><text x="93.9103%" y="1023.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (31 samples, 0.17%)</title><rect x="93.6495%" y="1045" width="0.1673%" height="15" fill="rgb(209,82,29)"/><text x="93.8995%" y="1055.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (31 samples, 0.17%)</title><rect x="93.6495%" y="1029" width="0.1673%" height="15" fill="rgb(244,115,12)"/><text x="93.8995%" y="1039.50"></text></g><g><title>wgpu_core::command::CommandBuffer&lt;B&gt;::insert_barriers (11,359 samples, 61.29%)</title><rect x="32.5618%" y="1077" width="61.2874%" height="15" fill="rgb(222,82,18)"/><text x="32.8118%" y="1087.50">wgpu_core::command::CommandBuffer&lt;B&gt;::insert_barriers</text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::merge_replace (11,214 samples, 60.51%)</title><rect x="33.3441%" y="1061" width="60.5050%" height="15" fill="rgb(249,227,8)"/><text x="33.5941%" y="1071.50">wgpu_core::track::ResourceTracker&lt;S&gt;::merge_replace</text></g><g><title>wgpu_core::command::allocator::CommandAllocator&lt;B&gt;::extend (31 samples, 0.17%)</title><rect x="93.8491%" y="1077" width="0.1673%" height="15" fill="rgb(253,141,45)"/><text x="94.0991%" y="1087.50"></text></g><g><title>wgpu_core::command::allocator::CommandAllocator&lt;B&gt;::allocate_for_thread_id (30 samples, 0.16%)</title><rect x="93.8545%" y="1061" width="0.1619%" height="15" fill="rgb(234,184,4)"/><text x="94.1045%" y="1071.50"></text></g><g><title>wgpu_core::command::allocator::CommandPool&lt;B&gt;::allocate (23 samples, 0.12%)</title><rect x="93.8923%" y="1045" width="0.1241%" height="15" fill="rgb(218,194,23)"/><text x="94.1423%" y="1055.50"></text></g><g><title>futex_wait_queue_me (47 samples, 0.25%)</title><rect x="94.4642%" y="821" width="0.2536%" height="15" fill="rgb(235,66,41)"/><text x="94.7142%" y="831.50"></text></g><g><title>schedule (46 samples, 0.25%)</title><rect x="94.4696%" y="805" width="0.2482%" height="15" fill="rgb(245,217,1)"/><text x="94.7196%" y="815.50"></text></g><g><title>__schedule (46 samples, 0.25%)</title><rect x="94.4696%" y="789" width="0.2482%" height="15" fill="rgb(229,91,1)"/><text x="94.7196%" y="799.50"></text></g><g><title>__do_sys_futex (60 samples, 0.32%)</title><rect x="94.4319%" y="869" width="0.3237%" height="15" fill="rgb(207,101,30)"/><text x="94.6819%" y="879.50"></text></g><g><title>do_futex (59 samples, 0.32%)</title><rect x="94.4373%" y="853" width="0.3183%" height="15" fill="rgb(223,82,49)"/><text x="94.6873%" y="863.50"></text></g><g><title>futex_wait (58 samples, 0.31%)</title><rect x="94.4426%" y="837" width="0.3129%" height="15" fill="rgb(218,167,17)"/><text x="94.6926%" y="847.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (69 samples, 0.37%)</title><rect x="94.3887%" y="949" width="0.3723%" height="15" fill="rgb(208,103,14)"/><text x="94.6387%" y="959.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (66 samples, 0.36%)</title><rect x="94.4049%" y="933" width="0.3561%" height="15" fill="rgb(238,20,8)"/><text x="94.6549%" y="943.50"></text></g><g><title>syscall (62 samples, 0.33%)</title><rect x="94.4265%" y="917" width="0.3345%" height="15" fill="rgb(218,80,54)"/><text x="94.6765%" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (61 samples, 0.33%)</title><rect x="94.4319%" y="901" width="0.3291%" height="15" fill="rgb(240,144,17)"/><text x="94.6819%" y="911.50"></text></g><g><title>do_syscall_64 (61 samples, 0.33%)</title><rect x="94.4319%" y="885" width="0.3291%" height="15" fill="rgb(245,27,50)"/><text x="94.6819%" y="895.50"></text></g><g><title>parking_lot_core::parking_lot::park (71 samples, 0.38%)</title><rect x="94.3887%" y="997" width="0.3831%" height="15" fill="rgb(251,51,7)"/><text x="94.6387%" y="1007.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (71 samples, 0.38%)</title><rect x="94.3887%" y="981" width="0.3831%" height="15" fill="rgb(245,217,29)"/><text x="94.6387%" y="991.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (71 samples, 0.38%)</title><rect x="94.3887%" y="965" width="0.3831%" height="15" fill="rgb(221,176,29)"/><text x="94.6387%" y="975.50"></text></g><g><title>pick_next_task_fair (21 samples, 0.11%)</title><rect x="94.9067%" y="869" width="0.1133%" height="15" fill="rgb(212,180,24)"/><text x="95.1567%" y="879.50"></text></g><g><title>__schedule (40 samples, 0.22%)</title><rect x="94.8689%" y="885" width="0.2158%" height="15" fill="rgb(254,24,2)"/><text x="95.1189%" y="895.50"></text></g><g><title>__x64_sys_sched_yield (48 samples, 0.26%)</title><rect x="94.8311%" y="917" width="0.2590%" height="15" fill="rgb(230,100,2)"/><text x="95.0811%" y="927.50"></text></g><g><title>schedule (42 samples, 0.23%)</title><rect x="94.8635%" y="901" width="0.2266%" height="15" fill="rgb(219,142,25)"/><text x="95.1135%" y="911.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (60 samples, 0.32%)</title><rect x="94.7934%" y="949" width="0.3237%" height="15" fill="rgb(240,73,43)"/><text x="95.0434%" y="959.50"></text></g><g><title>do_syscall_64 (60 samples, 0.32%)</title><rect x="94.7934%" y="933" width="0.3237%" height="15" fill="rgb(214,114,15)"/><text x="95.0434%" y="943.50"></text></g><g><title>__GI___sched_yield (63 samples, 0.34%)</title><rect x="94.7826%" y="965" width="0.3399%" height="15" fill="rgb(207,130,4)"/><text x="95.0326%" y="975.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (140 samples, 0.76%)</title><rect x="94.3725%" y="1013" width="0.7554%" height="15" fill="rgb(221,25,40)"/><text x="94.6225%" y="1023.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (66 samples, 0.36%)</title><rect x="94.7718%" y="997" width="0.3561%" height="15" fill="rgb(241,184,7)"/><text x="95.0218%" y="1007.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (64 samples, 0.35%)</title><rect x="94.7826%" y="981" width="0.3453%" height="15" fill="rgb(235,159,4)"/><text x="95.0326%" y="991.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_shared_slow (142 samples, 0.77%)</title><rect x="94.3671%" y="1029" width="0.7662%" height="15" fill="rgb(214,87,48)"/><text x="94.6171%" y="1039.50"></text></g><g><title>wgpu_core::hub::Registry&lt;T,I,F&gt;::read (161 samples, 0.87%)</title><rect x="94.2754%" y="1077" width="0.8687%" height="15" fill="rgb(246,198,24)"/><text x="94.5254%" y="1087.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (159 samples, 0.86%)</title><rect x="94.2862%" y="1061" width="0.8579%" height="15" fill="rgb(209,66,40)"/><text x="94.5362%" y="1071.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (159 samples, 0.86%)</title><rect x="94.2862%" y="1045" width="0.8579%" height="15" fill="rgb(233,147,39)"/><text x="94.5362%" y="1055.50"></text></g><g><title>wgpu_core::hub::Registry&lt;T,I,F&gt;::write (37 samples, 0.20%)</title><rect x="95.1441%" y="1077" width="0.1996%" height="15" fill="rgb(231,145,52)"/><text x="95.3941%" y="1087.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (37 samples, 0.20%)</title><rect x="95.1441%" y="1061" width="0.1996%" height="15" fill="rgb(206,20,26)"/><text x="95.3941%" y="1071.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (37 samples, 0.20%)</title><rect x="95.1441%" y="1045" width="0.1996%" height="15" fill="rgb(238,220,4)"/><text x="95.3941%" y="1055.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (33 samples, 0.18%)</title><rect x="95.1656%" y="1029" width="0.1781%" height="15" fill="rgb(252,195,42)"/><text x="95.4156%" y="1039.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (32 samples, 0.17%)</title><rect x="95.1710%" y="1013" width="0.1727%" height="15" fill="rgb(209,10,6)"/><text x="95.4210%" y="1023.50"></text></g><g><title>&lt;wgpu_core::track::texture::TextureState as wgpu_core::track::ResourceState&gt;::change (19 samples, 0.10%)</title><rect x="95.3437%" y="1061" width="0.1025%" height="15" fill="rgb(229,3,52)"/><text x="95.5937%" y="1071.50"></text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::change_extend (27 samples, 0.15%)</title><rect x="95.3437%" y="1077" width="0.1457%" height="15" fill="rgb(253,49,37)"/><text x="95.5937%" y="1087.50"></text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::prepend (21 samples, 0.11%)</title><rect x="95.4894%" y="1077" width="0.1133%" height="15" fill="rgb(240,103,49)"/><text x="95.7394%" y="1087.50"></text></g><g><title>&lt;wgpu_core::track::texture::TextureState as wgpu_core::track::ResourceState&gt;::query (22 samples, 0.12%)</title><rect x="95.6350%" y="1045" width="0.1187%" height="15" fill="rgb(250,182,30)"/><text x="95.8850%" y="1055.50"></text></g><g><title>&lt;wgpu_core::track::texture::TextureState as wgpu_core::track::ResourceState&gt;::query (403 samples, 2.17%)</title><rect x="95.6081%" y="1061" width="2.1744%" height="15" fill="rgb(248,8,30)"/><text x="95.8581%" y="1071.50">&lt;..</text></g><g><title>wgpu_core::track::range::RangedStates&lt;I,T&gt;::query (376 samples, 2.03%)</title><rect x="95.7537%" y="1045" width="2.0287%" height="15" fill="rgb(237,120,30)"/><text x="96.0037%" y="1055.50">w..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u16&gt;::gt (94 samples, 0.51%)</title><rect x="97.2753%" y="1029" width="0.5072%" height="15" fill="rgb(221,146,34)"/><text x="97.5253%" y="1039.50"></text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::query (407 samples, 2.20%)</title><rect x="95.6027%" y="1077" width="2.1960%" height="15" fill="rgb(242,55,13)"/><text x="95.8527%" y="1087.50">w..</text></g><g><title>wgpu_core::hub::Storage&lt;T,I&gt;::get (23 samples, 0.12%)</title><rect x="97.8472%" y="1061" width="0.1241%" height="15" fill="rgb(242,112,31)"/><text x="98.0972%" y="1071.50"></text></g><g><title>&lt;wgpu_core::RefCount as core::clone::Clone&gt;::clone (46 samples, 0.25%)</title><rect x="97.9983%" y="1029" width="0.2482%" height="15" fill="rgb(249,192,27)"/><text x="98.2483%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (30 samples, 0.16%)</title><rect x="98.3652%" y="933" width="0.1619%" height="15" fill="rgb(208,204,44)"/><text x="98.6152%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (19 samples, 0.10%)</title><rect x="98.4245%" y="917" width="0.1025%" height="15" fill="rgb(208,93,54)"/><text x="98.6745%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::reserve (57 samples, 0.31%)</title><rect x="98.2519%" y="997" width="0.3075%" height="15" fill="rgb(242,1,31)"/><text x="98.5019%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (57 samples, 0.31%)</title><rect x="98.2519%" y="981" width="0.3075%" height="15" fill="rgb(241,83,25)"/><text x="98.5019%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (55 samples, 0.30%)</title><rect x="98.2627%" y="965" width="0.2968%" height="15" fill="rgb(205,169,50)"/><text x="98.5127%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (50 samples, 0.27%)</title><rect x="98.2896%" y="949" width="0.2698%" height="15" fill="rgb(239,186,37)"/><text x="98.5396%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (61 samples, 0.33%)</title><rect x="98.2519%" y="1029" width="0.3291%" height="15" fill="rgb(205,221,10)"/><text x="98.5019%" y="1039.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (61 samples, 0.33%)</title><rect x="98.2519%" y="1013" width="0.3291%" height="15" fill="rgb(218,196,15)"/><text x="98.5019%" y="1023.50"></text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::get_or_insert (117 samples, 0.63%)</title><rect x="97.9767%" y="1045" width="0.6313%" height="15" fill="rgb(218,196,35)"/><text x="98.2267%" y="1055.50"></text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::use_extend (151 samples, 0.81%)</title><rect x="97.7986%" y="1077" width="0.8147%" height="15" fill="rgb(233,63,24)"/><text x="98.0486%" y="1087.50"></text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::change_extend (119 samples, 0.64%)</title><rect x="97.9713%" y="1061" width="0.6421%" height="15" fill="rgb(225,8,4)"/><text x="98.2213%" y="1071.50"></text></g><g><title>__GI___libc_malloc (38 samples, 0.21%)</title><rect x="98.7968%" y="901" width="0.2050%" height="15" fill="rgb(234,105,35)"/><text x="99.0468%" y="911.50"></text></g><g><title>_int_malloc (35 samples, 0.19%)</title><rect x="98.8130%" y="885" width="0.1888%" height="15" fill="rgb(236,21,32)"/><text x="99.0630%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (43 samples, 0.23%)</title><rect x="98.7860%" y="949" width="0.2320%" height="15" fill="rgb(228,109,6)"/><text x="99.0360%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (41 samples, 0.22%)</title><rect x="98.7968%" y="933" width="0.2212%" height="15" fill="rgb(229,215,31)"/><text x="99.0468%" y="943.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.22%)</title><rect x="98.7968%" y="917" width="0.2212%" height="15" fill="rgb(221,52,54)"/><text x="99.0468%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::reserve (56 samples, 0.30%)</title><rect x="98.7213%" y="1013" width="0.3021%" height="15" fill="rgb(252,129,43)"/><text x="98.9713%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (55 samples, 0.30%)</title><rect x="98.7267%" y="997" width="0.2968%" height="15" fill="rgb(248,183,27)"/><text x="98.9767%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (54 samples, 0.29%)</title><rect x="98.7321%" y="981" width="0.2914%" height="15" fill="rgb(250,0,22)"/><text x="98.9821%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (51 samples, 0.28%)</title><rect x="98.7482%" y="965" width="0.2752%" height="15" fill="rgb(213,166,10)"/><text x="98.9982%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (70 samples, 0.38%)</title><rect x="98.7213%" y="1045" width="0.3777%" height="15" fill="rgb(207,163,36)"/><text x="98.9713%" y="1055.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (70 samples, 0.38%)</title><rect x="98.7213%" y="1029" width="0.3777%" height="15" fill="rgb(208,122,22)"/><text x="98.9713%" y="1039.50"></text></g><g><title>wgpu_core::track::ResourceTracker&lt;S&gt;::merge_extend (104 samples, 0.56%)</title><rect x="98.6134%" y="1061" width="0.5611%" height="15" fill="rgb(207,104,49)"/><text x="98.8634%" y="1071.50"></text></g><g><title>wgpu_core::track::TrackerSet::merge_extend (115 samples, 0.62%)</title><rect x="98.6134%" y="1077" width="0.6205%" height="15" fill="rgb(248,211,50)"/><text x="98.8634%" y="1087.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_end_render_pass (14,031 samples, 75.70%)</title><rect x="23.5945%" y="1125" width="75.7041%" height="15" fill="rgb(217,13,45)"/><text x="23.8445%" y="1135.50">&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_end_render_pass</text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (14,029 samples, 75.69%)</title><rect x="23.6053%" y="1109" width="75.6933%" height="15" fill="rgb(211,216,49)"/><text x="23.8553%" y="1119.50">wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass</text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (14,029 samples, 75.69%)</title><rect x="23.6053%" y="1093" width="75.6933%" height="15" fill="rgb(221,58,53)"/><text x="23.8553%" y="1103.50">wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl</text></g><g><title>core::mem::drop (14,049 samples, 75.80%)</title><rect x="23.5729%" y="1157" width="75.8012%" height="15" fill="rgb(220,112,41)"/><text x="23.8229%" y="1167.50">core::mem::drop</text></g><g><title>core::ptr::drop_in_place (14,049 samples, 75.80%)</title><rect x="23.5729%" y="1141" width="75.8012%" height="15" fill="rgb(236,38,28)"/><text x="23.8229%" y="1151.50">core::ptr::drop_in_place</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (19 samples, 0.10%)</title><rect x="99.6655%" y="1141" width="0.1025%" height="15" fill="rgb(227,195,22)"/><text x="99.9155%" y="1151.50"></text></g><g><title>wgpu_render_pass_set_push_constants (27 samples, 0.15%)</title><rect x="99.6493%" y="1157" width="0.1457%" height="15" fill="rgb(214,55,33)"/><text x="99.8993%" y="1167.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14,137 samples, 76.28%)</title><rect x="23.5459%" y="1221" width="76.2760%" height="15" fill="rgb(248,80,13)"/><text x="23.7959%" y="1231.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (14,137 samples, 76.28%)</title><rect x="23.5459%" y="1205" width="76.2760%" height="15" fill="rgb(238,52,6)"/><text x="23.7959%" y="1215.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (14,137 samples, 76.28%)</title><rect x="23.5459%" y="1189" width="76.2760%" height="15" fill="rgb(224,198,47)"/><text x="23.7959%" y="1199.50">core::iter::traits::iterator::Iterator::for_each::call::{{closure}}</text></g><g><title>nenbody::build_command_buffer::{{closure}} (14,137 samples, 76.28%)</title><rect x="23.5459%" y="1173" width="76.2760%" height="15" fill="rgb(233,171,20)"/><text x="23.7959%" y="1183.50">nenbody::build_command_buffer::{{closure}}</text></g><g><title>std::panic::catch_unwind (15,742 samples, 84.94%)</title><rect x="14.8916%" y="1413" width="84.9358%" height="15" fill="rgb(241,30,25)"/><text x="15.1416%" y="1423.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (15,742 samples, 84.94%)</title><rect x="14.8916%" y="1397" width="84.9358%" height="15" fill="rgb(207,171,38)"/><text x="15.1416%" y="1407.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (15,742 samples, 84.94%)</title><rect x="14.8916%" y="1381" width="84.9358%" height="15" fill="rgb(234,70,1)"/><text x="15.1416%" y="1391.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15,742 samples, 84.94%)</title><rect x="14.8916%" y="1365" width="84.9358%" height="15" fill="rgb(232,178,18)"/><text x="15.1416%" y="1375.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (15,742 samples, 84.94%)</title><rect x="14.8916%" y="1349" width="84.9358%" height="15" fill="rgb(241,78,40)"/><text x="15.1416%" y="1359.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (15,742 samples, 84.94%)</title><rect x="14.8916%" y="1333" width="84.9358%" height="15" fill="rgb(222,35,25)"/><text x="15.1416%" y="1343.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (14,213 samples, 76.69%)</title><rect x="23.1413%" y="1317" width="76.6861%" height="15" fill="rgb(207,92,16)"/><text x="23.3913%" y="1327.50">crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (14,213 samples, 76.69%)</title><rect x="23.1413%" y="1301" width="76.6861%" height="15" fill="rgb(216,59,51)"/><text x="23.3913%" y="1311.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (14,213 samples, 76.69%)</title><rect x="23.1413%" y="1285" width="76.6861%" height="15" fill="rgb(213,80,28)"/><text x="23.3913%" y="1295.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (14,213 samples, 76.69%)</title><rect x="23.1413%" y="1269" width="76.6861%" height="15" fill="rgb(220,93,7)"/><text x="23.3913%" y="1279.50">crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}}</text></g><g><title>nenbody::main::{{closure}}::{{closure}} (14,213 samples, 76.69%)</title><rect x="23.1413%" y="1253" width="76.6861%" height="15" fill="rgb(225,24,44)"/><text x="23.3913%" y="1263.50">nenbody::main::{{closure}}::{{closure}}</text></g><g><title>nenbody::build_command_buffer (14,138 samples, 76.28%)</title><rect x="23.5459%" y="1237" width="76.2814%" height="15" fill="rgb(243,74,40)"/><text x="23.7959%" y="1247.50">nenbody::build_command_buffer</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (15,743 samples, 84.94%)</title><rect x="14.8916%" y="1477" width="84.9412%" height="15" fill="rgb(228,39,7)"/><text x="15.1416%" y="1487.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (15,743 samples, 84.94%)</title><rect x="14.8916%" y="1461" width="84.9412%" height="15" fill="rgb(227,79,8)"/><text x="15.1416%" y="1471.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (15,743 samples, 84.94%)</title><rect x="14.8916%" y="1445" width="84.9412%" height="15" fill="rgb(236,58,11)"/><text x="15.1416%" y="1455.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (15,743 samples, 84.94%)</title><rect x="14.8916%" y="1429" width="84.9412%" height="15" fill="rgb(249,63,35)"/><text x="15.1416%" y="1439.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>__GI___clone (15,770 samples, 85.09%)</title><rect x="14.7513%" y="1525" width="85.0869%" height="15" fill="rgb(252,114,16)"/><text x="15.0013%" y="1535.50">__GI___clone</text></g><g><title>start_thread (15,744 samples, 84.95%)</title><rect x="14.8916%" y="1509" width="84.9466%" height="15" fill="rgb(254,151,24)"/><text x="15.1416%" y="1519.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (15,744 samples, 84.95%)</title><rect x="14.8916%" y="1493" width="84.9466%" height="15" fill="rgb(253,54,39)"/><text x="15.1416%" y="1503.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>nenbody (18,528 samples, 99.97%)</title><rect x="0.0000%" y="1541" width="99.9676%" height="15" fill="rgb(243,25,45)"/><text x="0.2500%" y="1551.50">nenbody</text></g><g><title>all (18,534 samples, 100%)</title><rect x="0.0000%" y="1557" width="100.0000%" height="15" fill="rgb(234,134,9)"/><text x="0.2500%" y="1567.50"></text></g></svg></svg>